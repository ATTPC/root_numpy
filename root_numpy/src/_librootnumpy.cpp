/* Generated by Cython 0.20.1 on Wed Mar  5 12:14:49 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20_1"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE___librootnumpy
#define __PYX_HAVE_API___librootnumpy
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "pythread.h"
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <map>
#include <string>
#include "TObject.h"
#include "TObjArray.h"
#include "TBranch.h"
#include "TLeaf.h"
#include "TFile.h"
#include "TTree.h"
#include "TChain.h"
#include "TList.h"
#include "TTreeFormula.h"
#include "TClassEdit.h"
#include "TF1.h"
#include "TF2.h"
#include "TF3.h"
#include "TH1.h"
#include "TH2.h"
#include "TH3.h"
#include "TGraph.h"
#include "TGraph2D.h"
#include "TArrayD.h"
#include "TArrayF.h"
#include "TArrayL.h"
#include "TArrayI.h"
#include "TArrayS.h"
#include "TArrayC.h"
#include "TMatrixTBase.h"
#include "Column.h"
#include "BetterChain.h"
#include "util.h"
#include "Vector2Array.h"
#include <memory>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "setup.pxi",
  "tree.pyx",
  "innerjoin.pyx",
  "array.pyx",
  "matrix.pyx",
  "sample.pyx",
  "hist.pyx",
  "graph.pyx",
  "array.pxd",
  "__init__.pxd",
  "stringsource",
  "stringsource",
  "_librootnumpy.pyx",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name; /* for error messages only */
  struct __Pyx_StructField_* fields;
  size_t size;     /* sizeof(type) */
  size_t arraysize[8]; /* length of array in each dimension */
  int ndim;
  char typegroup; /* _R_eal, _C_omplex, Signed _I_nt, _U_nsigned int, _S_truct, _P_ointer, _O_bject, c_H_ar */
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":31
 * from _warnings import RootNumpyUnconvertibleWarning
 * 
 * ctypedef unsigned char unsigned_char             # <<<<<<<<<<<<<<
 * ctypedef unsigned short unsigned_short
 * ctypedef unsigned int unsigned_int
 */
typedef unsigned char __pyx_t_13_librootnumpy_unsigned_char;

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":32
 * 
 * ctypedef unsigned char unsigned_char
 * ctypedef unsigned short unsigned_short             # <<<<<<<<<<<<<<
 * ctypedef unsigned int unsigned_int
 * ctypedef unsigned long unsigned_long
 */
typedef unsigned short __pyx_t_13_librootnumpy_unsigned_short;

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":33
 * ctypedef unsigned char unsigned_char
 * ctypedef unsigned short unsigned_short
 * ctypedef unsigned int unsigned_int             # <<<<<<<<<<<<<<
 * ctypedef unsigned long unsigned_long
 * ctypedef long long long_long
 */
typedef unsigned int __pyx_t_13_librootnumpy_unsigned_int;

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":34
 * ctypedef unsigned short unsigned_short
 * ctypedef unsigned int unsigned_int
 * ctypedef unsigned long unsigned_long             # <<<<<<<<<<<<<<
 * ctypedef long long long_long
 * ctypedef unsigned long long unsigned_long_long
 */
typedef unsigned long __pyx_t_13_librootnumpy_unsigned_long;

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":35
 * ctypedef unsigned int unsigned_int
 * ctypedef unsigned long unsigned_long
 * ctypedef long long long_long             # <<<<<<<<<<<<<<
 * ctypedef unsigned long long unsigned_long_long
 * 
 */
typedef PY_LONG_LONG __pyx_t_13_librootnumpy_long_long;

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":36
 * ctypedef unsigned long unsigned_long
 * ctypedef long long long_long
 * ctypedef unsigned long long unsigned_long_long             # <<<<<<<<<<<<<<
 * 
 * include "ROOT.pxi"
 */
typedef unsigned PY_LONG_LONG __pyx_t_13_librootnumpy_unsigned_long_long;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
#ifndef _ARRAYARRAY_H
struct arrayobject;
typedef struct arrayobject arrayobject;
#endif

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_13_librootnumpy_Converter;
struct __pyx_t_13_librootnumpy_BasicConverter;
struct __pyx_t_13_librootnumpy_VaryArrayConverter;
struct __pyx_t_13_librootnumpy_FixedArrayConverter;
struct __pyx_t_13_librootnumpy_VectorConverterBase;
template <typename T>
struct __pyx_t_13_librootnumpy_VectorConverter;
template <typename T>
struct __pyx_t_13_librootnumpy_VectorVectorConverter;
struct __pyx_t_13_librootnumpy_VectorBoolConverter;
struct __pyx_opt_args_13_librootnumpy_handle_load;
struct __pyx_t_13_librootnumpy_NP2CConverter;
struct __pyx_t_13_librootnumpy_ScalarNP2CConverter;
struct __pyx_opt_args_13_librootnumpy_find_np2c_converter;
struct __pyx_opt_args_13_librootnumpy_array2tree;
struct __pyx_opt_args_13_librootnumpy_blockwise_inner_join;
struct __pyx_t_13_librootnumpy_Converter {

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":158
 * 
 * 
 * cdef cppclass Converter:             # <<<<<<<<<<<<<<
 *     __init__():
 *         pass
 */
   __pyx_t_13_librootnumpy_Converter(void);
  virtual  ~__pyx_t_13_librootnumpy_Converter(void);
  virtual int write(Column *, void *);
  virtual PyObject *get_nptype(void);
};
struct __pyx_t_13_librootnumpy_BasicConverter : public __pyx_t_13_librootnumpy_Converter {

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":169
 * 
 * 
 * cdef cppclass BasicConverter(Converter):             # <<<<<<<<<<<<<<
 *     # cdef string rtype
 *     int size
 */
  int size;
  int nptypecode;
  std::string nptype;
   __pyx_t_13_librootnumpy_BasicConverter(int, std::string, int);
  virtual int write(Column *, void *);
  virtual PyObject *get_nptype(void);
  virtual int get_nptypecode(void);
  virtual ~__pyx_t_13_librootnumpy_BasicConverter() { }};
struct __pyx_t_13_librootnumpy_VaryArrayConverter : public __pyx_t_13_librootnumpy_Converter {

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":188
 * 
 * 
 * cdef cppclass VaryArrayConverter(Converter):             # <<<<<<<<<<<<<<
 *     BasicConverter* conv # converter for single element
 *     int typecode
 */
  __pyx_t_13_librootnumpy_BasicConverter *conv;
  int typecode;
  int elesize;
   __pyx_t_13_librootnumpy_VaryArrayConverter(__pyx_t_13_librootnumpy_BasicConverter *);
  virtual int write(Column *, void *);
  virtual PyObject *get_nptype(void);
  virtual PyObject *get_nptypecode(void);
  virtual ~__pyx_t_13_librootnumpy_VaryArrayConverter() { }};
struct __pyx_t_13_librootnumpy_FixedArrayConverter : public __pyx_t_13_librootnumpy_Converter {

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":206
 * 
 * 
 * cdef cppclass FixedArrayConverter(Converter):             # <<<<<<<<<<<<<<
 *     BasicConverter* conv # converter for single element
 *     int L # numele
 */
  __pyx_t_13_librootnumpy_BasicConverter *conv;
  int L;
   __pyx_t_13_librootnumpy_FixedArrayConverter(__pyx_t_13_librootnumpy_BasicConverter *, int);
  virtual int write(Column *, void *);
  virtual PyObject *get_nptype(void);
  virtual int get_nptypecode(void);
  virtual ~__pyx_t_13_librootnumpy_FixedArrayConverter() { }};
struct __pyx_t_13_librootnumpy_VectorConverterBase : public __pyx_t_13_librootnumpy_Converter {
  virtual PyObject *get_nptype(void);
  virtual PyObject *get_nptypecode(void);
  virtual ~__pyx_t_13_librootnumpy_VectorConverterBase() { }};

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":230
 * 
 * 
 * cdef cppclass VectorConverter[T](VectorConverterBase):             # <<<<<<<<<<<<<<
 *     int elesize
 *     int nptypecode
 */
template <class T>
struct __pyx_t_13_librootnumpy_VectorConverter : public __pyx_t_13_librootnumpy_VectorConverterBase {
  int elesize;
  int nptypecode;
  Vector2Array<T> v2a;
   __pyx_t_13_librootnumpy_VectorConverter(void);
  virtual int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorConverter() { }};

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":247
 *         return create_numpyarray(buffer, fa, this.nptypecode, numele, this.elesize)
 * 
 * cdef cppclass VectorVectorConverter[T](VectorConverterBase):             # <<<<<<<<<<<<<<
 *     int elesize
 *     int nptypecode
 */
template <class T>
struct __pyx_t_13_librootnumpy_VectorVectorConverter : public __pyx_t_13_librootnumpy_VectorConverterBase {
  int elesize;
  int nptypecode;
  Vector2Array<T> v2a;
   __pyx_t_13_librootnumpy_VectorVectorConverter(void);
  virtual int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorVectorConverter() { }};
struct __pyx_t_13_librootnumpy_VectorBoolConverter : public __pyx_t_13_librootnumpy_VectorConverterBase {

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":293
 *         return sizeof(outerobj)
 * 
 * cdef cppclass VectorBoolConverter(VectorConverterBase):             # <<<<<<<<<<<<<<
 *     __init__():
 *         pass
 */
   __pyx_t_13_librootnumpy_VectorBoolConverter(void);
  virtual int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorBoolConverter() { }};

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":303
 * 
 * cdef cpp_map[string, Converter*] CONVERTERS
 * ctypedef pair[string, Converter*] CONVERTERS_ITEM             # <<<<<<<<<<<<<<
 * 
 * for ctypename, (ctype, dtype, dtypecode) in TYPES.items():
 */
typedef std::pair<std::string,__pyx_t_13_librootnumpy_Converter *> __pyx_t_13_librootnumpy_CONVERTERS_ITEM;

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":423
 * 
 * 
 * cdef handle_load(int load, bool ignore_index=False):             # <<<<<<<<<<<<<<
 *     if load >= 0:
 *         return
 */
struct __pyx_opt_args_13_librootnumpy_handle_load {
  int __pyx_n;
  bool ignore_index;
};
struct __pyx_t_13_librootnumpy_NP2CConverter {
  virtual void fill_from(void *);
  virtual  ~__pyx_t_13_librootnumpy_NP2CConverter(void);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":604
 * """
 * 
 * cdef cppclass NP2CConverter:             # <<<<<<<<<<<<<<
 *     void fill_from(void* source):
 *         pass
 */
};
struct __pyx_t_13_librootnumpy_ScalarNP2CConverter : public __pyx_t_13_librootnumpy_NP2CConverter {

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":611
 * 
 * 
 * cdef cppclass ScalarNP2CConverter(NP2CConverter):             # <<<<<<<<<<<<<<
 *     int nbytes
 *     string roottype
 */
  int nbytes;
  std::string roottype;
  std::string name;
  void *value;
  TBranch *branch;
   __pyx_t_13_librootnumpy_ScalarNP2CConverter(TTree *, std::string, std::string, int);
  virtual PyObject *__del__(PyObject *);
  virtual void fill_from(void *);
  virtual ~__pyx_t_13_librootnumpy_ScalarNP2CConverter() { }};

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":648
 * 
 * 
 * cdef NP2CConverter* find_np2c_converter(TTree* tree, name, dtype, peekvalue=None):             # <<<<<<<<<<<<<<
 *     # TODO:
 *     # np.float16: #this needs special treatment root doesn't have 16 bit float?
 */
struct __pyx_opt_args_13_librootnumpy_find_np2c_converter {
  int __pyx_n;
  PyObject *peekvalue;
};

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":671
 * 
 * 
 * cdef TTree* array2tree(np.ndarray arr, name='tree', TTree* tree=NULL) except *:             # <<<<<<<<<<<<<<
 *     # hmm how do I catch all python exception
 *     # and clean up before throwing ?
 */
struct __pyx_opt_args_13_librootnumpy_array2tree {
  int __pyx_n;
  PyObject *name;
  TTree *tree;
};

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":11
 * # be careful of objects though you will need to INCREF it
 * 
 * cpdef blockwise_inner_join(data, left, foreign_key, right,             # <<<<<<<<<<<<<<
 *                            force_repeat=None,
 *                            fk_name=None):
 */
struct __pyx_opt_args_13_librootnumpy_blockwise_inner_join {
  int __pyx_n;
  PyObject *force_repeat;
  PyObject *fk_name;
};
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values); /*proto*/
#endif

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback); /*proto*/

#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) : \
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

#if PY_VERSION_HEX < 0x02050000
#ifndef PyAnySet_CheckExact
#define PyAnySet_CheckExact(ob) \
    ((ob)->ob_type == &PySet_Type || \
     (ob)->ob_type == &PyFrozenSet_Type)
#define PySet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PySet_Type, (iterable), NULL)
#define Pyx_PyFrozenSet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PyFrozenSet_Type, (iterable), NULL)
#define PySet_Size(anyset) \
    PyObject_Size((anyset))
#define PySet_Contains(anyset, key) \
    PySequence_Contains((anyset), (key))
#define PySet_Pop(set) \
    PyObject_CallMethod((set), (char*)"pop", NULL)
static CYTHON_INLINE int PySet_Clear(PyObject *set) {
    PyObject *ret = PyObject_CallMethod(set, (char*)"clear", NULL);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}
static CYTHON_INLINE int PySet_Discard(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char*)"discard", (char*)"(O)", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}
static CYTHON_INLINE int PySet_Add(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char*)"add", (char*)"(O)", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}
#endif /* PyAnySet_CheckExact (<= Py2.4) */
#endif /* < Py2.5  */

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

static void __Pyx_RaiseBufferIndexError(int axis); /*proto*/

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static void __Pyx_RaiseBufferFallbackError(void); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name); /*proto*/

#ifndef _ARRAYARRAY_H
#define _ARRAYARRAY_H
typedef struct arraydescr {
    int typecode;
    int itemsize;
    PyObject * (*getitem)(struct arrayobject *, Py_ssize_t);
    int (*setitem)(struct arrayobject *, Py_ssize_t, PyObject *);
#if PY_VERSION_HEX >= 0x03000000
    char *formats;
#endif
} arraydescr;
struct arrayobject {
    PyObject_HEAD
    Py_ssize_t ob_size;
    union {
        char *ob_item;
        float *as_floats;
        double *as_doubles;
        int *as_ints;
        unsigned int *as_uints;
        unsigned char *as_uchars;
        signed char *as_schars;
        char *as_chars;
        unsigned long *as_ulongs;
        long *as_longs;
        short *as_shorts;
        unsigned short *as_ushorts;
        Py_UNICODE *as_pyunicodes;
        void *as_voidptr;
    } data;
    Py_ssize_t allocated;
    struct arraydescr *ob_descr;
    PyObject *weakreflist; /* List of weak references */
#if PY_VERSION_HEX >= 0x03000000
        int ob_exports;  /* Number of exported buffers */
#endif
};
#ifndef NO_NEWARRAY_INLINE
static CYTHON_INLINE PyObject * newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr) {
    arrayobject *op;
    size_t nbytes;
    if (size < 0) {
        PyErr_BadInternalCall();
        return NULL;
    }
    nbytes = size * descr->itemsize;
    if (nbytes / descr->itemsize != (size_t)size) {
        return PyErr_NoMemory();
    }
    op = (arrayobject *) type->tp_alloc(type, 0);
    if (op == NULL) {
        return NULL;
    }
    op->ob_descr = descr;
    op->allocated = size;
    op->weakreflist = NULL;
    op->ob_size = size;
    if (size <= 0) {
        op->data.ob_item = NULL;
    }
    else {
        op->data.ob_item = PyMem_NEW(char, nbytes);
        if (op->data.ob_item == NULL) {
            Py_DECREF(op);
            return PyErr_NoMemory();
        }
    }
    return (PyObject *) op;
}
#else
PyObject* newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr);
#endif /* ifndef NO_NEWARRAY_INLINE */
static CYTHON_INLINE int resize(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    PyMem_Resize(items, char, (size_t)(n * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = n;
    return 0;
}
static CYTHON_INLINE int resize_smart(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    Py_ssize_t newsize;
    if (n < self->allocated) {
        if (n*4 > self->allocated) {
            self->ob_size = n;
            return 0;
        }
    }
    newsize = n  * 3 / 2 + 1;
    PyMem_Resize(items, char, (size_t)(newsize * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = newsize;
    return 0;
}
#endif

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'array' */

/* Module declarations from 'cpython.array' */
static PyTypeObject *__pyx_ptype_7cpython_5array_array = 0;
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *, char *, Py_ssize_t); /*proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from '_librootnumpy' */
static std::map<std::string,__pyx_t_13_librootnumpy_Converter *> __pyx_v_13_librootnumpy_CONVERTERS;
static PyObject *__pyx_f_13_librootnumpy_parse_tree_structure(TTree *); /*proto*/
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray(void *, void *, int, unsigned long, int); /*proto*/
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray_vectorbool(void *, std::vector<bool> *); /*proto*/
static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_find_converter(Column *); /*proto*/
static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_find_converter_by_typename(std::string); /*proto*/
static PyArrayObject *__pyx_f_13_librootnumpy_init_array(std::vector<Column *> &, std::vector<__pyx_t_13_librootnumpy_Converter *> &, unsigned long, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_handle_load(int, struct __pyx_opt_args_13_librootnumpy_handle_load *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_tree2array(TTree *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
static __pyx_t_13_librootnumpy_NP2CConverter *__pyx_f_13_librootnumpy_find_np2c_converter(TTree *, PyObject *, PyObject *, struct __pyx_opt_args_13_librootnumpy_find_np2c_converter *__pyx_optional_args); /*proto*/
static TTree *__pyx_f_13_librootnumpy_array2tree(PyArrayObject *, struct __pyx_opt_args_13_librootnumpy_array2tree *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyArrayObject *__pyx_f_13_librootnumpy_tonumpyarray(void *, int, int); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_blockwise_inner_join(PyObject *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_13_librootnumpy_blockwise_inner_join *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_13_librootnumpy__vector_fk_inner_join(PyArrayObject *, PyObject *, PyArrayObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static PyObject *__pyx_f_13_librootnumpy__scalar_fk_inner_join(PyArrayObject *, PyObject *, PyArrayObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static std::string __pyx_convert_string_from_py_(PyObject *); /*proto*/
static PyObject *__pyx_convert_string_to_py_(const std::string &); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_double_t = { "double_t", NULL, sizeof(__pyx_t_5numpy_double_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t = { "float32_t", NULL, sizeof(__pyx_t_5numpy_float32_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int_t = { "int_t", NULL, sizeof(__pyx_t_5numpy_int_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t = { "int8_t", NULL, sizeof(__pyx_t_5numpy_int8_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int8_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int8_t), 0 };
#define __Pyx_MODULE_NAME "_librootnumpy"
int __pyx_module_is_main__librootnumpy = 0;

/* Implementation of '_librootnumpy' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_pf_13_librootnumpy_list_trees(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_2list_structures(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_4list_branches(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_6root2array_fromFname(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnames, PyObject *__pyx_v_treename, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, PyObject *__pyx_v_include_weight, PyObject *__pyx_v_weight_name); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_8root2array_fromCObj(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tree, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, PyObject *__pyx_v_include_weight, PyObject *__pyx_v_weight_name); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_10array2tree_toCObj(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_name, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_12array2root(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_filename, PyObject *__pyx_v_treename, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_14cleanup(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_16array_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_18array_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_20array_l(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_22array_i(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_24array_s(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_26array_c(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_28matrix_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_mat); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_30matrix_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_mat); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_32sample_f1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f1, unsigned int __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_34sample_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h1, unsigned int __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_36sample_f2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f2, unsigned int __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_38sample_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h2, unsigned int __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_40sample_f3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f3, unsigned int __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_42sample_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h3, unsigned int __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_44fill_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_46fill_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_48fill_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_50fill_g1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_52fill_g2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_54blockwise_inner_join(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_left, PyObject *__pyx_v_foreign_key, PyObject *__pyx_v_right, PyObject *__pyx_v_force_repeat, PyObject *__pyx_v_fk_name); /* proto */
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static char __pyx_k_[] = ", ";
static char __pyx_k_B[] = "B";
static char __pyx_k_D[] = "D";
static char __pyx_k_F[] = "F";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_S[] = "S";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_j[] = "j";
static char __pyx_k_l[] = "l";
static char __pyx_k_n[] = "n";
static char __pyx_k_q[] = "q";
static char __pyx_k_s[] = "s";
static char __pyx_k_t[] = "t";
static char __pyx_k_x[] = "x";
static char __pyx_k_y[] = "y";
static char __pyx_k_z[] = "z";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k_f1[] = "f1";
static char __pyx_k_f2[] = "f2";
static char __pyx_k_f3[] = "f3";
static char __pyx_k_fn[] = "fn";
static char __pyx_k_h1[] = "h1";
static char __pyx_k_h2[] = "h2";
static char __pyx_k_h3[] = "h3";
static char __pyx_k_it[] = "it";
static char __pyx_k_np[] = "np";
static char __pyx_k__13[] = "/";
static char __pyx_k_arr[] = "arr";
static char __pyx_k_idx[] = "idx";
static char __pyx_k_int[] = "int";
static char __pyx_k_map[] = "map";
static char __pyx_k_mat[] = "_mat";
static char __pyx_k_obj[] = "obj";
static char __pyx_k_ret[] = "ret";
static char __pyx_k_bool[] = "bool";
static char __pyx_k_char[] = "char";
static char __pyx_k_data[] = "data";
static char __pyx_k_f1_2[] = "f1_";
static char __pyx_k_f2_2[] = "f2_";
static char __pyx_k_f3_2[] = "f3_";
static char __pyx_k_file[] = "file";
static char __pyx_k_fk_d[] = "fk%d";
static char __pyx_k_h1_2[] = "h1_";
static char __pyx_k_h2_2[] = "h2_";
static char __pyx_k_h3_2[] = "h3_";
static char __pyx_k_hist[] = "hist";
static char __pyx_k_int8[] = "int8";
static char __pyx_k_join[] = "join";
static char __pyx_k_keys[] = "keys";
static char __pyx_k_left[] = "left";
static char __pyx_k_long[] = "long";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_mode[] = "mode";
static char __pyx_k_name[] = "name";
static char __pyx_k_read[] = "read";
static char __pyx_k_s__s[] = "%s_%s";
static char __pyx_k_size[] = "size";
static char __pyx_k_step[] = "step";
static char __pyx_k_stop[] = "stop";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_tree[] = "tree";
static char __pyx_k_vary[] = "[vary]";
static char __pyx_k_warn[] = "warn";
static char __pyx_k_TTree[] = "TTree";
static char __pyx_k_TYPES[] = "TYPES";
static char __pyx_k_arr_2[] = "_arr";
static char __pyx_k_array[] = "array";
static char __pyx_k_chain[] = "chain";
static char __pyx_k_ctype[] = "ctype";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_empty[] = "empty";
static char __pyx_k_fixed[] = "[fixed]";
static char __pyx_k_float[] = "float";
static char __pyx_k_fname[] = "fname";
static char __pyx_k_graph[] = "graph";
static char __pyx_k_index[] = "index";
static char __pyx_k_int16[] = "int16";
static char __pyx_k_int32[] = "int32";
static char __pyx_k_int64[] = "int64";
static char __pyx_k_items[] = "items";
static char __pyx_k_names[] = "names";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_range[] = "range";
static char __pyx_k_right[] = "right";
static char __pyx_k_short[] = "short";
static char __pyx_k_start[] = "start";
static char __pyx_k_ttree[] = "ttree";
static char __pyx_k_uint8[] = "uint8";
static char __pyx_k_atexit[] = "atexit";
static char __pyx_k_clname[] = "clname";
static char __pyx_k_double[] = "double";
static char __pyx_k_fields[] = "fields";
static char __pyx_k_fnames[] = "fnames";
static char __pyx_k_format[] = "format";
static char __pyx_k_hist_2[] = "_hist";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_intree[] = "intree";
static char __pyx_k_matrix[] = "matrix";
static char __pyx_k_object[] = "object";
static char __pyx_k_resize[] = "resize";
static char __pyx_k_string[] = "string";
static char __pyx_k_uint16[] = "uint16";
static char __pyx_k_uint32[] = "uint32";
static char __pyx_k_uint64[] = "uint64";
static char __pyx_k_update[] = "update";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_IOError[] = "IOError";
static char __pyx_k_array_c[] = "array_c";
static char __pyx_k_array_d[] = "array_d";
static char __pyx_k_array_f[] = "array_f";
static char __pyx_k_array_i[] = "array_i";
static char __pyx_k_array_l[] = "array_l";
static char __pyx_k_array_s[] = "array_s";
static char __pyx_k_bin_idx[] = "bin_idx";
static char __pyx_k_cleanup[] = "cleanup";
static char __pyx_k_fill_g1[] = "fill_g1";
static char __pyx_k_fill_g2[] = "fill_g2";
static char __pyx_k_fill_h1[] = "fill_h1";
static char __pyx_k_fill_h2[] = "fill_h2";
static char __pyx_k_fill_h3[] = "fill_h3";
static char __pyx_k_fk_name[] = "fk_name";
static char __pyx_k_float32[] = "float32";
static char __pyx_k_float64[] = "float64";
static char __pyx_k_graph_2[] = "_graph";
static char __pyx_k_indices[] = "indices";
static char __pyx_k_outtree[] = "outtree";
static char __pyx_k_weights[] = "weights";
static char __pyx_k_branches[] = "branches";
static char __pyx_k_filename[] = "filename";
static char __pyx_k_itemsize[] = "itemsize";
static char __pyx_k_longlong[] = "longlong";
static char __pyx_k_matrix_d[] = "matrix_d";
static char __pyx_k_matrix_f[] = "matrix_f";
static char __pyx_k_register[] = "register";
static char __pyx_k_root_arr[] = "root_arr";
static char __pyx_k_root_mat[] = "root_mat";
static char __pyx_k_string_2[] = "string_";
static char __pyx_k_treename[] = "treename";
static char __pyx_k_warnings[] = "warnings";
static char __pyx_k_TypeError[] = "TypeError";
static char __pyx_k_ctypename[] = "ctypename";
static char __pyx_k_dtypecode[] = "dtypecode";
static char __pyx_k_long_long[] = "long long";
static char __pyx_k_n_samples[] = "n_samples";
static char __pyx_k_sample_f1[] = "sample_f1";
static char __pyx_k_sample_f2[] = "sample_f2";
static char __pyx_k_sample_f3[] = "sample_f3";
static char __pyx_k_sample_h1[] = "sample_h1";
static char __pyx_k_sample_h2[] = "sample_h2";
static char __pyx_k_sample_h3[] = "sample_h3";
static char __pyx_k_selection[] = "selection";
static char __pyx_k_ulonglong[] = "ulonglong";
static char __pyx_k_IndexError[] = "IndexError";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_array2root[] = "array2root";
static char __pyx_k_list_trees[] = "list_trees";
static char __pyx_k_rpartition[] = "rpartition";
static char __pyx_k_vector_int[] = "vector<int>";
static char __pyx_k_warnings_2[] = "_warnings";
static char __pyx_k_ImportError[] = "ImportError";
static char __pyx_k_MemoryError[] = "MemoryError";
static char __pyx_k_OrderedDict[] = "OrderedDict";
static char __pyx_k_collections[] = "collections";
static char __pyx_k_flatnonzero[] = "flatnonzero";
static char __pyx_k_foreign_key[] = "foreign_key";
static char __pyx_k_vector_bool[] = "vector<bool>";
static char __pyx_k_vector_char[] = "vector<char>";
static char __pyx_k_vector_long[] = "vector<long>";
static char __pyx_k_weight_name[] = "weight_name";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_force_repeat[] = "force_repeat";
static char __pyx_k_librootnumpy[] = "_librootnumpy";
static char __pyx_k_unsigned_int[] = "unsigned int";
static char __pyx_k_vector_float[] = "vector<float>";
static char __pyx_k_vector_short[] = "vector<short>";
static char __pyx_k_cannot_read_s[] = "cannot read %s";
static char __pyx_k_count_nonzero[] = "count_nonzero";
static char __pyx_k_list_branches[] = "list_branches";
static char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static char __pyx_k_unsigned_char[] = "unsigned char";
static char __pyx_k_unsigned_long[] = "unsigned long";
static char __pyx_k_vector_double[] = "vector<double>";
static char __pyx_k_chain_is_empty[] = "chain is empty";
static char __pyx_k_include_weight[] = "include_weight";
static char __pyx_k_return_indices[] = "return_indices";
static char __pyx_k_unsigned_short[] = "unsigned short";
static char __pyx_k_list_structures[] = "list_structures";
static char __pyx_k_TYPES_NUMPY2ROOT[] = "TYPES_NUMPY2ROOT";
static char __pyx_k_vector_long_long[] = "vector<long long>";
static char __pyx_k_array2tree_toCObj[] = "array2tree_toCObj";
static char __pyx_k_pyx_releasebuffer[] = "__pyx_releasebuffer";
static char __pyx_k_vector_vector_int[] = "vector<vector<int> >";
static char __pyx_k_No_converter_for_s[] = "No converter for %s";
static char __pyx_k_cannot_open_file_s[] = "cannot open file %s";
static char __pyx_k_extern_ordereddict[] = "extern.ordereddict";
static char __pyx_k_unsigned_long_long[] = "unsigned long long";
static char __pyx_k_vector_vector_char[] = "vector<vector<char> >";
static char __pyx_k_vector_vector_long[] = "vector<vector<long> >";
static char __pyx_k_root2array_fromCObj[] = "root2array_fromCObj";
static char __pyx_k_vector_unsigned_int[] = "vector<unsigned int>";
static char __pyx_k_vector_vector_float[] = "vector<vector<float> >";
static char __pyx_k_vector_vector_short[] = "vector<vector<short> >";
static char __pyx_k_root2array_fromFname[] = "root2array_fromFname";
static char __pyx_k_vector_unsigned_char[] = "vector<unsigned char>";
static char __pyx_k_vector_unsigned_long[] = "vector<unsigned long>";
static char __pyx_k_vector_vector_double[] = "vector<vector<double> >";
static char __pyx_k_tree_s_not_found_in_s[] = "tree %s not found in %s";
static char __pyx_k_vector_unsigned_short[] = "vector<unsigned short>";
static char __pyx_k_branch_s_has_no_leaves[] = "branch %s has no leaves";
static char __pyx_k_file_s_is_not_writable[] = "file %s is not writable";
static char __pyx_k_multiple_trees_found_s[] = "multiple trees found: %s";
static char __pyx_k_tree_must_be_PyCObject[] = "tree must be PyCObject";
static char __pyx_k_unable_to_get_keys_in_s[] = "unable to get keys in %s";
static char __pyx_k_vector_vector_long_long[] = "vector<vector<long long> >";
static char __pyx_k_cannot_open_current_file[] = "cannot open current file";
static char __pyx_k_vector_unsigned_long_long[] = "vector<unsigned long long>";
static char __pyx_k_vector_vector_unsigned_int[] = "vector<vector<unsigned int> >";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_vector_vector_unsigned_char[] = "vector<vector<unsigned char> >";
static char __pyx_k_vector_vector_unsigned_long[] = "vector<vector<unsigned long> >";
static char __pyx_k_blockwise_inner_join_line_11[] = "blockwise_inner_join (line 11)";
static char __pyx_k_duplicate_branches_requested[] = "duplicate branches requested";
static char __pyx_k_read_failure_in_current_tree[] = "read failure in current tree";
static char __pyx_k_the_chain_is_not_initialized[] = "the chain is not initialized";
static char __pyx_k_unable_to_access_tree_0_in_1[] = "unable to access tree '{0}' in {1}";
static char __pyx_k_vector_vector_unsigned_short[] = "vector<vector<unsigned short> >";
static char __pyx_k_RootNumpyUnconvertibleWarning[] = "RootNumpyUnconvertibleWarning";
static char __pyx_k_perform_a_blockwise_inner_join[] = "\n    perform a blockwise inner join from names specified in left to right via \n    foreign_key left->foreign_key->right.\n    \n    Parameters\n    ----------\n    \n    data : array\n        full data set\n\n    left : array\n        array of left side column names\n\n    foreign_key : array or string\n        numpy array or string foreign_key column name\n        This column can be either integer or array of int.\n        if foreign_key is array of int column, left column will \n        be treated according to left column type:\n\n        - Scalar columns or columns in force_repeat will be repeated\n\n        - Array columns not in force_repeat will be assumed to the\n          same length as foreign_key and will be strecthed by index \n\n    right : array\n        array of right side column names\n        These are array columns that each index foreign_key points to.\n        These columns are assumed to have the same length.\n\n    force_repeat : array\n        array of left column names that \n        will be force to stretch even if it's an array(useful when\n        you want to emulate multiple join)\n    \n    Examples\n    --------\n\n        >>> test_data = np.array([\n        (1.0, np.array([11,12,13]), np.array([1,0,1]), 0, np.array([1,2,3])),\n        (2.0, np.array([21,22,23]), np.array([-1,2,-1]), 1, np.array([31,32,33]))],\n        dtype=[('sl', np.float), ('al', 'O'), ('fk', 'O'), ('s_fk', np.int), ('ar', 'O')])\n        >>> blockwise_inner_join(test_data, ['sl', 'al'], test_data['fk'], ['ar'] )\n        array([(1.0, 11, 2, 1), (1.0, 12, 1, 0), (1.0, 13, 2, 1), (2.0, 22, 33, 2)], \n        dtype=[('sl', '<f8'), ('al', '<i8'), ('ar', '<i8'), ('fk', '<i8')])\n        >>> blockwise_inner_join(test_data, ['sl','al'], test_data['fk'], ['ar'], force_repeat=['al'])\n        array([(1.0, [11, 12, 13], 2, 1), (1.0, [11, 12, 13], 1, 0),\n        (1.0, [11, 12, 13], 2, 1), (2.0, [21, 22, 23], 33, 2)], \n        dtype=[('sl', '<f8'), ('al', '|O8'), ('ar', '<i""8'), ('fk', '<i8')])\n\n    ";
static char __pyx_k_Converter_for_r_not_implemented[] = "Converter for %r not implemented yet (skipping)";
static char __pyx_k_Users_kratsg_root_numpy_dev_roo[] = "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx";
static char __pyx_k_cannot_convert_leaf_s_of_branch[] = "cannot convert leaf %s of branch %s with type %s (skipping)";
static char __pyx_k_leaf_list_for_branch_s_is_empty[] = "leaf list for branch %s is empty";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_The_branch_or_expression_s_is_no[] = "The branch or expression %s is not present or valid. Call list_branches or appropriate ROOT methods to see a list of available branches";
static char __pyx_k_cannot_access_tree_in_current_fi[] = "cannot access tree in current file";
static char __pyx_k_could_not_compile_selection_form[] = "could not compile selection formula";
static char __pyx_k_field_s_of_type_s_is_not_compati[] = "field `%s` of type `%s` is not compatible with existing branch of type `%s`";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_tree_index_in_chain_is_out_of_bo[] = "tree index in chain is out of bounds";
static char __pyx_k_vector_vector_unsigned_long_long[] = "vector<vector<unsigned long long> >";
static char __pyx_k_Users_kratsg_root_numpy_dev_roo_2[] = "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx";
static char __pyx_k_Users_kratsg_root_numpy_dev_roo_3[] = "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx";
static char __pyx_k_Users_kratsg_root_numpy_dev_roo_4[] = "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx";
static char __pyx_k_Users_kratsg_root_numpy_dev_roo_5[] = "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx";
static char __pyx_k_Users_kratsg_root_numpy_dev_roo_6[] = "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_kp_s_Converter_for_r_not_implemented;
static PyObject *__pyx_n_s_D;
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_I;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_No_converter_for_s;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_O;
static PyObject *__pyx_n_s_OrderedDict;
static PyObject *__pyx_n_s_RootNumpyUnconvertibleWarning;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_S;
static PyObject *__pyx_n_s_TTree;
static PyObject *__pyx_n_s_TYPES;
static PyObject *__pyx_n_s_TYPES_NUMPY2ROOT;
static PyObject *__pyx_kp_s_The_branch_or_expression_s_is_no;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Users_kratsg_root_numpy_dev_roo;
static PyObject *__pyx_kp_s_Users_kratsg_root_numpy_dev_roo_2;
static PyObject *__pyx_kp_s_Users_kratsg_root_numpy_dev_roo_3;
static PyObject *__pyx_kp_s_Users_kratsg_root_numpy_dev_roo_4;
static PyObject *__pyx_kp_s_Users_kratsg_root_numpy_dev_roo_5;
static PyObject *__pyx_kp_s_Users_kratsg_root_numpy_dev_roo_6;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__13;
static PyObject *__pyx_n_s_arr;
static PyObject *__pyx_n_s_arr_2;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_array2root;
static PyObject *__pyx_n_s_array2tree_toCObj;
static PyObject *__pyx_n_s_array_c;
static PyObject *__pyx_n_s_array_d;
static PyObject *__pyx_n_s_array_f;
static PyObject *__pyx_n_s_array_i;
static PyObject *__pyx_n_s_array_l;
static PyObject *__pyx_n_s_array_s;
static PyObject *__pyx_n_s_atexit;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_bin_idx;
static PyObject *__pyx_kp_u_blockwise_inner_join_line_11;
static PyObject *__pyx_n_s_bool;
static PyObject *__pyx_kp_s_branch_s_has_no_leaves;
static PyObject *__pyx_n_s_branches;
static PyObject *__pyx_kp_s_cannot_access_tree_in_current_fi;
static PyObject *__pyx_kp_s_cannot_convert_leaf_s_of_branch;
static PyObject *__pyx_kp_s_cannot_open_current_file;
static PyObject *__pyx_kp_s_cannot_open_file_s;
static PyObject *__pyx_kp_s_cannot_read_s;
static PyObject *__pyx_n_s_chain;
static PyObject *__pyx_kp_s_chain_is_empty;
static PyObject *__pyx_n_s_char;
static PyObject *__pyx_n_s_cleanup;
static PyObject *__pyx_n_s_clname;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_kp_s_could_not_compile_selection_form;
static PyObject *__pyx_n_s_count_nonzero;
static PyObject *__pyx_n_s_ctype;
static PyObject *__pyx_n_s_ctypename;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtypecode;
static PyObject *__pyx_kp_s_duplicate_branches_requested;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_extern_ordereddict;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_f1;
static PyObject *__pyx_n_s_f1_2;
static PyObject *__pyx_n_s_f2;
static PyObject *__pyx_n_s_f2_2;
static PyObject *__pyx_n_s_f3;
static PyObject *__pyx_n_s_f3_2;
static PyObject *__pyx_kp_s_field_s_of_type_s_is_not_compati;
static PyObject *__pyx_n_s_fields;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_kp_s_file_s_is_not_writable;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_fill_g1;
static PyObject *__pyx_n_s_fill_g2;
static PyObject *__pyx_n_s_fill_h1;
static PyObject *__pyx_n_s_fill_h2;
static PyObject *__pyx_n_s_fill_h3;
static PyObject *__pyx_kp_s_fixed;
static PyObject *__pyx_kp_s_fk_d;
static PyObject *__pyx_n_s_fk_name;
static PyObject *__pyx_n_s_flatnonzero;
static PyObject *__pyx_n_s_float;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_fn;
static PyObject *__pyx_n_s_fname;
static PyObject *__pyx_n_s_fnames;
static PyObject *__pyx_n_s_force_repeat;
static PyObject *__pyx_n_s_foreign_key;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_graph;
static PyObject *__pyx_n_s_graph_2;
static PyObject *__pyx_n_s_h1;
static PyObject *__pyx_n_s_h1_2;
static PyObject *__pyx_n_s_h2;
static PyObject *__pyx_n_s_h2_2;
static PyObject *__pyx_n_s_h3;
static PyObject *__pyx_n_s_h3_2;
static PyObject *__pyx_n_s_hist;
static PyObject *__pyx_n_s_hist_2;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_include_weight;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_s_int16;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int64;
static PyObject *__pyx_n_s_int8;
static PyObject *__pyx_n_s_intree;
static PyObject *__pyx_n_s_it;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_kp_s_leaf_list_for_branch_s_is_empty;
static PyObject *__pyx_n_s_left;
static PyObject *__pyx_n_s_librootnumpy;
static PyObject *__pyx_n_s_list_branches;
static PyObject *__pyx_n_s_list_structures;
static PyObject *__pyx_n_s_list_trees;
static PyObject *__pyx_n_s_long;
static PyObject *__pyx_kp_s_long_long;
static PyObject *__pyx_n_s_longlong;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_mat;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_n_s_matrix_d;
static PyObject *__pyx_n_s_matrix_f;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_kp_s_multiple_trees_found_s;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_n_samples;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_names;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_outtree;
static PyObject *__pyx_kp_u_perform_a_blockwise_inner_join;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_releasebuffer;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_kp_s_read_failure_in_current_tree;
static PyObject *__pyx_n_s_register;
static PyObject *__pyx_n_s_resize;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_n_s_return_indices;
static PyObject *__pyx_n_s_right;
static PyObject *__pyx_n_s_root2array_fromCObj;
static PyObject *__pyx_n_s_root2array_fromFname;
static PyObject *__pyx_n_s_root_arr;
static PyObject *__pyx_n_s_root_mat;
static PyObject *__pyx_n_s_rpartition;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_kp_s_s__s;
static PyObject *__pyx_n_s_sample_f1;
static PyObject *__pyx_n_s_sample_f2;
static PyObject *__pyx_n_s_sample_f3;
static PyObject *__pyx_n_s_sample_h1;
static PyObject *__pyx_n_s_sample_h2;
static PyObject *__pyx_n_s_sample_h3;
static PyObject *__pyx_n_s_selection;
static PyObject *__pyx_n_s_short;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_string;
static PyObject *__pyx_n_s_string_2;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_the_chain_is_not_initialized;
static PyObject *__pyx_n_s_tree;
static PyObject *__pyx_kp_s_tree_index_in_chain_is_out_of_bo;
static PyObject *__pyx_kp_s_tree_must_be_PyCObject;
static PyObject *__pyx_kp_s_tree_s_not_found_in_s;
static PyObject *__pyx_n_s_treename;
static PyObject *__pyx_n_s_ttree;
static PyObject *__pyx_n_s_uint16;
static PyObject *__pyx_n_s_uint32;
static PyObject *__pyx_n_s_uint64;
static PyObject *__pyx_n_s_uint8;
static PyObject *__pyx_n_s_ulonglong;
static PyObject *__pyx_kp_s_unable_to_access_tree_0_in_1;
static PyObject *__pyx_kp_s_unable_to_get_keys_in_s;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_kp_s_unsigned_char;
static PyObject *__pyx_kp_s_unsigned_int;
static PyObject *__pyx_kp_s_unsigned_long;
static PyObject *__pyx_kp_s_unsigned_long_long;
static PyObject *__pyx_kp_s_unsigned_short;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_kp_s_vary;
static PyObject *__pyx_kp_b_vector_bool;
static PyObject *__pyx_kp_b_vector_char;
static PyObject *__pyx_kp_b_vector_double;
static PyObject *__pyx_kp_b_vector_float;
static PyObject *__pyx_kp_b_vector_int;
static PyObject *__pyx_kp_b_vector_long;
static PyObject *__pyx_kp_b_vector_long_long;
static PyObject *__pyx_kp_b_vector_short;
static PyObject *__pyx_kp_b_vector_unsigned_char;
static PyObject *__pyx_kp_b_vector_unsigned_int;
static PyObject *__pyx_kp_b_vector_unsigned_long;
static PyObject *__pyx_kp_b_vector_unsigned_long_long;
static PyObject *__pyx_kp_b_vector_unsigned_short;
static PyObject *__pyx_kp_b_vector_vector_char;
static PyObject *__pyx_kp_b_vector_vector_double;
static PyObject *__pyx_kp_b_vector_vector_float;
static PyObject *__pyx_kp_b_vector_vector_int;
static PyObject *__pyx_kp_b_vector_vector_long;
static PyObject *__pyx_kp_b_vector_vector_long_long;
static PyObject *__pyx_kp_b_vector_vector_short;
static PyObject *__pyx_kp_b_vector_vector_unsigned_char;
static PyObject *__pyx_kp_b_vector_vector_unsigned_int;
static PyObject *__pyx_kp_b_vector_vector_unsigned_long;
static PyObject *__pyx_kp_b_vector_vector_unsigned_long_long;
static PyObject *__pyx_kp_b_vector_vector_unsigned_short;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_warnings_2;
static PyObject *__pyx_n_s_weight_name;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_8;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":38
 * 
 * 
 * def list_trees(fname):             # <<<<<<<<<<<<<<
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_1list_trees(PyObject *__pyx_self, PyObject *__pyx_v_fname); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_1list_trees = {__Pyx_NAMESTR("list_trees"), (PyCFunction)__pyx_pw_13_librootnumpy_1list_trees, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_1list_trees(PyObject *__pyx_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_trees (wrapper)", 0);
  __pyx_r = __pyx_pf_13_librootnumpy_list_trees(__pyx_self, ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_list_trees(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname) {
  TFile *__pyx_v_f;
  TList *__pyx_v_keys;
  PyObject *__pyx_v_ret = NULL;
  int __pyx_v_n;
  TObject *__pyx_v_obj;
  int __pyx_v_i;
  const char *__pyx_v_name;
  PyObject *__pyx_v_clname = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_trees", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":39
 * 
 * def list_trees(fname):
 *     cdef TFile* f = Open(fname, 'read')             # <<<<<<<<<<<<<<
 *     if f is NULL:
 *         raise IOError("cannot read %s" % fname)
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_fname); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_f = TFile::Open(__pyx_t_1, __pyx_k_read);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":40
 * def list_trees(fname):
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot read %s" % fname)
 * 
 */
  __pyx_t_2 = ((__pyx_v_f == NULL) != 0);
  if (__pyx_t_2) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":41
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 *         raise IOError("cannot read %s" % fname)             # <<<<<<<<<<<<<<
 * 
 *     cdef TList* keys = f.GetListOfKeys()
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_cannot_read_s, __pyx_v_fname); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":43
 *         raise IOError("cannot read %s" % fname)
 * 
 *     cdef TList* keys = f.GetListOfKeys()             # <<<<<<<<<<<<<<
 *     if keys is NULL:
 *         raise IOError("unable to get keys in %s" % fname)
 */
  __pyx_v_keys = __pyx_v_f->GetListOfKeys();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":44
 * 
 *     cdef TList* keys = f.GetListOfKeys()
 *     if keys is NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("unable to get keys in %s" % fname)
 * 
 */
  __pyx_t_2 = ((__pyx_v_keys == NULL) != 0);
  if (__pyx_t_2) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":45
 *     cdef TList* keys = f.GetListOfKeys()
 *     if keys is NULL:
 *         raise IOError("unable to get keys in %s" % fname)             # <<<<<<<<<<<<<<
 * 
 *     ret = []
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_unable_to_get_keys_in_s, __pyx_v_fname); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":47
 *         raise IOError("unable to get keys in %s" % fname)
 * 
 *     ret = []             # <<<<<<<<<<<<<<
 *     cdef int n = keys.GetEntries()
 *     cdef TObject* obj
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_ret = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":48
 * 
 *     ret = []
 *     cdef int n = keys.GetEntries()             # <<<<<<<<<<<<<<
 *     cdef TObject* obj
 *     for i in range(n):
 */
  __pyx_v_n = __pyx_v_keys->GetEntries();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":50
 *     cdef int n = keys.GetEntries()
 *     cdef TObject* obj
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         name = keys.At(i).GetName()
 *         obj = f.Get(name)
 */
  __pyx_t_5 = __pyx_v_n;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":51
 *     cdef TObject* obj
 *     for i in range(n):
 *         name = keys.At(i).GetName()             # <<<<<<<<<<<<<<
 *         obj = f.Get(name)
 *         if obj is not NULL:
 */
    __pyx_v_name = __pyx_v_keys->At(__pyx_v_i)->GetName();

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":52
 *     for i in range(n):
 *         name = keys.At(i).GetName()
 *         obj = f.Get(name)             # <<<<<<<<<<<<<<
 *         if obj is not NULL:
 *             clname = str(obj.ClassName())
 */
    __pyx_v_obj = __pyx_v_f->Get(__pyx_v_name);

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":53
 *         name = keys.At(i).GetName()
 *         obj = f.Get(name)
 *         if obj is not NULL:             # <<<<<<<<<<<<<<
 *             clname = str(obj.ClassName())
 *             if  clname == 'TTree':
 */
    __pyx_t_2 = ((__pyx_v_obj != NULL) != 0);
    if (__pyx_t_2) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":54
 *         obj = f.Get(name)
 *         if obj is not NULL:
 *             clname = str(obj.ClassName())             # <<<<<<<<<<<<<<
 *             if  clname == 'TTree':
 *                 ret.append(name)
 */
      __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_obj->ClassName()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_clname, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":55
 *         if obj is not NULL:
 *             clname = str(obj.ClassName())
 *             if  clname == 'TTree':             # <<<<<<<<<<<<<<
 *                 ret.append(name)
 *     return ret
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_clname, __pyx_n_s_TTree, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_2) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":56
 *             clname = str(obj.ClassName())
 *             if  clname == 'TTree':
 *                 ret.append(name)             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
        __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, __pyx_t_3); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L8;
      }
      __pyx_L8:;
      goto __pyx_L7;
    }
    __pyx_L7:;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":57
 *             if  clname == 'TTree':
 *                 ret.append(name)
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":38
 * 
 * 
 * def list_trees(fname):             # <<<<<<<<<<<<<<
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_librootnumpy.list_trees", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_clname);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":60
 * 
 * 
 * def list_structures(fname, tree=None):             # <<<<<<<<<<<<<<
 *     if tree is None:
 *         # automatically select single tree
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_3list_structures(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_3list_structures = {__Pyx_NAMESTR("list_structures"), (PyCFunction)__pyx_pw_13_librootnumpy_3list_structures, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_3list_structures(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fname = 0;
  PyObject *__pyx_v_tree = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_structures (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fname,&__pyx_n_s_tree,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "list_structures") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fname = values[0];
    __pyx_v_tree = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list_structures", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.list_structures", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_2list_structures(__pyx_self, __pyx_v_fname, __pyx_v_tree);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_2list_structures(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_tree) {
  TFile *__pyx_v_f;
  TTree *__pyx_v_t;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  const char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_structures", 0);
  __Pyx_INCREF(__pyx_v_tree);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":61
 * 
 * def list_structures(fname, tree=None):
 *     if tree is None:             # <<<<<<<<<<<<<<
 *         # automatically select single tree
 *         tree = list_trees(fname)
 */
  __pyx_t_1 = (__pyx_v_tree == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":63
 *     if tree is None:
 *         # automatically select single tree
 *         tree = list_trees(fname)             # <<<<<<<<<<<<<<
 *         if len(tree) != 1:
 *             raise ValueError("multiple trees found: %s" % (', '.join(tree)))
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_list_trees); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_fname);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_fname);
    __Pyx_GIVEREF(__pyx_v_fname);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":64
 *         # automatically select single tree
 *         tree = list_trees(fname)
 *         if len(tree) != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("multiple trees found: %s" % (', '.join(tree)))
 *         else:
 */
    __pyx_t_6 = PyObject_Length(__pyx_v_tree); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_6 != 1) != 0);
    if (__pyx_t_2) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":65
 *         tree = list_trees(fname)
 *         if len(tree) != 1:
 *             raise ValueError("multiple trees found: %s" % (', '.join(tree)))             # <<<<<<<<<<<<<<
 *         else:
 *             tree = tree[0]
 */
      __pyx_t_5 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_v_tree); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_multiple_trees_found_s, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    /*else*/ {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":67
 *             raise ValueError("multiple trees found: %s" % (', '.join(tree)))
 *         else:
 *             tree = tree[0]             # <<<<<<<<<<<<<<
 * 
 *     cdef TFile* f = Open(fname, 'read')
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_tree, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_4);
      __pyx_t_4 = 0;
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":69
 *             tree = tree[0]
 * 
 *     cdef TFile* f = Open(fname, 'read')             # <<<<<<<<<<<<<<
 *     if f is NULL:
 *         raise IOError("cannot read %s" % fname)
 */
  __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_fname); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_f = TFile::Open(__pyx_t_7, __pyx_k_read);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":70
 * 
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot read %s" % fname)
 * 
 */
  __pyx_t_2 = ((__pyx_v_f == NULL) != 0);
  if (__pyx_t_2) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":71
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 *         raise IOError("cannot read %s" % fname)             # <<<<<<<<<<<<<<
 * 
 *     cdef TTree* t = <TTree*> f.Get(tree)
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_cannot_read_s, __pyx_v_fname); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":73
 *         raise IOError("cannot read %s" % fname)
 * 
 *     cdef TTree* t = <TTree*> f.Get(tree)             # <<<<<<<<<<<<<<
 *     if t is NULL:
 *         raise IOError("tree %s not found in %s" % (tree, fname))
 */
  __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_tree); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_t = ((TTree *)__pyx_v_f->Get(__pyx_t_7));

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":74
 * 
 *     cdef TTree* t = <TTree*> f.Get(tree)
 *     if t is NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("tree %s not found in %s" % (tree, fname))
 * 
 */
  __pyx_t_2 = ((__pyx_v_t == NULL) != 0);
  if (__pyx_t_2) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":75
 *     cdef TTree* t = <TTree*> f.Get(tree)
 *     if t is NULL:
 *         raise IOError("tree %s not found in %s" % (tree, fname))             # <<<<<<<<<<<<<<
 * 
 *     return parse_tree_structure(t)
 */
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_tree);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_tree);
    __Pyx_GIVEREF(__pyx_v_tree);
    __Pyx_INCREF(__pyx_v_fname);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_fname);
    __Pyx_GIVEREF(__pyx_v_fname);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_tree_s_not_found_in_s, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":77
 *         raise IOError("tree %s not found in %s" % (tree, fname))
 * 
 *     return parse_tree_structure(t)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_f_13_librootnumpy_parse_tree_structure(__pyx_v_t); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":60
 * 
 * 
 * def list_structures(fname, tree=None):             # <<<<<<<<<<<<<<
 *     if tree is None:
 *         # automatically select single tree
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_librootnumpy.list_structures", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tree);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":80
 * 
 * 
 * def list_branches(fname, tree=None):             # <<<<<<<<<<<<<<
 *     return list_structures(fname, tree).keys()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_5list_branches(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_5list_branches = {__Pyx_NAMESTR("list_branches"), (PyCFunction)__pyx_pw_13_librootnumpy_5list_branches, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_5list_branches(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fname = 0;
  PyObject *__pyx_v_tree = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_branches (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fname,&__pyx_n_s_tree,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "list_branches") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fname = values[0];
    __pyx_v_tree = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list_branches", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.list_branches", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_4list_branches(__pyx_self, __pyx_v_fname, __pyx_v_tree);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_4list_branches(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_tree) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_branches", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":81
 * 
 * def list_branches(fname, tree=None):
 *     return list_structures(fname, tree).keys()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_list_structures); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_fname);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_fname);
  __Pyx_GIVEREF(__pyx_v_fname);
  __Pyx_INCREF(__pyx_v_tree);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_tree);
  __Pyx_GIVEREF(__pyx_v_tree);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":80
 * 
 * 
 * def list_branches(fname, tree=None):             # <<<<<<<<<<<<<<
 *     return list_structures(fname, tree).keys()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_librootnumpy.list_branches", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":84
 * 
 * 
 * cdef parse_tree_structure(TTree* tree):             # <<<<<<<<<<<<<<
 *     cdef char* name
 *     cdef TBranch* thisBranch
 */

static PyObject *__pyx_f_13_librootnumpy_parse_tree_structure(TTree *__pyx_v_tree) {
  TBranch *__pyx_v_thisBranch;
  TLeaf *__pyx_v_thisLeaf;
  TObjArray *__pyx_v_branches;
  TObjArray *__pyx_v_leaves;
  PyObject *__pyx_v_ret = NULL;
  int __pyx_v_ibranch;
  PyObject *__pyx_v_leaflist = NULL;
  const char *__pyx_v_lname;
  PyObject *__pyx_v_ltype = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse_tree_structure", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":88
 *     cdef TBranch* thisBranch
 *     cdef TLeaf* thisLeaf
 *     cdef TObjArray* branches = tree.GetListOfBranches()             # <<<<<<<<<<<<<<
 *     cdef TObjArray* leaves
 *     ret = OrderedDict()
 */
  __pyx_v_branches = __pyx_v_tree->GetListOfBranches();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":90
 *     cdef TObjArray* branches = tree.GetListOfBranches()
 *     cdef TObjArray* leaves
 *     ret = OrderedDict()             # <<<<<<<<<<<<<<
 *     if branches is NULL:
 *         return ret
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ret = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":91
 *     cdef TObjArray* leaves
 *     ret = OrderedDict()
 *     if branches is NULL:             # <<<<<<<<<<<<<<
 *         return ret
 *     for ibranch in range(branches.GetEntries()):
 */
  __pyx_t_3 = ((__pyx_v_branches == NULL) != 0);
  if (__pyx_t_3) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":92
 *     ret = OrderedDict()
 *     if branches is NULL:
 *         return ret             # <<<<<<<<<<<<<<
 *     for ibranch in range(branches.GetEntries()):
 *         thisBranch = <TBranch*>(branches.At(ibranch))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_ret);
    __pyx_r = __pyx_v_ret;
    goto __pyx_L0;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":93
 *     if branches is NULL:
 *         return ret
 *     for ibranch in range(branches.GetEntries()):             # <<<<<<<<<<<<<<
 *         thisBranch = <TBranch*>(branches.At(ibranch))
 *         leaves = thisBranch.GetListOfLeaves()
 */
  __pyx_t_4 = __pyx_v_branches->GetEntries();
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_ibranch = __pyx_t_5;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":94
 *         return ret
 *     for ibranch in range(branches.GetEntries()):
 *         thisBranch = <TBranch*>(branches.At(ibranch))             # <<<<<<<<<<<<<<
 *         leaves = thisBranch.GetListOfLeaves()
 *         if leaves is NULL:
 */
    __pyx_v_thisBranch = ((TBranch *)__pyx_v_branches->At(__pyx_v_ibranch));

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":95
 *     for ibranch in range(branches.GetEntries()):
 *         thisBranch = <TBranch*>(branches.At(ibranch))
 *         leaves = thisBranch.GetListOfLeaves()             # <<<<<<<<<<<<<<
 *         if leaves is NULL:
 *             raise RuntimeError("branch %s has no leaves" % thisBranch.GetName())
 */
    __pyx_v_leaves = __pyx_v_thisBranch->GetListOfLeaves();

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":96
 *         thisBranch = <TBranch*>(branches.At(ibranch))
 *         leaves = thisBranch.GetListOfLeaves()
 *         if leaves is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("branch %s has no leaves" % thisBranch.GetName())
 *         leaflist = []
 */
    __pyx_t_3 = ((__pyx_v_leaves == NULL) != 0);
    if (__pyx_t_3) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":97
 *         leaves = thisBranch.GetListOfLeaves()
 *         if leaves is NULL:
 *             raise RuntimeError("branch %s has no leaves" % thisBranch.GetName())             # <<<<<<<<<<<<<<
 *         leaflist = []
 *         for ibranch in range(leaves.GetEntries()):
 */
      __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_thisBranch->GetName()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_branch_s_has_no_leaves, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":98
 *         if leaves is NULL:
 *             raise RuntimeError("branch %s has no leaves" % thisBranch.GetName())
 *         leaflist = []             # <<<<<<<<<<<<<<
 *         for ibranch in range(leaves.GetEntries()):
 *             thisLeaf = <TLeaf*>leaves.At(ibranch)
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_leaflist, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":99
 *             raise RuntimeError("branch %s has no leaves" % thisBranch.GetName())
 *         leaflist = []
 *         for ibranch in range(leaves.GetEntries()):             # <<<<<<<<<<<<<<
 *             thisLeaf = <TLeaf*>leaves.At(ibranch)
 *             lname = thisLeaf.GetName()
 */
    __pyx_t_6 = __pyx_v_leaves->GetEntries();
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_ibranch = __pyx_t_7;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":100
 *         leaflist = []
 *         for ibranch in range(leaves.GetEntries()):
 *             thisLeaf = <TLeaf*>leaves.At(ibranch)             # <<<<<<<<<<<<<<
 *             lname = thisLeaf.GetName()
 *             # resolve Float_t -> float, vector<Float_t> -> vector<float>, ..
 */
      __pyx_v_thisLeaf = ((TLeaf *)__pyx_v_leaves->At(__pyx_v_ibranch));

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":101
 *         for ibranch in range(leaves.GetEntries()):
 *             thisLeaf = <TLeaf*>leaves.At(ibranch)
 *             lname = thisLeaf.GetName()             # <<<<<<<<<<<<<<
 *             # resolve Float_t -> float, vector<Float_t> -> vector<float>, ..
 *             ltype = <bytes>ResolveTypedef(thisLeaf.GetTypeName(), True).c_str()
 */
      __pyx_v_lname = __pyx_v_thisLeaf->GetName();

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":103
 *             lname = thisLeaf.GetName()
 *             # resolve Float_t -> float, vector<Float_t> -> vector<float>, ..
 *             ltype = <bytes>ResolveTypedef(thisLeaf.GetTypeName(), True).c_str()             # <<<<<<<<<<<<<<
 *             leaflist.append((lname, ltype))
 *         if not leaflist:
 */
      __pyx_t_1 = __Pyx_PyBytes_FromString(TClassEdit::ResolveTypedef(__pyx_v_thisLeaf->GetTypeName(), 1).c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_t_1;
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ltype, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":104
 *             # resolve Float_t -> float, vector<Float_t> -> vector<float>, ..
 *             ltype = <bytes>ResolveTypedef(thisLeaf.GetTypeName(), True).c_str()
 *             leaflist.append((lname, ltype))             # <<<<<<<<<<<<<<
 *         if not leaflist:
 *             raise RuntimeError(
 */
      __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_lname); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_ltype);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_ltype);
      __Pyx_GIVEREF(__pyx_v_ltype);
      __pyx_t_2 = 0;
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_leaflist, __pyx_t_1); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":105
 *             ltype = <bytes>ResolveTypedef(thisLeaf.GetTypeName(), True).c_str()
 *             leaflist.append((lname, ltype))
 *         if not leaflist:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "leaf list for branch %s is empty" %
 */
    __pyx_t_3 = (__pyx_v_leaflist != Py_None) && (PyList_GET_SIZE(__pyx_v_leaflist) != 0);
    __pyx_t_9 = ((!__pyx_t_3) != 0);
    if (__pyx_t_9) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":108
 *             raise RuntimeError(
 *                 "leaf list for branch %s is empty" %
 *                     thisBranch.GetName())             # <<<<<<<<<<<<<<
 *         ret[thisBranch.GetName()] = leaflist
 *     return ret
 */
      __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_thisBranch->GetName()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":107
 *         if not leaflist:
 *             raise RuntimeError(
 *                 "leaf list for branch %s is empty" %             # <<<<<<<<<<<<<<
 *                     thisBranch.GetName())
 *         ret[thisBranch.GetName()] = leaflist
 */
      __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_leaf_list_for_branch_s_is_empty, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":106
 *             leaflist.append((lname, ltype))
 *         if not leaflist:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 "leaf list for branch %s is empty" %
 *                     thisBranch.GetName())
 */
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":109
 *                 "leaf list for branch %s is empty" %
 *                     thisBranch.GetName())
 *         ret[thisBranch.GetName()] = leaflist             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
    __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_thisBranch->GetName()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_ret, __pyx_t_2, __pyx_v_leaflist) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":110
 *                     thisBranch.GetName())
 *         ret[thisBranch.GetName()] = leaflist
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":84
 * 
 * 
 * cdef parse_tree_structure(TTree* tree):             # <<<<<<<<<<<<<<
 *     cdef char* name
 *     cdef TBranch* thisBranch
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_librootnumpy.parse_tree_structure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_leaflist);
  __Pyx_XDECREF(__pyx_v_ltype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":116
 * # given numelement and size of each element
 * # and write it to buffer
 * cdef inline int create_numpyarray(             # <<<<<<<<<<<<<<
 *         void* buffer, void* src, int typecode, unsigned long numele, int elesize):
 *     cdef np.npy_intp dims[1]
 */

static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray(void *__pyx_v_buffer, void *__pyx_v_src, int __pyx_v_typecode, unsigned long __pyx_v_numele, int __pyx_v_elesize) {
  npy_intp __pyx_v_dims[1];
  PyArrayObject *__pyx_v_tmp = 0;
  PyObject *__pyx_v_tmpobj;
  unsigned long __pyx_v_nbytes;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_numpyarray", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":119
 *         void* buffer, void* src, int typecode, unsigned long numele, int elesize):
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;             # <<<<<<<<<<<<<<
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, typecode, 0)
 * 
 */
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":120
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, typecode, 0)             # <<<<<<<<<<<<<<
 * 
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 */
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, __pyx_v_typecode, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_tmp = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":122
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, typecode, 0)
 * 
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref             # <<<<<<<<<<<<<<
 *     # increase one since we are putting in buffer directly
 *     Py_INCREF(tmp)
 */
  __pyx_v_tmpobj = ((PyObject *)__pyx_v_tmp);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":124
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # increase one since we are putting in buffer directly
 *     Py_INCREF(tmp)             # <<<<<<<<<<<<<<
 * 
 *     # copy to tmp.data
 */
  Py_INCREF(((PyObject *)__pyx_v_tmp));

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":127
 * 
 *     # copy to tmp.data
 *     cdef unsigned long nbytes = numele * elesize             # <<<<<<<<<<<<<<
 *     memcpy(tmp.data, src, nbytes)
 * 
 */
  __pyx_v_nbytes = (__pyx_v_numele * __pyx_v_elesize);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":128
 *     # copy to tmp.data
 *     cdef unsigned long nbytes = numele * elesize
 *     memcpy(tmp.data, src, nbytes)             # <<<<<<<<<<<<<<
 * 
 *     # now write PyObject* to buffer
 */
  memcpy(__pyx_v_tmp->data, __pyx_v_src, __pyx_v_nbytes);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":131
 * 
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 * 
 *     return sizeof(tmpobj)
 */
  memcpy(__pyx_v_buffer, (&__pyx_v_tmpobj), (sizeof(PyObject *)));

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":133
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 * 
 *     return sizeof(tmpobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (sizeof(__pyx_v_tmpobj));
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":116
 * # given numelement and size of each element
 * # and write it to buffer
 * cdef inline int create_numpyarray(             # <<<<<<<<<<<<<<
 *         void* buffer, void* src, int typecode, unsigned long numele, int elesize):
 *     cdef np.npy_intp dims[1]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("_librootnumpy.create_numpyarray", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":137
 * 
 * # special treatment for vector<bool>
 * cdef inline int create_numpyarray_vectorbool(void* buffer, vector[bool]* src):             # <<<<<<<<<<<<<<
 *     cdef unsigned long numele = src.size()
 *     cdef np.npy_intp dims[1]
 */

static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray_vectorbool(void *__pyx_v_buffer, std::vector<bool> *__pyx_v_src) {
  unsigned long __pyx_v_numele;
  npy_intp __pyx_v_dims[1];
  PyArrayObject *__pyx_v_tmp = 0;
  PyObject *__pyx_v_tmpobj;
  unsigned long __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned long __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_numpyarray_vectorbool", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":138
 * # special treatment for vector<bool>
 * cdef inline int create_numpyarray_vectorbool(void* buffer, vector[bool]* src):
 *     cdef unsigned long numele = src.size()             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;
 */
  __pyx_v_numele = __pyx_v_src->size();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":140
 *     cdef unsigned long numele = src.size()
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;             # <<<<<<<<<<<<<<
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_BOOL, 0)
 * 
 */
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":141
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_BOOL, 0)             # <<<<<<<<<<<<<<
 * 
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 */
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, NPY_BOOL, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_tmp = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":143
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_BOOL, 0)
 * 
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref             # <<<<<<<<<<<<<<
 *     # increase one since we are putting in buffer directly
 *     Py_INCREF(tmp)
 */
  __pyx_v_tmpobj = ((PyObject *)__pyx_v_tmp);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":145
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # increase one since we are putting in buffer directly
 *     Py_INCREF(tmp)             # <<<<<<<<<<<<<<
 * 
 *     # can't use memcpy here...
 */
  Py_INCREF(((PyObject *)__pyx_v_tmp));

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":149
 *     # can't use memcpy here...
 *     cdef unsigned long i
 *     for i from 0 <= i < numele:             # <<<<<<<<<<<<<<
 *         tmp[i] = src.at(i)
 * 
 */
  __pyx_t_2 = __pyx_v_numele;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_2; __pyx_v_i++) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":150
 *     cdef unsigned long i
 *     for i from 0 <= i < numele:
 *         tmp[i] = src.at(i)             # <<<<<<<<<<<<<<
 * 
 *     # now write PyObject* to buffer
 */
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_src->at(__pyx_v_i)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_tmp), __pyx_v_i, __pyx_t_1, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 1) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":153
 * 
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 * 
 *     return sizeof(tmpobj)
 */
  memcpy(__pyx_v_buffer, (&__pyx_v_tmpobj), (sizeof(PyObject *)));

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":155
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 * 
 *     return sizeof(tmpobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (sizeof(__pyx_v_tmpobj));
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":137
 * 
 * # special treatment for vector<bool>
 * cdef inline int create_numpyarray_vectorbool(void* buffer, vector[bool]* src):             # <<<<<<<<<<<<<<
 *     cdef unsigned long numele = src.size()
 *     cdef np.npy_intp dims[1]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("_librootnumpy.create_numpyarray_vectorbool", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":159
 * 
 * cdef cppclass Converter:
 *     __init__():             # <<<<<<<<<<<<<<
 *         pass
 *     __dealloc__():
 */

 __pyx_t_13_librootnumpy_Converter::__pyx_t_13_librootnumpy_Converter(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":161
 *     __init__():
 *         pass
 *     __dealloc__():             # <<<<<<<<<<<<<<
 *         pass
 *     int write(Column* col, void* buffer):
 */

 __pyx_t_13_librootnumpy_Converter::~__pyx_t_13_librootnumpy_Converter(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<del>", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":163
 *     __dealloc__():
 *         pass
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         pass
 *     object get_nptype():
 */

int __pyx_t_13_librootnumpy_Converter::write(CYTHON_UNUSED Column *__pyx_v_col, CYTHON_UNUSED void *__pyx_v_buffer) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":165
 *     int write(Column* col, void* buffer):
 *         pass
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

PyObject *__pyx_t_13_librootnumpy_Converter::get_nptype(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_nptype", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":174
 *     int nptypecode
 *     string nptype
 *     __init__(int size, string nptype, int nptypecode):             # <<<<<<<<<<<<<<
 *         this.size = size
 *         this.nptypecode = nptypecode
 */

 __pyx_t_13_librootnumpy_BasicConverter::__pyx_t_13_librootnumpy_BasicConverter(int __pyx_v_size, std::string __pyx_v_nptype, int __pyx_v_nptypecode) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":175
 *     string nptype
 *     __init__(int size, string nptype, int nptypecode):
 *         this.size = size             # <<<<<<<<<<<<<<
 *         this.nptypecode = nptypecode
 *         this.nptype = nptype
 */
  this->size = __pyx_v_size;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":176
 *     __init__(int size, string nptype, int nptypecode):
 *         this.size = size
 *         this.nptypecode = nptypecode             # <<<<<<<<<<<<<<
 *         this.nptype = nptype
 *     int write(Column* col, void* buffer):
 */
  this->nptypecode = __pyx_v_nptypecode;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":177
 *         this.size = size
 *         this.nptypecode = nptypecode
 *         this.nptype = nptype             # <<<<<<<<<<<<<<
 *     int write(Column* col, void* buffer):
 *         cdef void* src = col.GetValuePointer()
 */
  this->nptype = __pyx_v_nptype;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":174
 *     int nptypecode
 *     string nptype
 *     __init__(int size, string nptype, int nptypecode):             # <<<<<<<<<<<<<<
 *         this.size = size
 *         this.nptypecode = nptypecode
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":178
 *         this.nptypecode = nptypecode
 *         this.nptype = nptype
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef void* src = col.GetValuePointer()
 *         memcpy(buffer, src, this.size)
 */

int __pyx_t_13_librootnumpy_BasicConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  void *__pyx_v_src;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":179
 *         this.nptype = nptype
 *     int write(Column* col, void* buffer):
 *         cdef void* src = col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         memcpy(buffer, src, this.size)
 *         return this.size
 */
  __pyx_v_src = __pyx_v_col->GetValuePointer();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":180
 *     int write(Column* col, void* buffer):
 *         cdef void* src = col.GetValuePointer()
 *         memcpy(buffer, src, this.size)             # <<<<<<<<<<<<<<
 *         return this.size
 *     object get_nptype():
 */
  memcpy(__pyx_v_buffer, __pyx_v_src, this->size);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":181
 *         cdef void* src = col.GetValuePointer()
 *         memcpy(buffer, src, this.size)
 *         return this.size             # <<<<<<<<<<<<<<
 *     object get_nptype():
 *         return np.dtype(this.nptype)
 */
  __pyx_r = this->size;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":178
 *         this.nptypecode = nptypecode
 *         this.nptype = nptype
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef void* src = col.GetValuePointer()
 *         memcpy(buffer, src, this.size)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":182
 *         memcpy(buffer, src, this.size)
 *         return this.size
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.dtype(this.nptype)
 *     int get_nptypecode():
 */

PyObject *__pyx_t_13_librootnumpy_BasicConverter::get_nptype(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_nptype", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":183
 *         return this.size
 *     object get_nptype():
 *         return np.dtype(this.nptype)             # <<<<<<<<<<<<<<
 *     int get_nptypecode():
 *         return this.nptypecode
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_to_py_(this->nptype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":182
 *         memcpy(buffer, src, this.size)
 *         return this.size
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.dtype(this.nptype)
 *     int get_nptypecode():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("BasicConverter.get_nptype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":184
 *     object get_nptype():
 *         return np.dtype(this.nptype)
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.nptypecode
 * 
 */

int __pyx_t_13_librootnumpy_BasicConverter::get_nptypecode(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_nptypecode", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":185
 *         return np.dtype(this.nptype)
 *     int get_nptypecode():
 *         return this.nptypecode             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = this->nptypecode;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":184
 *     object get_nptype():
 *         return np.dtype(this.nptype)
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.nptypecode
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":192
 *     int typecode
 *     int elesize
 *     __init__(BasicConverter* conv):             # <<<<<<<<<<<<<<
 *         this.conv = conv
 *         this.typecode = conv.get_nptypecode()
 */

 __pyx_t_13_librootnumpy_VaryArrayConverter::__pyx_t_13_librootnumpy_VaryArrayConverter(__pyx_t_13_librootnumpy_BasicConverter *__pyx_v_conv) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":193
 *     int elesize
 *     __init__(BasicConverter* conv):
 *         this.conv = conv             # <<<<<<<<<<<<<<
 *         this.typecode = conv.get_nptypecode()
 *         this.elesize = conv.size
 */
  this->conv = __pyx_v_conv;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":194
 *     __init__(BasicConverter* conv):
 *         this.conv = conv
 *         this.typecode = conv.get_nptypecode()             # <<<<<<<<<<<<<<
 *         this.elesize = conv.size
 *     int write(Column* col, void* buffer):
 */
  this->typecode = __pyx_v_conv->get_nptypecode();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":195
 *         this.conv = conv
 *         this.typecode = conv.get_nptypecode()
 *         this.elesize = conv.size             # <<<<<<<<<<<<<<
 *     int write(Column* col, void* buffer):
 *         cdef int numele = col.GetLen()
 */
  __pyx_t_1 = __pyx_v_conv->size;
  this->elesize = __pyx_t_1;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":192
 *     int typecode
 *     int elesize
 *     __init__(BasicConverter* conv):             # <<<<<<<<<<<<<<
 *         this.conv = conv
 *         this.typecode = conv.get_nptypecode()
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":196
 *         this.typecode = conv.get_nptypecode()
 *         this.elesize = conv.size
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef int numele = col.GetLen()
 *         cdef void* src = col.GetValuePointer()
 */

int __pyx_t_13_librootnumpy_VaryArrayConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  int __pyx_v_numele;
  void *__pyx_v_src;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":197
 *         this.elesize = conv.size
 *     int write(Column* col, void* buffer):
 *         cdef int numele = col.GetLen()             # <<<<<<<<<<<<<<
 *         cdef void* src = col.GetValuePointer()
 *         return create_numpyarray(buffer, src, this.typecode, numele, this.elesize)
 */
  __pyx_v_numele = __pyx_v_col->GetLen();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":198
 *     int write(Column* col, void* buffer):
 *         cdef int numele = col.GetLen()
 *         cdef void* src = col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         return create_numpyarray(buffer, src, this.typecode, numele, this.elesize)
 *     object get_nptype():
 */
  __pyx_v_src = __pyx_v_col->GetValuePointer();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":199
 *         cdef int numele = col.GetLen()
 *         cdef void* src = col.GetValuePointer()
 *         return create_numpyarray(buffer, src, this.typecode, numele, this.elesize)             # <<<<<<<<<<<<<<
 *     object get_nptype():
 *         return np.object
 */
  __pyx_r = __pyx_f_13_librootnumpy_create_numpyarray(__pyx_v_buffer, __pyx_v_src, this->typecode, __pyx_v_numele, this->elesize);
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":196
 *         this.typecode = conv.get_nptypecode()
 *         this.elesize = conv.size
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef int numele = col.GetLen()
 *         cdef void* src = col.GetValuePointer()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":200
 *         cdef void* src = col.GetValuePointer()
 *         return create_numpyarray(buffer, src, this.typecode, numele, this.elesize)
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.object
 *     object get_nptypecode():
 */

PyObject *__pyx_t_13_librootnumpy_VaryArrayConverter::get_nptype(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_nptype", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":201
 *         return create_numpyarray(buffer, src, this.typecode, numele, this.elesize)
 *     object get_nptype():
 *         return np.object             # <<<<<<<<<<<<<<
 *     object get_nptypecode():
 *         return np.NPY_OBJECT
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":200
 *         cdef void* src = col.GetValuePointer()
 *         return create_numpyarray(buffer, src, this.typecode, numele, this.elesize)
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.object
 *     object get_nptypecode():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("VaryArrayConverter.get_nptype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":202
 *     object get_nptype():
 *         return np.object
 *     object get_nptypecode():             # <<<<<<<<<<<<<<
 *         return np.NPY_OBJECT
 * 
 */

PyObject *__pyx_t_13_librootnumpy_VaryArrayConverter::get_nptypecode(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_nptypecode", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":203
 *         return np.object
 *     object get_nptypecode():
 *         return np.NPY_OBJECT             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":202
 *     object get_nptype():
 *         return np.object
 *     object get_nptypecode():             # <<<<<<<<<<<<<<
 *         return np.NPY_OBJECT
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("VaryArrayConverter.get_nptypecode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":209
 *     BasicConverter* conv # converter for single element
 *     int L # numele
 *     __init__(BasicConverter* conv, int L):             # <<<<<<<<<<<<<<
 *         this.conv = conv
 *         this.L = L
 */

 __pyx_t_13_librootnumpy_FixedArrayConverter::__pyx_t_13_librootnumpy_FixedArrayConverter(__pyx_t_13_librootnumpy_BasicConverter *__pyx_v_conv, int __pyx_v_L) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":210
 *     int L # numele
 *     __init__(BasicConverter* conv, int L):
 *         this.conv = conv             # <<<<<<<<<<<<<<
 *         this.L = L
 *     int write(Column* col, void* buffer):
 */
  this->conv = __pyx_v_conv;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":211
 *     __init__(BasicConverter* conv, int L):
 *         this.conv = conv
 *         this.L = L             # <<<<<<<<<<<<<<
 *     int write(Column* col, void* buffer):
 *         cdef void* src = col.GetValuePointer()
 */
  this->L = __pyx_v_L;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":209
 *     BasicConverter* conv # converter for single element
 *     int L # numele
 *     __init__(BasicConverter* conv, int L):             # <<<<<<<<<<<<<<
 *         this.conv = conv
 *         this.L = L
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":212
 *         this.conv = conv
 *         this.L = L
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef void* src = col.GetValuePointer()
 *         cdef int nbytes = col.GetSize()
 */

int __pyx_t_13_librootnumpy_FixedArrayConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  void *__pyx_v_src;
  int __pyx_v_nbytes;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":213
 *         this.L = L
 *     int write(Column* col, void* buffer):
 *         cdef void* src = col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         cdef int nbytes = col.GetSize()
 *         memcpy(buffer, src, nbytes)
 */
  __pyx_v_src = __pyx_v_col->GetValuePointer();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":214
 *     int write(Column* col, void* buffer):
 *         cdef void* src = col.GetValuePointer()
 *         cdef int nbytes = col.GetSize()             # <<<<<<<<<<<<<<
 *         memcpy(buffer, src, nbytes)
 *         return nbytes
 */
  __pyx_v_nbytes = __pyx_v_col->GetSize();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":215
 *         cdef void* src = col.GetValuePointer()
 *         cdef int nbytes = col.GetSize()
 *         memcpy(buffer, src, nbytes)             # <<<<<<<<<<<<<<
 *         return nbytes
 *     object get_nptype():
 */
  memcpy(__pyx_v_buffer, __pyx_v_src, __pyx_v_nbytes);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":216
 *         cdef int nbytes = col.GetSize()
 *         memcpy(buffer, src, nbytes)
 *         return nbytes             # <<<<<<<<<<<<<<
 *     object get_nptype():
 *         return (np.dtype(this.conv.nptype), this.L)
 */
  __pyx_r = __pyx_v_nbytes;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":212
 *         this.conv = conv
 *         this.L = L
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef void* src = col.GetValuePointer()
 *         cdef int nbytes = col.GetSize()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":217
 *         memcpy(buffer, src, nbytes)
 *         return nbytes
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return (np.dtype(this.conv.nptype), this.L)
 *     int get_nptypecode():
 */

PyObject *__pyx_t_13_librootnumpy_FixedArrayConverter::get_nptype(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_nptype", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":218
 *         return nbytes
 *     object get_nptype():
 *         return (np.dtype(this.conv.nptype), this.L)             # <<<<<<<<<<<<<<
 *     int get_nptypecode():
 *         return this.conv.nptypecode
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_to_py_(this->conv->nptype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(this->L); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":217
 *         memcpy(buffer, src, nbytes)
 *         return nbytes
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return (np.dtype(this.conv.nptype), this.L)
 *     int get_nptypecode():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("FixedArrayConverter.get_nptype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":219
 *     object get_nptype():
 *         return (np.dtype(this.conv.nptype), this.L)
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.conv.nptypecode
 * 
 */

int __pyx_t_13_librootnumpy_FixedArrayConverter::get_nptypecode(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_nptypecode", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":220
 *         return (np.dtype(this.conv.nptype), this.L)
 *     int get_nptypecode():
 *         return this.conv.nptypecode             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = this->conv->nptypecode;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":219
 *     object get_nptype():
 *         return (np.dtype(this.conv.nptype), this.L)
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.conv.nptypecode
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":224
 * 
 * cdef cppclass VectorConverterBase(Converter):
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.object
 *     object get_nptypecode():
 */

PyObject *__pyx_t_13_librootnumpy_VectorConverterBase::get_nptype(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_nptype", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":225
 * cdef cppclass VectorConverterBase(Converter):
 *     object get_nptype():
 *         return np.object             # <<<<<<<<<<<<<<
 *     object get_nptypecode():
 *         return np.NPY_OBJECT
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":224
 * 
 * cdef cppclass VectorConverterBase(Converter):
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.object
 *     object get_nptypecode():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("VectorConverterBase.get_nptype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":226
 *     object get_nptype():
 *         return np.object
 *     object get_nptypecode():             # <<<<<<<<<<<<<<
 *         return np.NPY_OBJECT
 * 
 */

PyObject *__pyx_t_13_librootnumpy_VectorConverterBase::get_nptypecode(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_nptypecode", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":227
 *         return np.object
 *     object get_nptypecode():
 *         return np.NPY_OBJECT             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":226
 *     object get_nptype():
 *         return np.object
 *     object get_nptypecode():             # <<<<<<<<<<<<<<
 *         return np.NPY_OBJECT
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("VectorConverterBase.get_nptypecode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":234
 *     int nptypecode
 *     Vector2Array[T] v2a
 *     __init__():             # <<<<<<<<<<<<<<
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 */

template <typename T>
 __pyx_t_13_librootnumpy_VectorConverter<T>::__pyx_t_13_librootnumpy_VectorConverter(void) {
  TypeName<T> __pyx_v_ast;
  PyObject *__pyx_v_info = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":235
 *     Vector2Array[T] v2a
 *     __init__():
 *         cdef TypeName[T] ast = TypeName[T]()             # <<<<<<<<<<<<<<
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize
 */
  __pyx_v_ast = TypeName<T>();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":236
 *     __init__():
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]             # <<<<<<<<<<<<<<
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_ast.name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_info = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":237
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize             # <<<<<<<<<<<<<<
 *         this.nptypecode = info[2]
 *     int write(Column* col, void* buffer):
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_info, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  this->elesize = __pyx_t_4;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":238
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]             # <<<<<<<<<<<<<<
 *     int write(Column* col, void* buffer):
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_info, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  this->nptypecode = __pyx_t_4;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":234
 *     int nptypecode
 *     Vector2Array[T] v2a
 *     __init__():             # <<<<<<<<<<<<<<
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("VectorConverter.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_info);
  __Pyx_RefNannyFinishContext();
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":239
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()
 *         cdef unsigned long numele = tmp.size()
 */

template <typename T>
int __pyx_t_13_librootnumpy_VectorConverter<T>::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<T> *__pyx_v_tmp;
  unsigned long __pyx_v_numele;
  T *__pyx_v_fa;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":240
 *         this.nptypecode = info[2]
 *     int write(Column* col, void* buffer):
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         cdef unsigned long numele = tmp.size()
 *         # check cython auto generate code
 */
  __pyx_v_tmp = ((std::vector<T> *)__pyx_v_col->GetValuePointer());

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":241
 *     int write(Column* col, void* buffer):
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()
 *         cdef unsigned long numele = tmp.size()             # <<<<<<<<<<<<<<
 *         # check cython auto generate code
 *         # if it really does &((*tmp)[0])
 */
  __pyx_v_numele = __pyx_v_tmp->size();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":244
 *         # check cython auto generate code
 *         # if it really does &((*tmp)[0])
 *         cdef T* fa = this.v2a.convert(tmp)             # <<<<<<<<<<<<<<
 *         return create_numpyarray(buffer, fa, this.nptypecode, numele, this.elesize)
 * 
 */
  __pyx_v_fa = this->v2a.convert(__pyx_v_tmp);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":245
 *         # if it really does &((*tmp)[0])
 *         cdef T* fa = this.v2a.convert(tmp)
 *         return create_numpyarray(buffer, fa, this.nptypecode, numele, this.elesize)             # <<<<<<<<<<<<<<
 * 
 * cdef cppclass VectorVectorConverter[T](VectorConverterBase):
 */
  __pyx_r = __pyx_f_13_librootnumpy_create_numpyarray(__pyx_v_buffer, __pyx_v_fa, this->nptypecode, __pyx_v_numele, this->elesize);
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":239
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()
 *         cdef unsigned long numele = tmp.size()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":251
 *     int nptypecode
 *     Vector2Array[T] v2a
 *     __init__():             # <<<<<<<<<<<<<<
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 */

template <typename T>
 __pyx_t_13_librootnumpy_VectorVectorConverter<T>::__pyx_t_13_librootnumpy_VectorVectorConverter(void) {
  TypeName<T> __pyx_v_ast;
  PyObject *__pyx_v_info = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":252
 *     Vector2Array[T] v2a
 *     __init__():
 *         cdef TypeName[T] ast = TypeName[T]()             # <<<<<<<<<<<<<<
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize
 */
  __pyx_v_ast = TypeName<T>();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":253
 *     __init__():
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]             # <<<<<<<<<<<<<<
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_ast.name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_info = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":254
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize             # <<<<<<<<<<<<<<
 *         this.nptypecode = info[2]
 *     int write(Column* col, void* buffer):
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_info, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  this->elesize = __pyx_t_4;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":255
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]             # <<<<<<<<<<<<<<
 *     int write(Column* col, void* buffer):
 *         cdef vector[vector[T]]* tmp = <vector[vector[T]]*> col.GetValuePointer()
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_info, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  this->nptypecode = __pyx_t_4;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":251
 *     int nptypecode
 *     Vector2Array[T] v2a
 *     __init__():             # <<<<<<<<<<<<<<
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("VectorVectorConverter.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_info);
  __Pyx_RefNannyFinishContext();
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":256
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[T]]* tmp = <vector[vector[T]]*> col.GetValuePointer()
 * 
 */

template <typename T>
int __pyx_t_13_librootnumpy_VectorVectorConverter<T>::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<std::vector<T> > *__pyx_v_tmp;
  unsigned long __pyx_v_numele;
  T *__pyx_v_fa;
  int __pyx_v_objsize;
  int __pyx_v_objtypecode;
  npy_intp __pyx_v_dims[1];
  PyArrayObject *__pyx_v_outer = 0;
  PyObject *__pyx_v_outerobj;
  char *__pyx_v_dataptr;
  PyObject *__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  size_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":257
 *         this.nptypecode = info[2]
 *     int write(Column* col, void* buffer):
 *         cdef vector[vector[T]]* tmp = <vector[vector[T]]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 * 
 *         #this will hold number of subvectors
 */
  __pyx_v_tmp = ((std::vector<std::vector<T> > *)__pyx_v_col->GetValuePointer());

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":264
 * 
 *         #these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyArray_Descr *)__pyx_t_1)->elsize;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_objsize = __pyx_t_2;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":265
 *         #these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT             # <<<<<<<<<<<<<<
 * 
 *         # it seems *tmp is exposed via tmp[0]
 */
  __pyx_v_objtypecode = NPY_OBJECT;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":268
 * 
 *         # it seems *tmp is exposed via tmp[0]
 *         numele = tmp[0].size()             # <<<<<<<<<<<<<<
 * 
 *         # we want to create an outer array container that dataptr points to, containing pointers
 */
  __pyx_v_numele = (__pyx_v_tmp[0]).size();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":274
 *         #define an (numele)-dimensional outer array to hold our subvectors fa
 *         cdef np.npy_intp dims[1]
 *         dims[0] = numele             # <<<<<<<<<<<<<<
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 */
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":275
 *         cdef np.npy_intp dims[1]
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)             # <<<<<<<<<<<<<<
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 */
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, __pyx_v_objtypecode, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_outer = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":276
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref             # <<<<<<<<<<<<<<
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)
 */
  __pyx_v_outerobj = ((PyObject *)__pyx_v_outer);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":278
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)             # <<<<<<<<<<<<<<
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))
 */
  Py_INCREF(((PyObject *)__pyx_v_outer));

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":280
 *         Py_INCREF(outer)
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 * 
 *         # build a dataptr pointing to outer, so we can shift and write each of the subvectors
 */
  memcpy(__pyx_v_buffer, (&__pyx_v_outerobj), (sizeof(PyObject *)));

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":283
 * 
 *         # build a dataptr pointing to outer, so we can shift and write each of the subvectors
 *         cdef char* dataptr = <char*> outer.data             # <<<<<<<<<<<<<<
 * 
 *         # loop through all subvectors
 */
  __pyx_v_dataptr = ((char *)__pyx_v_outer->data);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":286
 * 
 *         # loop through all subvectors
 *         for i in xrange(numele):             # <<<<<<<<<<<<<<
 *             fa = this.v2a.convert(&tmp[0][i])
 *             # for some reason, shift isn't working, so we're directly shifting it ourselves
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_numele); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":287
 *         # loop through all subvectors
 *         for i in xrange(numele):
 *             fa = this.v2a.convert(&tmp[0][i])             # <<<<<<<<<<<<<<
 *             # for some reason, shift isn't working, so we're directly shifting it ourselves
 *             #dataptr = shift(&dataptr, objsize)
 */
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_fa = this->v2a.convert((&((__pyx_v_tmp[0])[__pyx_t_6])));

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":290
 *             # for some reason, shift isn't working, so we're directly shifting it ourselves
 *             #dataptr = shift(&dataptr, objsize)
 *             create_numpyarray(&dataptr[i*objsize], fa, this.nptypecode, tmp[0][i].size(), this.elesize)             # <<<<<<<<<<<<<<
 *         return sizeof(outerobj)
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_objsize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyNumber_Multiply(__pyx_v_i, __pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_7); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_f_13_librootnumpy_create_numpyarray((&(__pyx_v_dataptr[__pyx_t_8])), __pyx_v_fa, this->nptypecode, ((__pyx_v_tmp[0])[__pyx_t_6]).size(), this->elesize);
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":291
 *             #dataptr = shift(&dataptr, objsize)
 *             create_numpyarray(&dataptr[i*objsize], fa, this.nptypecode, tmp[0][i].size(), this.elesize)
 *         return sizeof(outerobj)             # <<<<<<<<<<<<<<
 * 
 * cdef cppclass VectorBoolConverter(VectorConverterBase):
 */
  __pyx_r = (sizeof(__pyx_v_outerobj));
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":256
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[T]]* tmp = <vector[vector[T]]*> col.GetValuePointer()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("VectorVectorConverter.write", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_outer);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":294
 * 
 * cdef cppclass VectorBoolConverter(VectorConverterBase):
 *     __init__():             # <<<<<<<<<<<<<<
 *         pass
 *     # Requires special treament since vector<bool> stores contents as bits...
 */

 __pyx_t_13_librootnumpy_VectorBoolConverter::__pyx_t_13_librootnumpy_VectorBoolConverter(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":297
 *         pass
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[bool]* tmp = <vector[bool]*> col.GetValuePointer()
 *         return create_numpyarray_vectorbool(buffer, tmp)
 */

int __pyx_t_13_librootnumpy_VectorBoolConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<bool> *__pyx_v_tmp;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":298
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):
 *         cdef vector[bool]* tmp = <vector[bool]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         return create_numpyarray_vectorbool(buffer, tmp)
 * 
 */
  __pyx_v_tmp = ((std::vector<bool> *)__pyx_v_col->GetValuePointer());

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":299
 *     int write(Column* col, void* buffer):
 *         cdef vector[bool]* tmp = <vector[bool]*> col.GetValuePointer()
 *         return create_numpyarray_vectorbool(buffer, tmp)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_13_librootnumpy_create_numpyarray_vectorbool(__pyx_v_buffer, __pyx_v_tmp);
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":297
 *         pass
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[bool]* tmp = <vector[bool]*> col.GetValuePointer()
 *         return create_numpyarray_vectorbool(buffer, tmp)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":363
 *     'vector<vector<double> >', new VectorVectorConverter[double]()))
 * 
 * cdef Converter* find_converter(Column* col):             # <<<<<<<<<<<<<<
 *     cdef ColumnType ct = col.coltype
 *     cdef string typename = string(col.GetTypeName())
 */

static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_find_converter(Column *__pyx_v_col) {
  enum ColumnType __pyx_v_ct;
  std::string __pyx_v_typename;
  __pyx_t_13_librootnumpy_Converter *__pyx_v_conv;
  __pyx_t_13_librootnumpy_Converter *__pyx_v_basic_conv;
  __pyx_t_13_librootnumpy_Converter *__pyx_r;
  __Pyx_RefNannyDeclarations
  enum ColumnType __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __pyx_t_13_librootnumpy_CONVERTERS_ITEM __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_converter", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":364
 * 
 * cdef Converter* find_converter(Column* col):
 *     cdef ColumnType ct = col.coltype             # <<<<<<<<<<<<<<
 *     cdef string typename = string(col.GetTypeName())
 *     cdef Converter* conv
 */
  __pyx_t_1 = __pyx_v_col->coltype;
  __pyx_v_ct = __pyx_t_1;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":365
 * cdef Converter* find_converter(Column* col):
 *     cdef ColumnType ct = col.coltype
 *     cdef string typename = string(col.GetTypeName())             # <<<<<<<<<<<<<<
 *     cdef Converter* conv
 *     cdef Converter* basic_conv
 */
  try {
    __pyx_t_2 = std::string(__pyx_v_col->GetTypeName());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_typename = __pyx_t_2;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":382
 *                 typename + '[fixed]', conv))
 *         return conv
 *     elif ct == VARY:             # <<<<<<<<<<<<<<
 *         conv = find_converter_by_typename(typename + '[vary]')
 *         if conv == NULL:
 */
  switch (__pyx_v_ct) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":368
 *     cdef Converter* conv
 *     cdef Converter* basic_conv
 *     if ct == SINGLE:             # <<<<<<<<<<<<<<
 *         return find_converter_by_typename(typename)
 *     elif ct == FIXED:
 */
    case SINGLE:

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":369
 *     cdef Converter* basic_conv
 *     if ct == SINGLE:
 *         return find_converter_by_typename(typename)             # <<<<<<<<<<<<<<
 *     elif ct == FIXED:
 *         conv = find_converter_by_typename(typename + '[fixed]')
 */
    __pyx_r = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_v_typename);
    goto __pyx_L0;
    break;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":370
 *     if ct == SINGLE:
 *         return find_converter_by_typename(typename)
 *     elif ct == FIXED:             # <<<<<<<<<<<<<<
 *         conv = find_converter_by_typename(typename + '[fixed]')
 *         if conv == NULL:
 */
    case FIXED:

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":371
 *         return find_converter_by_typename(typename)
 *     elif ct == FIXED:
 *         conv = find_converter_by_typename(typename + '[fixed]')             # <<<<<<<<<<<<<<
 *         if conv == NULL:
 *             basic_conv = find_converter_by_typename(typename)
 */
    __pyx_t_3 = __pyx_convert_string_to_py_(__pyx_v_typename); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_fixed); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __pyx_convert_string_from_py_(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_t_2);

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":372
 *     elif ct == FIXED:
 *         conv = find_converter_by_typename(typename + '[fixed]')
 *         if conv == NULL:             # <<<<<<<<<<<<<<
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:
 */
    __pyx_t_5 = ((__pyx_v_conv == NULL) != 0);
    if (__pyx_t_5) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":373
 *         conv = find_converter_by_typename(typename + '[fixed]')
 *         if conv == NULL:
 *             basic_conv = find_converter_by_typename(typename)             # <<<<<<<<<<<<<<
 *             if basic_conv == NULL:
 *                 return NULL
 */
      __pyx_v_basic_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_v_typename);

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":374
 *         if conv == NULL:
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:             # <<<<<<<<<<<<<<
 *                 return NULL
 *             conv = new FixedArrayConverter(
 */
      __pyx_t_5 = ((__pyx_v_basic_conv == NULL) != 0);
      if (__pyx_t_5) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":375
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:
 *                 return NULL             # <<<<<<<<<<<<<<
 *             conv = new FixedArrayConverter(
 *                     <BasicConverter*>basic_conv,
 */
        __pyx_r = NULL;
        goto __pyx_L0;
      }

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":376
 *             if basic_conv == NULL:
 *                 return NULL
 *             conv = new FixedArrayConverter(             # <<<<<<<<<<<<<<
 *                     <BasicConverter*>basic_conv,
 *                     col.countval)
 */
      __pyx_v_conv = new __pyx_t_13_librootnumpy_FixedArrayConverter(((__pyx_t_13_librootnumpy_BasicConverter *)__pyx_v_basic_conv), __pyx_v_col->countval);

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":380
 *                     col.countval)
 *             CONVERTERS.insert(CONVERTERS_ITEM(
 *                 typename + '[fixed]', conv))             # <<<<<<<<<<<<<<
 *         return conv
 *     elif ct == VARY:
 */
      __pyx_t_4 = __pyx_convert_string_to_py_(__pyx_v_typename); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_fixed); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = __pyx_convert_string_from_py_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":379
 *                     <BasicConverter*>basic_conv,
 *                     col.countval)
 *             CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *                 typename + '[fixed]', conv))
 *         return conv
 */
      try {
        __pyx_t_6 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_2, __pyx_v_conv);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_6);
      goto __pyx_L3;
    }
    __pyx_L3:;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":381
 *             CONVERTERS.insert(CONVERTERS_ITEM(
 *                 typename + '[fixed]', conv))
 *         return conv             # <<<<<<<<<<<<<<
 *     elif ct == VARY:
 *         conv = find_converter_by_typename(typename + '[vary]')
 */
    __pyx_r = __pyx_v_conv;
    goto __pyx_L0;
    break;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":382
 *                 typename + '[fixed]', conv))
 *         return conv
 *     elif ct == VARY:             # <<<<<<<<<<<<<<
 *         conv = find_converter_by_typename(typename + '[vary]')
 *         if conv == NULL:
 */
    case VARY:

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":383
 *         return conv
 *     elif ct == VARY:
 *         conv = find_converter_by_typename(typename + '[vary]')             # <<<<<<<<<<<<<<
 *         if conv == NULL:
 *             basic_conv = find_converter_by_typename(typename)
 */
    __pyx_t_3 = __pyx_convert_string_to_py_(__pyx_v_typename); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_vary); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __pyx_convert_string_from_py_(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_t_2);

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":384
 *     elif ct == VARY:
 *         conv = find_converter_by_typename(typename + '[vary]')
 *         if conv == NULL:             # <<<<<<<<<<<<<<
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:
 */
    __pyx_t_5 = ((__pyx_v_conv == NULL) != 0);
    if (__pyx_t_5) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":385
 *         conv = find_converter_by_typename(typename + '[vary]')
 *         if conv == NULL:
 *             basic_conv = find_converter_by_typename(typename)             # <<<<<<<<<<<<<<
 *             if basic_conv == NULL:
 *                 return NULL
 */
      __pyx_v_basic_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_v_typename);

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":386
 *         if conv == NULL:
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:             # <<<<<<<<<<<<<<
 *                 return NULL
 *             conv = new VaryArrayConverter(
 */
      __pyx_t_5 = ((__pyx_v_basic_conv == NULL) != 0);
      if (__pyx_t_5) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":387
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:
 *                 return NULL             # <<<<<<<<<<<<<<
 *             conv = new VaryArrayConverter(
 *                     <BasicConverter*>basic_conv)
 */
        __pyx_r = NULL;
        goto __pyx_L0;
      }

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":388
 *             if basic_conv == NULL:
 *                 return NULL
 *             conv = new VaryArrayConverter(             # <<<<<<<<<<<<<<
 *                     <BasicConverter*>basic_conv)
 *             CONVERTERS.insert(CONVERTERS_ITEM(
 */
      __pyx_v_conv = new __pyx_t_13_librootnumpy_VaryArrayConverter(((__pyx_t_13_librootnumpy_BasicConverter *)__pyx_v_basic_conv));

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":391
 *                     <BasicConverter*>basic_conv)
 *             CONVERTERS.insert(CONVERTERS_ITEM(
 *                 typename + '[vary]', conv))             # <<<<<<<<<<<<<<
 *         return conv
 *     return NULL
 */
      __pyx_t_4 = __pyx_convert_string_to_py_(__pyx_v_typename); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_vary); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = __pyx_convert_string_from_py_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":390
 *             conv = new VaryArrayConverter(
 *                     <BasicConverter*>basic_conv)
 *             CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *                 typename + '[vary]', conv))
 *         return conv
 */
      try {
        __pyx_t_6 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_2, __pyx_v_conv);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_6);
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":392
 *             CONVERTERS.insert(CONVERTERS_ITEM(
 *                 typename + '[vary]', conv))
 *         return conv             # <<<<<<<<<<<<<<
 *     return NULL
 * 
 */
    __pyx_r = __pyx_v_conv;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":393
 *                 typename + '[vary]', conv))
 *         return conv
 *     return NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = NULL;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":363
 *     'vector<vector<double> >', new VectorVectorConverter[double]()))
 * 
 * cdef Converter* find_converter(Column* col):             # <<<<<<<<<<<<<<
 *     cdef ColumnType ct = col.coltype
 *     cdef string typename = string(col.GetTypeName())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("_librootnumpy.find_converter", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":396
 * 
 * 
 * cdef Converter* find_converter_by_typename(string typename):             # <<<<<<<<<<<<<<
 *     it = CONVERTERS.find(ResolveTypedef(typename.c_str(), True))
 *     if it == CONVERTERS.end():
 */

static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_find_converter_by_typename(std::string __pyx_v_typename) {
  std::map<std::string,__pyx_t_13_librootnumpy_Converter *>::iterator __pyx_v_it;
  __pyx_t_13_librootnumpy_Converter *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("find_converter_by_typename", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":397
 * 
 * cdef Converter* find_converter_by_typename(string typename):
 *     it = CONVERTERS.find(ResolveTypedef(typename.c_str(), True))             # <<<<<<<<<<<<<<
 *     if it == CONVERTERS.end():
 *         return NULL
 */
  __pyx_v_it = __pyx_v_13_librootnumpy_CONVERTERS.find(TClassEdit::ResolveTypedef(__pyx_v_typename.c_str(), 1));

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":398
 * cdef Converter* find_converter_by_typename(string typename):
 *     it = CONVERTERS.find(ResolveTypedef(typename.c_str(), True))
 *     if it == CONVERTERS.end():             # <<<<<<<<<<<<<<
 *         return NULL
 *     return deref(it).second
 */
  __pyx_t_1 = ((__pyx_v_it == __pyx_v_13_librootnumpy_CONVERTERS.end()) != 0);
  if (__pyx_t_1) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":399
 *     it = CONVERTERS.find(ResolveTypedef(typename.c_str(), True))
 *     if it == CONVERTERS.end():
 *         return NULL             # <<<<<<<<<<<<<<
 *     return deref(it).second
 * 
 */
    __pyx_r = NULL;
    goto __pyx_L0;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":400
 *     if it == CONVERTERS.end():
 *         return NULL
 *     return deref(it).second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (*__pyx_v_it).second;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":396
 * 
 * 
 * cdef Converter* find_converter_by_typename(string typename):             # <<<<<<<<<<<<<<
 *     it = CONVERTERS.find(ResolveTypedef(typename.c_str(), True))
 *     if it == CONVERTERS.end():
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":403
 * 
 * 
 * cdef np.ndarray init_array(vector[Column*]& columns,             # <<<<<<<<<<<<<<
 *                            vector[Converter*]& cv,
 *                            unsigned long entries,
 */

static PyArrayObject *__pyx_f_13_librootnumpy_init_array(std::vector<Column *> &__pyx_v_columns, std::vector<__pyx_t_13_librootnumpy_Converter *> &__pyx_v_cv, unsigned long __pyx_v_entries, PyObject *__pyx_v_include_weight, PyObject *__pyx_v_weight_name) {
  Column *__pyx_v_this_col;
  __pyx_t_13_librootnumpy_Converter *__pyx_v_this_conv;
  PyObject *__pyx_v_nst = NULL;
  size_t __pyx_v_i;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_array", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":410
 *     cdef Column* this_col
 *     cdef Converter* this_conv
 *     nst = []             # <<<<<<<<<<<<<<
 *     for i in range(columns.size()):
 *         this_col = columns[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nst = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":411
 *     cdef Converter* this_conv
 *     nst = []
 *     for i in range(columns.size()):             # <<<<<<<<<<<<<<
 *         this_col = columns[i]
 *         this_conv = find_converter(this_col)
 */
  __pyx_t_2 = __pyx_v_columns.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":412
 *     nst = []
 *     for i in range(columns.size()):
 *         this_col = columns[i]             # <<<<<<<<<<<<<<
 *         this_conv = find_converter(this_col)
 *         if this_conv == NULL:
 */
    __pyx_v_this_col = (__pyx_v_columns[__pyx_v_i]);

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":413
 *     for i in range(columns.size()):
 *         this_col = columns[i]
 *         this_conv = find_converter(this_col)             # <<<<<<<<<<<<<<
 *         if this_conv == NULL:
 *             raise ValueError("No converter for %s" % this_col.GetTypeName())
 */
    __pyx_v_this_conv = __pyx_f_13_librootnumpy_find_converter(__pyx_v_this_col);

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":414
 *         this_col = columns[i]
 *         this_conv = find_converter(this_col)
 *         if this_conv == NULL:             # <<<<<<<<<<<<<<
 *             raise ValueError("No converter for %s" % this_col.GetTypeName())
 *         nst.append((this_col.colname, this_conv.get_nptype()))
 */
    __pyx_t_4 = ((__pyx_v_this_conv == NULL) != 0);
    if (__pyx_t_4) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":415
 *         this_conv = find_converter(this_col)
 *         if this_conv == NULL:
 *             raise ValueError("No converter for %s" % this_col.GetTypeName())             # <<<<<<<<<<<<<<
 *         nst.append((this_col.colname, this_conv.get_nptype()))
 *         cv.push_back(this_conv)
 */
      __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_this_col->GetTypeName()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_No_converter_for_s, __pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":416
 *         if this_conv == NULL:
 *             raise ValueError("No converter for %s" % this_col.GetTypeName())
 *         nst.append((this_col.colname, this_conv.get_nptype()))             # <<<<<<<<<<<<<<
 *         cv.push_back(this_conv)
 *     if include_weight:
 */
    __pyx_t_5 = __pyx_convert_string_to_py_(__pyx_v_this_col->colname); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __pyx_v_this_conv->get_nptype(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_nst, __pyx_t_6); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":417
 *             raise ValueError("No converter for %s" % this_col.GetTypeName())
 *         nst.append((this_col.colname, this_conv.get_nptype()))
 *         cv.push_back(this_conv)             # <<<<<<<<<<<<<<
 *     if include_weight:
 *         nst.append((weight_name, np.dtype('d')))
 */
    __pyx_v_cv.push_back(__pyx_v_this_conv);
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":418
 *         nst.append((this_col.colname, this_conv.get_nptype()))
 *         cv.push_back(this_conv)
 *     if include_weight:             # <<<<<<<<<<<<<<
 *         nst.append((weight_name, np.dtype('d')))
 *     return np.empty(entries, dtype=nst)
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_include_weight); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":419
 *         cv.push_back(this_conv)
 *     if include_weight:
 *         nst.append((weight_name, np.dtype('d')))             # <<<<<<<<<<<<<<
 *     return np.empty(entries, dtype=nst)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_weight_name);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_weight_name);
    __Pyx_GIVEREF(__pyx_v_weight_name);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_nst, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":420
 *     if include_weight:
 *         nst.append((weight_name, np.dtype('d')))
 *     return np.empty(entries, dtype=nst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_entries); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_v_nst) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":403
 * 
 * 
 * cdef np.ndarray init_array(vector[Column*]& columns,             # <<<<<<<<<<<<<<
 *                            vector[Converter*]& cv,
 *                            unsigned long entries,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("_librootnumpy.init_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nst);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":423
 * 
 * 
 * cdef handle_load(int load, bool ignore_index=False):             # <<<<<<<<<<<<<<
 *     if load >= 0:
 *         return
 */

static PyObject *__pyx_f_13_librootnumpy_handle_load(int __pyx_v_load, struct __pyx_opt_args_13_librootnumpy_handle_load *__pyx_optional_args) {
  bool __pyx_v_ignore_index = ((bool)0);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("handle_load", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_ignore_index = __pyx_optional_args->ignore_index;
    }
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":424
 * 
 * cdef handle_load(int load, bool ignore_index=False):
 *     if load >= 0:             # <<<<<<<<<<<<<<
 *         return
 *     if load == -1:
 */
  __pyx_t_1 = ((__pyx_v_load >= 0) != 0);
  if (__pyx_t_1) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":425
 * cdef handle_load(int load, bool ignore_index=False):
 *     if load >= 0:
 *         return             # <<<<<<<<<<<<<<
 *     if load == -1:
 *         raise ValueError("chain is empty")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":434
 *     elif load == -3:
 *         raise IOError("cannot open current file")
 *     elif load == -4:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot access tree in current file")
 *     raise RuntimeError("the chain is not initialized")
 */
  switch (__pyx_v_load) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":426
 *     if load >= 0:
 *         return
 *     if load == -1:             # <<<<<<<<<<<<<<
 *         raise ValueError("chain is empty")
 *     elif load == -2:
 */
    case -1:

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":427
 *         return
 *     if load == -1:
 *         raise ValueError("chain is empty")             # <<<<<<<<<<<<<<
 *     elif load == -2:
 *         if ignore_index:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    break;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":428
 *     if load == -1:
 *         raise ValueError("chain is empty")
 *     elif load == -2:             # <<<<<<<<<<<<<<
 *         if ignore_index:
 *             return
 */
    case -2:

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":429
 *         raise ValueError("chain is empty")
 *     elif load == -2:
 *         if ignore_index:             # <<<<<<<<<<<<<<
 *             return
 *         raise IndexError("tree index in chain is out of bounds")
 */
    __pyx_t_1 = (__pyx_v_ignore_index != 0);
    if (__pyx_t_1) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":430
 *     elif load == -2:
 *         if ignore_index:
 *             return             # <<<<<<<<<<<<<<
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;
    }

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":431
 *         if ignore_index:
 *             return
 *         raise IndexError("tree index in chain is out of bounds")             # <<<<<<<<<<<<<<
 *     elif load == -3:
 *         raise IOError("cannot open current file")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    break;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":432
 *             return
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot open current file")
 *     elif load == -4:
 */
    case -3:

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":433
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:
 *         raise IOError("cannot open current file")             # <<<<<<<<<<<<<<
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    break;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":434
 *     elif load == -3:
 *         raise IOError("cannot open current file")
 *     elif load == -4:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot access tree in current file")
 *     raise RuntimeError("the chain is not initialized")
 */
    case -4:

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":435
 *         raise IOError("cannot open current file")
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")             # <<<<<<<<<<<<<<
 *     raise RuntimeError("the chain is not initialized")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    break;
    default: break;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":436
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")
 *     raise RuntimeError("the chain is not initialized")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[1]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":423
 * 
 * 
 * cdef handle_load(int load, bool ignore_index=False):             # <<<<<<<<<<<<<<
 *     if load >= 0:
 *         return
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_librootnumpy.handle_load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":439
 * 
 * 
 * cdef object tree2array(TTree* tree, branches, selection,             # <<<<<<<<<<<<<<
 *                        start, stop, step,
 *                        include_weight, weight_name):
 */

static PyObject *__pyx_f_13_librootnumpy_tree2array(TTree *__pyx_v_tree, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, PyObject *__pyx_v_include_weight, PyObject *__pyx_v_weight_name) {
  std::vector<Column *> __pyx_v_columns;
  Column *__pyx_v_col;
  BetterChain *__pyx_v_bc;
  TTreeFormula *__pyx_v_selection_formula;
  TTreeFormula *__pyx_v_formula;
  int __pyx_v_num_entries;
  int __pyx_v_num_entries_selected;
  int __pyx_v_ientry;
  __pyx_t_13_librootnumpy_Converter *__pyx_v_conv;
  unsigned long __pyx_v_numcol;
  void *__pyx_v_dataptr;
  PyArrayObject *__pyx_v_arr = 0;
  int __pyx_v_nb;
  int __pyx_v_entry_size;
  std::vector<__pyx_t_13_librootnumpy_Converter *> __pyx_v_conv_array;
  PyObject *__pyx_v_py_string = 0;
  char *__pyx_v_c_string;
  PyObject *__pyx_v_structure = NULL;
  PyObject *__pyx_v_branch = NULL;
  PyObject *__pyx_v_leaves = NULL;
  PyObject *__pyx_v_shortname = NULL;
  PyObject *__pyx_v_leaf = NULL;
  PyObject *__pyx_v_ltype = NULL;
  PyObject *__pyx_v_colname = NULL;
  PyObject *__pyx_v_indices = NULL;
  unsigned long __pyx_v_icol;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_13_librootnumpy_handle_load __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  std::string __pyx_t_17;
  std::string __pyx_t_18;
  std::string __pyx_t_19;
  int __pyx_t_20;
  unsigned long __pyx_t_21;
  unsigned long __pyx_t_22;
  int __pyx_t_23;
  char const *__pyx_t_24;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tree2array", 0);
  __Pyx_INCREF(__pyx_v_branches);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":447
 * 
 *     # Make a better chain so we can register all columns
 *     cdef BetterChain* bc = new BetterChain(tree)             # <<<<<<<<<<<<<<
 *     handle_load(bc.Prepare(), True)
 * 
 */
  __pyx_v_bc = new BetterChain(__pyx_v_tree);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":448
 *     # Make a better chain so we can register all columns
 *     cdef BetterChain* bc = new BetterChain(tree)
 *     handle_load(bc.Prepare(), True)             # <<<<<<<<<<<<<<
 * 
 *     cdef TTreeFormula* selection_formula = NULL
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.ignore_index = 1;
  __pyx_t_1 = __pyx_f_13_librootnumpy_handle_load(__pyx_v_bc->Prepare(), &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":450
 *     handle_load(bc.Prepare(), True)
 * 
 *     cdef TTreeFormula* selection_formula = NULL             # <<<<<<<<<<<<<<
 *     cdef TTreeFormula* formula = NULL
 *     cdef int num_entries = bc.GetEntries()
 */
  __pyx_v_selection_formula = NULL;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":451
 * 
 *     cdef TTreeFormula* selection_formula = NULL
 *     cdef TTreeFormula* formula = NULL             # <<<<<<<<<<<<<<
 *     cdef int num_entries = bc.GetEntries()
 *     cdef int num_entries_selected = 0
 */
  __pyx_v_formula = NULL;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":452
 *     cdef TTreeFormula* selection_formula = NULL
 *     cdef TTreeFormula* formula = NULL
 *     cdef int num_entries = bc.GetEntries()             # <<<<<<<<<<<<<<
 *     cdef int num_entries_selected = 0
 *     cdef int ientry
 */
  __pyx_v_num_entries = __pyx_v_bc->GetEntries();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":453
 *     cdef TTreeFormula* formula = NULL
 *     cdef int num_entries = bc.GetEntries()
 *     cdef int num_entries_selected = 0             # <<<<<<<<<<<<<<
 *     cdef int ientry
 * 
 */
  __pyx_v_num_entries_selected = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":467
 *     cdef char* c_string
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # Setup the selection if we have one
 *         if selection:
 */
  /*try:*/ {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":469
 *     try:
 *         # Setup the selection if we have one
 *         if selection:             # <<<<<<<<<<<<<<
 *             py_string = str(selection)
 *             c_string = py_string
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_selection); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    if (__pyx_t_3) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":470
 *         # Setup the selection if we have one
 *         if selection:
 *             py_string = str(selection)             # <<<<<<<<<<<<<<
 *             c_string = py_string
 *             selection_formula = new TTreeFormula("selection", c_string, bc.fChain)
 */
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_selection);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_selection);
      __Pyx_GIVEREF(__pyx_v_selection);
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __pyx_v_py_string = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":471
 *         if selection:
 *             py_string = str(selection)
 *             c_string = py_string             # <<<<<<<<<<<<<<
 *             selection_formula = new TTreeFormula("selection", c_string, bc.fChain)
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 */
      __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_py_string); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __pyx_v_c_string = __pyx_t_5;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":472
 *             py_string = str(selection)
 *             c_string = py_string
 *             selection_formula = new TTreeFormula("selection", c_string, bc.fChain)             # <<<<<<<<<<<<<<
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 *                 del selection_formula
 */
      __pyx_v_selection_formula = new TTreeFormula(__pyx_k_selection, __pyx_v_c_string, __pyx_v_bc->fChain);

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":473
 *             c_string = py_string
 *             selection_formula = new TTreeFormula("selection", c_string, bc.fChain)
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:             # <<<<<<<<<<<<<<
 *                 del selection_formula
 *                 raise ValueError("could not compile selection formula")
 */
      __pyx_t_3 = ((__pyx_v_selection_formula == NULL) != 0);
      if (!__pyx_t_3) {
        __pyx_t_6 = ((__pyx_v_selection_formula->GetNdim() == 0) != 0);
        __pyx_t_7 = __pyx_t_6;
      } else {
        __pyx_t_7 = __pyx_t_3;
      }
      if (__pyx_t_7) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":474
 *             selection_formula = new TTreeFormula("selection", c_string, bc.fChain)
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 *                 del selection_formula             # <<<<<<<<<<<<<<
 *                 raise ValueError("could not compile selection formula")
 *             # The chain will take care of updating the formula leaves when
 */
        delete __pyx_v_selection_formula;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":475
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 *                 del selection_formula
 *                 raise ValueError("could not compile selection formula")             # <<<<<<<<<<<<<<
 *             # The chain will take care of updating the formula leaves when
 *             # rolling over to the next tree.
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      }

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":478
 *             # The chain will take care of updating the formula leaves when
 *             # rolling over to the next tree.
 *             bc.AddFormula(selection_formula)             # <<<<<<<<<<<<<<
 * 
 *         # Parse the tree structure to determine branches and leaves
 */
      __pyx_v_bc->AddFormula(__pyx_v_selection_formula);
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":481
 * 
 *         # Parse the tree structure to determine branches and leaves
 *         structure = parse_tree_structure(tree)             # <<<<<<<<<<<<<<
 *         if branches is None:
 *             branches = structure.keys()
 */
    __pyx_t_4 = __pyx_f_13_librootnumpy_parse_tree_structure(__pyx_v_tree); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_structure = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":482
 *         # Parse the tree structure to determine branches and leaves
 *         structure = parse_tree_structure(tree)
 *         if branches is None:             # <<<<<<<<<<<<<<
 *             branches = structure.keys()
 *         elif len(branches) != len(set(branches)):
 */
    __pyx_t_7 = (__pyx_v_branches == Py_None);
    __pyx_t_3 = (__pyx_t_7 != 0);
    if (__pyx_t_3) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":483
 *         structure = parse_tree_structure(tree)
 *         if branches is None:
 *             branches = structure.keys()             # <<<<<<<<<<<<<<
 *         elif len(branches) != len(set(branches)):
 *             raise ValueError("duplicate branches requested")
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_structure, __pyx_n_s_keys); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_branches, __pyx_t_1);
      __pyx_t_1 = 0;
      goto __pyx_L8;
    }

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":484
 *         if branches is None:
 *             branches = structure.keys()
 *         elif len(branches) != len(set(branches)):             # <<<<<<<<<<<<<<
 *             raise ValueError("duplicate branches requested")
 * 
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_branches); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_branches);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_branches);
    __Pyx_GIVEREF(__pyx_v_branches);
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PySet_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = PySet_Size(__pyx_t_4); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = ((__pyx_t_8 != __pyx_t_9) != 0);
    if (__pyx_t_3) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":485
 *             branches = structure.keys()
 *         elif len(branches) != len(set(branches)):
 *             raise ValueError("duplicate branches requested")             # <<<<<<<<<<<<<<
 * 
 *         for branch in branches:
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    }
    __pyx_L8:;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":487
 *             raise ValueError("duplicate branches requested")
 * 
 *         for branch in branches:             # <<<<<<<<<<<<<<
 *             if branch in structure:
 *                 leaves = structure[branch]
 */
    if (PyList_CheckExact(__pyx_v_branches) || PyTuple_CheckExact(__pyx_v_branches)) {
      __pyx_t_4 = __pyx_v_branches; __Pyx_INCREF(__pyx_t_4); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_branches); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_4)) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        #endif
      } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_4)) {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        #endif
      } else {
        __pyx_t_1 = __pyx_t_10(__pyx_t_4);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_branch, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":488
 * 
 *         for branch in branches:
 *             if branch in structure:             # <<<<<<<<<<<<<<
 *                 leaves = structure[branch]
 *                 shortname = len(leaves) == 1
 */
      __pyx_t_3 = (__Pyx_PySequence_Contains(__pyx_v_branch, __pyx_v_structure, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __pyx_t_7 = (__pyx_t_3 != 0);
      if (__pyx_t_7) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":489
 *         for branch in branches:
 *             if branch in structure:
 *                 leaves = structure[branch]             # <<<<<<<<<<<<<<
 *                 shortname = len(leaves) == 1
 *                 for leaf, ltype in leaves:
 */
        __pyx_t_1 = PyObject_GetItem(__pyx_v_structure, __pyx_v_branch); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L4_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_leaves, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":490
 *             if branch in structure:
 *                 leaves = structure[branch]
 *                 shortname = len(leaves) == 1             # <<<<<<<<<<<<<<
 *                 for leaf, ltype in leaves:
 *                     if CONVERTERS.find(ltype) != CONVERTERS.end():
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_leaves); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_t_8 == 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_shortname, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":491
 *                 leaves = structure[branch]
 *                 shortname = len(leaves) == 1
 *                 for leaf, ltype in leaves:             # <<<<<<<<<<<<<<
 *                     if CONVERTERS.find(ltype) != CONVERTERS.end():
 *                         colname = branch if shortname else '%s_%s' % (branch, leaf)
 */
        if (PyList_CheckExact(__pyx_v_leaves) || PyTuple_CheckExact(__pyx_v_leaves)) {
          __pyx_t_1 = __pyx_v_leaves; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
          __pyx_t_11 = NULL;
        } else {
          __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_leaves); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = Py_TYPE(__pyx_t_1)->tp_iternext;
        }
        for (;;) {
          if (!__pyx_t_11 && PyList_CheckExact(__pyx_t_1)) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_12 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_12); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            #else
            __pyx_t_12 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            #endif
          } else if (!__pyx_t_11 && PyTuple_CheckExact(__pyx_t_1)) {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_12); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            #else
            __pyx_t_12 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            #endif
          } else {
            __pyx_t_12 = __pyx_t_11(__pyx_t_1);
            if (unlikely(!__pyx_t_12)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_12);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_12))) || (PyList_CheckExact(__pyx_t_12))) {
            PyObject* sequence = __pyx_t_12;
            #if CYTHON_COMPILING_IN_CPYTHON
            Py_ssize_t size = Py_SIZE(sequence);
            #else
            Py_ssize_t size = PySequence_Size(sequence);
            #endif
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              {__pyx_filename = __pyx_f[1]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            }
            #if CYTHON_COMPILING_IN_CPYTHON
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_14 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_14);
            #else
            __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_14 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __Pyx_GOTREF(__pyx_t_14);
            #endif
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_15 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_16 = Py_TYPE(__pyx_t_15)->tp_iternext;
            index = 0; __pyx_t_13 = __pyx_t_16(__pyx_t_15); if (unlikely(!__pyx_t_13)) goto __pyx_L14_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_13);
            index = 1; __pyx_t_14 = __pyx_t_16(__pyx_t_15); if (unlikely(!__pyx_t_14)) goto __pyx_L14_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_14);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_15), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __pyx_t_16 = NULL;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            goto __pyx_L15_unpacking_done;
            __pyx_L14_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_16 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            {__pyx_filename = __pyx_f[1]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __pyx_L15_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_leaf, __pyx_t_13);
          __pyx_t_13 = 0;
          __Pyx_XDECREF_SET(__pyx_v_ltype, __pyx_t_14);
          __pyx_t_14 = 0;

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":492
 *                 shortname = len(leaves) == 1
 *                 for leaf, ltype in leaves:
 *                     if CONVERTERS.find(ltype) != CONVERTERS.end():             # <<<<<<<<<<<<<<
 *                         colname = branch if shortname else '%s_%s' % (branch, leaf)
 *                         col = bc.MakeColumn(branch, leaf, colname)
 */
          __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_v_ltype); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __pyx_t_7 = ((__pyx_v_13_librootnumpy_CONVERTERS.find(__pyx_t_17) != __pyx_v_13_librootnumpy_CONVERTERS.end()) != 0);
          if (__pyx_t_7) {

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":493
 *                 for leaf, ltype in leaves:
 *                     if CONVERTERS.find(ltype) != CONVERTERS.end():
 *                         colname = branch if shortname else '%s_%s' % (branch, leaf)             # <<<<<<<<<<<<<<
 *                         col = bc.MakeColumn(branch, leaf, colname)
 *                         columns.push_back(col)
 */
            __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_shortname); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            if (__pyx_t_7) {
              __Pyx_INCREF(__pyx_v_branch);
              __pyx_t_12 = __pyx_v_branch;
            } else {
              __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_INCREF(__pyx_v_branch);
              PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_branch);
              __Pyx_GIVEREF(__pyx_v_branch);
              __Pyx_INCREF(__pyx_v_leaf);
              PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_leaf);
              __Pyx_GIVEREF(__pyx_v_leaf);
              __pyx_t_13 = __Pyx_PyString_Format(__pyx_kp_s_s__s, __pyx_t_14); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              __pyx_t_12 = __pyx_t_13;
              __pyx_t_13 = 0;
            }
            __Pyx_XDECREF_SET(__pyx_v_colname, __pyx_t_12);
            __pyx_t_12 = 0;

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":494
 *                     if CONVERTERS.find(ltype) != CONVERTERS.end():
 *                         colname = branch if shortname else '%s_%s' % (branch, leaf)
 *                         col = bc.MakeColumn(branch, leaf, colname)             # <<<<<<<<<<<<<<
 *                         columns.push_back(col)
 *                     else:
 */
            __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_v_branch); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __pyx_t_18 = __pyx_convert_string_from_py_(__pyx_v_leaf); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __pyx_t_19 = __pyx_convert_string_from_py_(__pyx_v_colname); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __pyx_v_col = __pyx_v_bc->MakeColumn(__pyx_t_17, __pyx_t_18, __pyx_t_19);

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":495
 *                         colname = branch if shortname else '%s_%s' % (branch, leaf)
 *                         col = bc.MakeColumn(branch, leaf, colname)
 *                         columns.push_back(col)             # <<<<<<<<<<<<<<
 *                     else:
 *                         warnings.warn(
 */
            __pyx_v_columns.push_back(__pyx_v_col);
            goto __pyx_L16;
          }
          /*else*/ {

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":497
 *                         columns.push_back(col)
 *                     else:
 *                         warnings.warn(             # <<<<<<<<<<<<<<
 *                             "cannot convert leaf %s of branch %s "
 *                             "with type %s (skipping)" % (branch, leaf, ltype),
 */
            __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_warn); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":499
 *                         warnings.warn(
 *                             "cannot convert leaf %s of branch %s "
 *                             "with type %s (skipping)" % (branch, leaf, ltype),             # <<<<<<<<<<<<<<
 *                             RootNumpyUnconvertibleWarning)
 *             else:
 */
            __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_INCREF(__pyx_v_branch);
            PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_branch);
            __Pyx_GIVEREF(__pyx_v_branch);
            __Pyx_INCREF(__pyx_v_leaf);
            PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_v_leaf);
            __Pyx_GIVEREF(__pyx_v_leaf);
            __Pyx_INCREF(__pyx_v_ltype);
            PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_v_ltype);
            __Pyx_GIVEREF(__pyx_v_ltype);
            __pyx_t_14 = __Pyx_PyString_Format(__pyx_kp_s_cannot_convert_leaf_s_of_branch, __pyx_t_12); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":500
 *                             "cannot convert leaf %s of branch %s "
 *                             "with type %s (skipping)" % (branch, leaf, ltype),
 *                             RootNumpyUnconvertibleWarning)             # <<<<<<<<<<<<<<
 *             else:
 *                 # attempt to interpret as an expression
 */
            __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_RootNumpyUnconvertibleWarning); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __Pyx_GOTREF(__pyx_t_12);

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":497
 *                         columns.push_back(col)
 *                     else:
 *                         warnings.warn(             # <<<<<<<<<<<<<<
 *                             "cannot convert leaf %s of branch %s "
 *                             "with type %s (skipping)" % (branch, leaf, ltype),
 */
            __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __Pyx_GOTREF(__pyx_t_15);
            PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_14);
            PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_12);
            __Pyx_GIVEREF(__pyx_t_12);
            __pyx_t_14 = 0;
            __pyx_t_12 = 0;
            __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_15, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          __pyx_L16:;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L11;
      }
      /*else*/ {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":503
 *             else:
 *                 # attempt to interpret as an expression
 *                 py_string = str(branch)             # <<<<<<<<<<<<<<
 *                 c_string = py_string
 *                 formula = new TTreeFormula(c_string, c_string, bc.fChain)
 */
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_branch);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_branch);
        __Pyx_GIVEREF(__pyx_v_branch);
        __pyx_t_12 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (!(likely(PyBytes_CheckExact(__pyx_t_12))||((__pyx_t_12) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_12)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_XDECREF_SET(__pyx_v_py_string, ((PyObject*)__pyx_t_12));
        __pyx_t_12 = 0;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":504
 *                 # attempt to interpret as an expression
 *                 py_string = str(branch)
 *                 c_string = py_string             # <<<<<<<<<<<<<<
 *                 formula = new TTreeFormula(c_string, c_string, bc.fChain)
 *                 if formula == NULL or formula.GetNdim() == 0:
 */
        __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_py_string); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __pyx_v_c_string = __pyx_t_5;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":505
 *                 py_string = str(branch)
 *                 c_string = py_string
 *                 formula = new TTreeFormula(c_string, c_string, bc.fChain)             # <<<<<<<<<<<<<<
 *                 if formula == NULL or formula.GetNdim() == 0:
 *                     del formula
 */
        __pyx_v_formula = new TTreeFormula(__pyx_v_c_string, __pyx_v_c_string, __pyx_v_bc->fChain);

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":506
 *                 c_string = py_string
 *                 formula = new TTreeFormula(c_string, c_string, bc.fChain)
 *                 if formula == NULL or formula.GetNdim() == 0:             # <<<<<<<<<<<<<<
 *                     del formula
 *                     raise ValueError(
 */
        __pyx_t_7 = ((__pyx_v_formula == NULL) != 0);
        if (!__pyx_t_7) {
          __pyx_t_3 = ((__pyx_v_formula->GetNdim() == 0) != 0);
          __pyx_t_6 = __pyx_t_3;
        } else {
          __pyx_t_6 = __pyx_t_7;
        }
        if (__pyx_t_6) {

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":507
 *                 formula = new TTreeFormula(c_string, c_string, bc.fChain)
 *                 if formula == NULL or formula.GetNdim() == 0:
 *                     del formula             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "The branch or expression %s is not present or valid. "
 */
          delete __pyx_v_formula;

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":511
 *                         "The branch or expression %s is not present or valid. "
 *                         "Call list_branches or appropriate ROOT methods "
 *                         "to see a list of available branches" % branch)             # <<<<<<<<<<<<<<
 *                 # The chain will take care of updating the formula leaves when
 *                 # rolling over to the next tree.
 */
          __pyx_t_12 = __Pyx_PyString_Format(__pyx_kp_s_The_branch_or_expression_s_is_no, __pyx_v_branch); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_GOTREF(__pyx_t_12);

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":508
 *                 if formula == NULL or formula.GetNdim() == 0:
 *                     del formula
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         "The branch or expression %s is not present or valid. "
 *                         "Call list_branches or appropriate ROOT methods "
 */
          __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_GOTREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_12);
          __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_Raise(__pyx_t_12, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        }

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":514
 *                 # The chain will take care of updating the formula leaves when
 *                 # rolling over to the next tree.
 *                 bc.AddFormula(formula)             # <<<<<<<<<<<<<<
 *                 col = new FormulaColumn(branch, formula)
 *                 columns.push_back(col)
 */
        __pyx_v_bc->AddFormula(__pyx_v_formula);

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":515
 *                 # rolling over to the next tree.
 *                 bc.AddFormula(formula)
 *                 col = new FormulaColumn(branch, formula)             # <<<<<<<<<<<<<<
 *                 columns.push_back(col)
 * 
 */
        __pyx_t_19 = __pyx_convert_string_from_py_(__pyx_v_branch); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __pyx_v_col = new FormulaColumn(__pyx_t_19, __pyx_v_formula);

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":516
 *                 bc.AddFormula(formula)
 *                 col = new FormulaColumn(branch, formula)
 *                 columns.push_back(col)             # <<<<<<<<<<<<<<
 * 
 *         # Activate branches used by formulae and columns
 */
        __pyx_v_columns.push_back(__pyx_v_col);
      }
      __pyx_L11:;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":520
 *         # Activate branches used by formulae and columns
 *         # and deactivate all others
 *         bc.InitBranches()             # <<<<<<<<<<<<<<
 * 
 *         # Now that we have all the columns we can
 */
    __pyx_v_bc->InitBranches();

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":524
 *         # Now that we have all the columns we can
 *         # make an appropriate array structure
 *         arr = init_array(columns, conv_array, num_entries,             # <<<<<<<<<<<<<<
 *                          include_weight, weight_name)
 *         # exclude weight column
 */
    __pyx_t_4 = ((PyObject *)__pyx_f_13_librootnumpy_init_array(__pyx_v_columns, __pyx_v_conv_array, __pyx_v_num_entries, __pyx_v_include_weight, __pyx_v_weight_name)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_arr = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":527
 *                          include_weight, weight_name)
 *         # exclude weight column
 *         numcol = columns.size()             # <<<<<<<<<<<<<<
 * 
 *         indices = slice(start, stop, step).indices(num_entries)
 */
    __pyx_v_numcol = __pyx_v_columns.size();

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":529
 *         numcol = columns.size()
 * 
 *         indices = slice(start, stop, step).indices(num_entries)             # <<<<<<<<<<<<<<
 *         for ientry in xrange(*indices):
 *             entry_size = bc.GetEntry(ientry)
 */
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_start);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_start);
    __Pyx_GIVEREF(__pyx_v_start);
    __Pyx_INCREF(__pyx_v_stop);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_stop);
    __Pyx_GIVEREF(__pyx_v_stop);
    __Pyx_INCREF(__pyx_v_step);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_step);
    __Pyx_GIVEREF(__pyx_v_step);
    __pyx_t_12 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PySlice_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_indices); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_num_entries); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_12);
    __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_indices = __pyx_t_12;
    __pyx_t_12 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":530
 * 
 *         indices = slice(start, stop, step).indices(num_entries)
 *         for ientry in xrange(*indices):             # <<<<<<<<<<<<<<
 *             entry_size = bc.GetEntry(ientry)
 *             handle_load(entry_size)
 */
    __pyx_t_12 = PySequence_Tuple(__pyx_v_indices); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_12 = __pyx_t_1; __Pyx_INCREF(__pyx_t_12); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 = Py_TYPE(__pyx_t_12)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_12)) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_12)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        #endif
      } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_12)) {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        #endif
      } else {
        __pyx_t_1 = __pyx_t_10(__pyx_t_12);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_ientry = __pyx_t_20;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":531
 *         indices = slice(start, stop, step).indices(num_entries)
 *         for ientry in xrange(*indices):
 *             entry_size = bc.GetEntry(ientry)             # <<<<<<<<<<<<<<
 *             handle_load(entry_size)
 *             if entry_size == 0:
 */
      __pyx_v_entry_size = __pyx_v_bc->GetEntry(__pyx_v_ientry);

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":532
 *         for ientry in xrange(*indices):
 *             entry_size = bc.GetEntry(ientry)
 *             handle_load(entry_size)             # <<<<<<<<<<<<<<
 *             if entry_size == 0:
 *                 raise IOError("read failure in current tree")
 */
      __pyx_t_1 = __pyx_f_13_librootnumpy_handle_load(__pyx_v_entry_size, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":533
 *             entry_size = bc.GetEntry(ientry)
 *             handle_load(entry_size)
 *             if entry_size == 0:             # <<<<<<<<<<<<<<
 *                 raise IOError("read failure in current tree")
 * 
 */
      __pyx_t_6 = ((__pyx_v_entry_size == 0) != 0);
      if (__pyx_t_6) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":534
 *             handle_load(entry_size)
 *             if entry_size == 0:
 *                 raise IOError("read failure in current tree")             # <<<<<<<<<<<<<<
 * 
 *             # Determine if this entry passes the selection,
 */
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      }

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":538
 *             # Determine if this entry passes the selection,
 *             # similar to the code in ROOT's tree/treeplayer/src/TTreePlayer.cxx
 *             if selection_formula != NULL:             # <<<<<<<<<<<<<<
 *                 selection_formula.GetNdata() # required, as in TTreePlayer
 *                 if selection_formula.EvalInstance(0) == 0:
 */
      __pyx_t_6 = ((__pyx_v_selection_formula != NULL) != 0);
      if (__pyx_t_6) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":539
 *             # similar to the code in ROOT's tree/treeplayer/src/TTreePlayer.cxx
 *             if selection_formula != NULL:
 *                 selection_formula.GetNdata() # required, as in TTreePlayer             # <<<<<<<<<<<<<<
 *                 if selection_formula.EvalInstance(0) == 0:
 *                     continue
 */
        __pyx_v_selection_formula->GetNdata();

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":540
 *             if selection_formula != NULL:
 *                 selection_formula.GetNdata() # required, as in TTreePlayer
 *                 if selection_formula.EvalInstance(0) == 0:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_6 = ((__pyx_v_selection_formula->EvalInstance(0) == 0.0) != 0);
        if (__pyx_t_6) {

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":541
 *                 selection_formula.GetNdata() # required, as in TTreePlayer
 *                 if selection_formula.EvalInstance(0) == 0:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *             # Copy the values into the array
 */
          goto __pyx_L18_continue;
        }
        goto __pyx_L21;
      }
      __pyx_L21:;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":544
 * 
 *             # Copy the values into the array
 *             dataptr = np.PyArray_GETPTR1(arr, num_entries_selected)             # <<<<<<<<<<<<<<
 *             for icol in xrange(numcol):
 *                 col = columns[icol]
 */
      __pyx_v_dataptr = PyArray_GETPTR1(__pyx_v_arr, __pyx_v_num_entries_selected);

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":545
 *             # Copy the values into the array
 *             dataptr = np.PyArray_GETPTR1(arr, num_entries_selected)
 *             for icol in xrange(numcol):             # <<<<<<<<<<<<<<
 *                 col = columns[icol]
 *                 conv = conv_array[icol]
 */
      __pyx_t_21 = __pyx_v_numcol;
      for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
        __pyx_v_icol = __pyx_t_22;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":546
 *             dataptr = np.PyArray_GETPTR1(arr, num_entries_selected)
 *             for icol in xrange(numcol):
 *                 col = columns[icol]             # <<<<<<<<<<<<<<
 *                 conv = conv_array[icol]
 *                 nb = conv.write(col, dataptr)
 */
        __pyx_v_col = (__pyx_v_columns[__pyx_v_icol]);

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":547
 *             for icol in xrange(numcol):
 *                 col = columns[icol]
 *                 conv = conv_array[icol]             # <<<<<<<<<<<<<<
 *                 nb = conv.write(col, dataptr)
 *                 # poorman pointer magic
 */
        __pyx_v_conv = (__pyx_v_conv_array[__pyx_v_icol]);

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":548
 *                 col = columns[icol]
 *                 conv = conv_array[icol]
 *                 nb = conv.write(col, dataptr)             # <<<<<<<<<<<<<<
 *                 # poorman pointer magic
 *                 dataptr = shift(dataptr, nb)
 */
        __pyx_v_nb = __pyx_v_conv->write(__pyx_v_col, __pyx_v_dataptr);

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":550
 *                 nb = conv.write(col, dataptr)
 *                 # poorman pointer magic
 *                 dataptr = shift(dataptr, nb)             # <<<<<<<<<<<<<<
 *             if include_weight:
 *                 (<double*> dataptr)[0] = bc.GetWeight()
 */
        __pyx_v_dataptr = shift(__pyx_v_dataptr, __pyx_v_nb);
      }

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":551
 *                 # poorman pointer magic
 *                 dataptr = shift(dataptr, nb)
 *             if include_weight:             # <<<<<<<<<<<<<<
 *                 (<double*> dataptr)[0] = bc.GetWeight()
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_include_weight); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      if (__pyx_t_6) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":552
 *                 dataptr = shift(dataptr, nb)
 *             if include_weight:
 *                 (<double*> dataptr)[0] = bc.GetWeight()             # <<<<<<<<<<<<<<
 * 
 *             # Increment number of selected entries last
 */
        (((double *)__pyx_v_dataptr)[0]) = __pyx_v_bc->GetWeight();
        goto __pyx_L25;
      }
      __pyx_L25:;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":555
 * 
 *             # Increment number of selected entries last
 *             num_entries_selected += 1             # <<<<<<<<<<<<<<
 *     finally:
 *         del bc
 */
      __pyx_v_num_entries_selected = (__pyx_v_num_entries_selected + 1);
      __pyx_L18_continue:;
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":557
 *             num_entries_selected += 1
 *     finally:
 *         del bc             # <<<<<<<<<<<<<<
 * 
 *     # If we selected fewer than num_entries entries then shrink the array
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_v_bc;
      goto __pyx_L5;
    }
    /*exception exit:*/{
      __pyx_L4_error:;
      __pyx_t_25 = 0; __pyx_t_26 = 0; __pyx_t_27 = 0; __pyx_t_28 = 0; __pyx_t_29 = 0; __pyx_t_30 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_28, &__pyx_t_29, &__pyx_t_30);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_25, &__pyx_t_26, &__pyx_t_27) < 0)) __Pyx_ErrFetch(&__pyx_t_25, &__pyx_t_26, &__pyx_t_27);
      __Pyx_XGOTREF(__pyx_t_25);
      __Pyx_XGOTREF(__pyx_t_26);
      __Pyx_XGOTREF(__pyx_t_27);
      __Pyx_XGOTREF(__pyx_t_28);
      __Pyx_XGOTREF(__pyx_t_29);
      __Pyx_XGOTREF(__pyx_t_30);
      __pyx_t_20 = __pyx_lineno; __pyx_t_23 = __pyx_clineno; __pyx_t_24 = __pyx_filename;
      {
        delete __pyx_v_bc;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_28);
        __Pyx_XGIVEREF(__pyx_t_29);
        __Pyx_XGIVEREF(__pyx_t_30);
        __Pyx_ExceptionReset(__pyx_t_28, __pyx_t_29, __pyx_t_30);
      }
      __Pyx_XGIVEREF(__pyx_t_25);
      __Pyx_XGIVEREF(__pyx_t_26);
      __Pyx_XGIVEREF(__pyx_t_27);
      __Pyx_ErrRestore(__pyx_t_25, __pyx_t_26, __pyx_t_27);
      __pyx_t_25 = 0; __pyx_t_26 = 0; __pyx_t_27 = 0; __pyx_t_28 = 0; __pyx_t_29 = 0; __pyx_t_30 = 0;
      __pyx_lineno = __pyx_t_20; __pyx_clineno = __pyx_t_23; __pyx_filename = __pyx_t_24;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":560
 * 
 *     # If we selected fewer than num_entries entries then shrink the array
 *     if num_entries_selected < num_entries:             # <<<<<<<<<<<<<<
 *         arr.resize(num_entries_selected)
 * 
 */
  __pyx_t_6 = ((__pyx_v_num_entries_selected < __pyx_v_num_entries) != 0);
  if (__pyx_t_6) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":561
 *     # If we selected fewer than num_entries entries then shrink the array
 *     if num_entries_selected < num_entries:
 *         arr.resize(num_entries_selected)             # <<<<<<<<<<<<<<
 * 
 *     return arr
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_arr), __pyx_n_s_resize); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_num_entries_selected); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L28;
  }
  __pyx_L28:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":563
 *         arr.resize(num_entries_selected)
 * 
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":439
 * 
 * 
 * cdef object tree2array(TTree* tree, branches, selection,             # <<<<<<<<<<<<<<
 *                        start, stop, step,
 *                        include_weight, weight_name):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("_librootnumpy.tree2array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XDECREF(__pyx_v_structure);
  __Pyx_XDECREF(__pyx_v_branch);
  __Pyx_XDECREF(__pyx_v_leaves);
  __Pyx_XDECREF(__pyx_v_shortname);
  __Pyx_XDECREF(__pyx_v_leaf);
  __Pyx_XDECREF(__pyx_v_ltype);
  __Pyx_XDECREF(__pyx_v_colname);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XDECREF(__pyx_v_branches);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":566
 * 
 * 
 * def root2array_fromFname(fnames, treename, branches,             # <<<<<<<<<<<<<<
 *                          selection, start, stop, step,
 *                          include_weight, weight_name):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_7root2array_fromFname(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_7root2array_fromFname = {__Pyx_NAMESTR("root2array_fromFname"), (PyCFunction)__pyx_pw_13_librootnumpy_7root2array_fromFname, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_7root2array_fromFname(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fnames = 0;
  PyObject *__pyx_v_treename = 0;
  PyObject *__pyx_v_branches = 0;
  PyObject *__pyx_v_selection = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  PyObject *__pyx_v_step = 0;
  PyObject *__pyx_v_include_weight = 0;
  PyObject *__pyx_v_weight_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("root2array_fromFname (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fnames,&__pyx_n_s_treename,&__pyx_n_s_branches,&__pyx_n_s_selection,&__pyx_n_s_start,&__pyx_n_s_stop,&__pyx_n_s_step,&__pyx_n_s_include_weight,&__pyx_n_s_weight_name,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fnames)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_treename)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_branches)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_selection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 3); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 4); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 5); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 6); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_include_weight)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 7); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weight_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 8); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "root2array_fromFname") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_fnames = values[0];
    __pyx_v_treename = values[1];
    __pyx_v_branches = values[2];
    __pyx_v_selection = values[3];
    __pyx_v_start = values[4];
    __pyx_v_stop = values[5];
    __pyx_v_step = values[6];
    __pyx_v_include_weight = values[7];
    __pyx_v_weight_name = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.root2array_fromFname", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_6root2array_fromFname(__pyx_self, __pyx_v_fnames, __pyx_v_treename, __pyx_v_branches, __pyx_v_selection, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_include_weight, __pyx_v_weight_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_6root2array_fromFname(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnames, PyObject *__pyx_v_treename, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, PyObject *__pyx_v_include_weight, PyObject *__pyx_v_weight_name) {
  TChain *__pyx_v_ttree;
  PyObject *__pyx_v_fn = NULL;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  char const *__pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("root2array_fromFname", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":569
 *                          selection, start, stop, step,
 *                          include_weight, weight_name):
 *     cdef TChain* ttree = NULL             # <<<<<<<<<<<<<<
 *     try:
 *         ttree = new TChain(treename)
 */
  __pyx_v_ttree = NULL;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":570
 *                          include_weight, weight_name):
 *     cdef TChain* ttree = NULL
 *     try:             # <<<<<<<<<<<<<<
 *         ttree = new TChain(treename)
 *         for fn in fnames:
 */
  /*try:*/ {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":571
 *     cdef TChain* ttree = NULL
 *     try:
 *         ttree = new TChain(treename)             # <<<<<<<<<<<<<<
 *         for fn in fnames:
 *             if ttree.Add(fn, -1) == 0:
 */
    __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_treename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __pyx_v_ttree = new TChain(__pyx_t_1);

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":572
 *     try:
 *         ttree = new TChain(treename)
 *         for fn in fnames:             # <<<<<<<<<<<<<<
 *             if ttree.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 */
    if (PyList_CheckExact(__pyx_v_fnames) || PyTuple_CheckExact(__pyx_v_fnames)) {
      __pyx_t_2 = __pyx_v_fnames; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_fnames); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        #endif
      } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        #endif
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_fn, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":573
 *         ttree = new TChain(treename)
 *         for fn in fnames:
 *             if ttree.Add(fn, -1) == 0:             # <<<<<<<<<<<<<<
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 *                     treename, fn))
 */
      __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_fn); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __pyx_t_6 = ((__pyx_v_ttree->Add(__pyx_t_1, -1) == 0) != 0);
      if (__pyx_t_6) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":574
 *         for fn in fnames:
 *             if ttree.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(             # <<<<<<<<<<<<<<
 *                     treename, fn))
 *         ret = tree2array(
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_unable_to_access_tree_0_in_1, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_5);

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":575
 *             if ttree.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 *                     treename, fn))             # <<<<<<<<<<<<<<
 *         ret = tree2array(
 *             <TTree*> ttree, branches,
 */
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_v_treename);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_treename);
        __Pyx_GIVEREF(__pyx_v_treename);
        __Pyx_INCREF(__pyx_v_fn);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_fn);
        __Pyx_GIVEREF(__pyx_v_fn);

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":574
 *         for fn in fnames:
 *             if ttree.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(             # <<<<<<<<<<<<<<
 *                     treename, fn))
 *         ret = tree2array(
 */
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":576
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 *                     treename, fn))
 *         ret = tree2array(             # <<<<<<<<<<<<<<
 *             <TTree*> ttree, branches,
 *             selection, start, stop, step,
 */
    __pyx_t_2 = __pyx_f_13_librootnumpy_tree2array(((TTree *)__pyx_v_ttree), __pyx_v_branches, __pyx_v_selection, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_include_weight, __pyx_v_weight_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_ret = __pyx_t_2;
    __pyx_t_2 = 0;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":581
 *             include_weight, weight_name)
 *     finally:
 *         del ttree             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_v_ttree;
      goto __pyx_L5;
    }
    /*exception exit:*/{
      __pyx_L4_error:;
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14) < 0)) __Pyx_ErrFetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __pyx_t_9 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_11 = __pyx_filename;
      {
        delete __pyx_v_ttree;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      }
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ErrRestore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
      __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_11;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":582
 *     finally:
 *         del ttree
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":566
 * 
 * 
 * def root2array_fromFname(fnames, treename, branches,             # <<<<<<<<<<<<<<
 *                          selection, start, stop, step,
 *                          include_weight, weight_name):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("_librootnumpy.root2array_fromFname", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fn);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":585
 * 
 * 
 * def root2array_fromCObj(tree, branches, selection,             # <<<<<<<<<<<<<<
 *                         start, stop, step,
 *                         include_weight, weight_name):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_9root2array_fromCObj(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_9root2array_fromCObj = {__Pyx_NAMESTR("root2array_fromCObj"), (PyCFunction)__pyx_pw_13_librootnumpy_9root2array_fromCObj, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_9root2array_fromCObj(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tree = 0;
  PyObject *__pyx_v_branches = 0;
  PyObject *__pyx_v_selection = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  PyObject *__pyx_v_step = 0;
  PyObject *__pyx_v_include_weight = 0;
  PyObject *__pyx_v_weight_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("root2array_fromCObj (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree,&__pyx_n_s_branches,&__pyx_n_s_selection,&__pyx_n_s_start,&__pyx_n_s_stop,&__pyx_n_s_step,&__pyx_n_s_include_weight,&__pyx_n_s_weight_name,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_branches)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_selection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 3); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 4); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 5); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_include_weight)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 6); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weight_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 7); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "root2array_fromCObj") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_tree = values[0];
    __pyx_v_branches = values[1];
    __pyx_v_selection = values[2];
    __pyx_v_start = values[3];
    __pyx_v_stop = values[4];
    __pyx_v_step = values[5];
    __pyx_v_include_weight = values[6];
    __pyx_v_weight_name = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.root2array_fromCObj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_8root2array_fromCObj(__pyx_self, __pyx_v_tree, __pyx_v_branches, __pyx_v_selection, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_include_weight, __pyx_v_weight_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_8root2array_fromCObj(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tree, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, PyObject *__pyx_v_include_weight, PyObject *__pyx_v_weight_name) {
  TTree *__pyx_v_chain;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  void *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("root2array_fromCObj", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":591
 *     # provided here for convenience only
 *     # typecheck should be implemented by the wrapper
 *     if not PyCObject_Check(tree):             # <<<<<<<<<<<<<<
 *         raise ValueError("tree must be PyCObject")
 *     cdef TTree* chain = <TTree*> PyCObject_AsVoidPtr(tree)
 */
  __pyx_t_1 = ((!(PyCObject_Check(__pyx_v_tree) != 0)) != 0);
  if (__pyx_t_1) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":592
 *     # typecheck should be implemented by the wrapper
 *     if not PyCObject_Check(tree):
 *         raise ValueError("tree must be PyCObject")             # <<<<<<<<<<<<<<
 *     cdef TTree* chain = <TTree*> PyCObject_AsVoidPtr(tree)
 *     return tree2array(
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":593
 *     if not PyCObject_Check(tree):
 *         raise ValueError("tree must be PyCObject")
 *     cdef TTree* chain = <TTree*> PyCObject_AsVoidPtr(tree)             # <<<<<<<<<<<<<<
 *     return tree2array(
 *             chain, branches, selection,
 */
  __pyx_t_3 = PyCObject_AsVoidPtr(__pyx_v_tree); if (unlikely(__pyx_t_3 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_chain = ((TTree *)__pyx_t_3);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":594
 *         raise ValueError("tree must be PyCObject")
 *     cdef TTree* chain = <TTree*> PyCObject_AsVoidPtr(tree)
 *     return tree2array(             # <<<<<<<<<<<<<<
 *             chain, branches, selection,
 *             start, stop, step,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":597
 *             chain, branches, selection,
 *             start, stop, step,
 *             include_weight, weight_name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_f_13_librootnumpy_tree2array(__pyx_v_chain, __pyx_v_branches, __pyx_v_selection, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_include_weight, __pyx_v_weight_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":585
 * 
 * 
 * def root2array_fromCObj(tree, branches, selection,             # <<<<<<<<<<<<<<
 *                         start, stop, step,
 *                         include_weight, weight_name):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_librootnumpy.root2array_fromCObj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":605
 * 
 * cdef cppclass NP2CConverter:
 *     void fill_from(void* source):             # <<<<<<<<<<<<<<
 *         pass
 *     __dealloc__():
 */

void __pyx_t_13_librootnumpy_NP2CConverter::fill_from(CYTHON_UNUSED void *__pyx_v_source) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_from", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":607
 *     void fill_from(void* source):
 *         pass
 *     __dealloc__():             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

 __pyx_t_13_librootnumpy_NP2CConverter::~__pyx_t_13_librootnumpy_NP2CConverter(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<del>", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":619
 *     # don't use copy constructor of this one since it will screw up
 *     # tree binding and/or ownership of value
 *     __init__(TTree* tree, string name, string roottype, int nbytes):             # <<<<<<<<<<<<<<
 *         cdef string leaflist
 *         this.nbytes = nbytes
 */

 __pyx_t_13_librootnumpy_ScalarNP2CConverter::__pyx_t_13_librootnumpy_ScalarNP2CConverter(TTree *__pyx_v_tree, std::string __pyx_v_name, std::string __pyx_v_roottype, int __pyx_v_nbytes) {
  std::string __pyx_v_leaflist;
  PyObject *__pyx_v_existing_type = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":621
 *     __init__(TTree* tree, string name, string roottype, int nbytes):
 *         cdef string leaflist
 *         this.nbytes = nbytes             # <<<<<<<<<<<<<<
 *         this.roottype = roottype
 *         this.name = name
 */
  this->nbytes = __pyx_v_nbytes;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":622
 *         cdef string leaflist
 *         this.nbytes = nbytes
 *         this.roottype = roottype             # <<<<<<<<<<<<<<
 *         this.name = name
 *         this.value = malloc(nbytes)
 */
  this->roottype = __pyx_v_roottype;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":623
 *         this.nbytes = nbytes
 *         this.roottype = roottype
 *         this.name = name             # <<<<<<<<<<<<<<
 *         this.value = malloc(nbytes)
 *         this.branch = tree.GetBranch(this.name.c_str())
 */
  this->name = __pyx_v_name;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":624
 *         this.roottype = roottype
 *         this.name = name
 *         this.value = malloc(nbytes)             # <<<<<<<<<<<<<<
 *         this.branch = tree.GetBranch(this.name.c_str())
 *         if this.branch == NULL:
 */
  this->value = malloc(__pyx_v_nbytes);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":625
 *         this.name = name
 *         this.value = malloc(nbytes)
 *         this.branch = tree.GetBranch(this.name.c_str())             # <<<<<<<<<<<<<<
 *         if this.branch == NULL:
 *             leaflist = this.name + '/' + this.roottype
 */
  this->branch = __pyx_v_tree->GetBranch(this->name.c_str());

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":626
 *         this.value = malloc(nbytes)
 *         this.branch = tree.GetBranch(this.name.c_str())
 *         if this.branch == NULL:             # <<<<<<<<<<<<<<
 *             leaflist = this.name + '/' + this.roottype
 *             this.branch = tree.Branch(this.name.c_str(), this.value, leaflist.c_str())
 */
  __pyx_t_1 = ((this->branch == NULL) != 0);
  if (__pyx_t_1) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":627
 *         this.branch = tree.GetBranch(this.name.c_str())
 *         if this.branch == NULL:
 *             leaflist = this.name + '/' + this.roottype             # <<<<<<<<<<<<<<
 *             this.branch = tree.Branch(this.name.c_str(), this.value, leaflist.c_str())
 *         else:
 */
    __pyx_t_2 = __pyx_convert_string_to_py_(this->name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__13); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_convert_string_to_py_(this->roottype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_convert_string_from_py_(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_leaflist = __pyx_t_5;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":628
 *         if this.branch == NULL:
 *             leaflist = this.name + '/' + this.roottype
 *             this.branch = tree.Branch(this.name.c_str(), this.value, leaflist.c_str())             # <<<<<<<<<<<<<<
 *         else:
 *             # check type compatibility of existing branch
 */
    this->branch = __pyx_v_tree->Branch(this->name.c_str(), this->value, __pyx_v_leaflist.c_str());
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":631
 *         else:
 *             # check type compatibility of existing branch
 *             existing_type = this.branch.GetTitle().rpartition('/')[-1]             # <<<<<<<<<<<<<<
 *             if str(roottype) != existing_type:
 *                 raise TypeError(
 */
    __pyx_t_4 = __Pyx_PyBytes_FromString(this->branch->GetTitle()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_rpartition); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, -1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_existing_type = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":632
 *             # check type compatibility of existing branch
 *             existing_type = this.branch.GetTitle().rpartition('/')[-1]
 *             if str(roottype) != existing_type:             # <<<<<<<<<<<<<<
 *                 raise TypeError(
 *                     "field `%s` of type `%s` is not compatible "
 */
    __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_roottype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_v_existing_type, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":636
 *                     "field `%s` of type `%s` is not compatible "
 *                     "with existing branch of type `%s`" % (
 *                         name, roottype, existing_type))             # <<<<<<<<<<<<<<
 *             this.branch.SetAddress(this.value)
 *         this.branch.SetStatus(1)
 */
      __pyx_t_4 = __pyx_convert_string_to_py_(__pyx_v_name); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_roottype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_existing_type);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_existing_type);
      __Pyx_GIVEREF(__pyx_v_existing_type);
      __pyx_t_4 = 0;
      __pyx_t_2 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":635
 *                 raise TypeError(
 *                     "field `%s` of type `%s` is not compatible "
 *                     "with existing branch of type `%s`" % (             # <<<<<<<<<<<<<<
 *                         name, roottype, existing_type))
 *             this.branch.SetAddress(this.value)
 */
      __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_field_s_of_type_s_is_not_compati, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":633
 *             existing_type = this.branch.GetTitle().rpartition('/')[-1]
 *             if str(roottype) != existing_type:
 *                 raise TypeError(             # <<<<<<<<<<<<<<
 *                     "field `%s` of type `%s` is not compatible "
 *                     "with existing branch of type `%s`" % (
 */
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":637
 *                     "with existing branch of type `%s`" % (
 *                         name, roottype, existing_type))
 *             this.branch.SetAddress(this.value)             # <<<<<<<<<<<<<<
 *         this.branch.SetStatus(1)
 * 
 */
    this->branch->SetAddress(this->value);
  }
  __pyx_L3:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":638
 *                         name, roottype, existing_type))
 *             this.branch.SetAddress(this.value)
 *         this.branch.SetStatus(1)             # <<<<<<<<<<<<<<
 * 
 *     __del__(self): # does this do what I want?
 */
  this->branch->SetStatus(1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":619
 *     # don't use copy constructor of this one since it will screw up
 *     # tree binding and/or ownership of value
 *     __init__(TTree* tree, string name, string roottype, int nbytes):             # <<<<<<<<<<<<<<
 *         cdef string leaflist
 *         this.nbytes = nbytes
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("ScalarNP2CConverter.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_existing_type);
  __Pyx_RefNannyFinishContext();
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":640
 *         this.branch.SetStatus(1)
 * 
 *     __del__(self): # does this do what I want?             # <<<<<<<<<<<<<<
 *         free(this.value)
 * 
 */

PyObject *__pyx_t_13_librootnumpy_ScalarNP2CConverter::__del__(CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":641
 * 
 *     __del__(self): # does this do what I want?
 *         free(this.value)             # <<<<<<<<<<<<<<
 * 
 *     void fill_from(void* source):
 */
  free(this->value);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":640
 *         this.branch.SetStatus(1)
 * 
 *     __del__(self): # does this do what I want?             # <<<<<<<<<<<<<<
 *         free(this.value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":643
 *         free(this.value)
 * 
 *     void fill_from(void* source):             # <<<<<<<<<<<<<<
 *         memcpy(this.value, source, this.nbytes)
 *         this.branch.Fill()
 */

void __pyx_t_13_librootnumpy_ScalarNP2CConverter::fill_from(void *__pyx_v_source) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_from", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":644
 * 
 *     void fill_from(void* source):
 *         memcpy(this.value, source, this.nbytes)             # <<<<<<<<<<<<<<
 *         this.branch.Fill()
 * 
 */
  memcpy(this->value, __pyx_v_source, this->nbytes);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":645
 *     void fill_from(void* source):
 *         memcpy(this.value, source, this.nbytes)
 *         this.branch.Fill()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  this->branch->Fill();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":643
 *         free(this.value)
 * 
 *     void fill_from(void* source):             # <<<<<<<<<<<<<<
 *         memcpy(this.value, source, this.nbytes)
 *         this.branch.Fill()
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":648
 * 
 * 
 * cdef NP2CConverter* find_np2c_converter(TTree* tree, name, dtype, peekvalue=None):             # <<<<<<<<<<<<<<
 *     # TODO:
 *     # np.float16: #this needs special treatment root doesn't have 16 bit float?
 */

static __pyx_t_13_librootnumpy_NP2CConverter *__pyx_f_13_librootnumpy_find_np2c_converter(TTree *__pyx_v_tree, PyObject *__pyx_v_name, PyObject *__pyx_v_dtype, struct __pyx_opt_args_13_librootnumpy_find_np2c_converter *__pyx_optional_args) {
  PyObject *__pyx_v_nbytes = NULL;
  PyObject *__pyx_v_roottype = NULL;
  __pyx_t_13_librootnumpy_NP2CConverter *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  std::string __pyx_t_8;
  std::string __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_np2c_converter", 0);
  if (__pyx_optional_args) {
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":653
 *     # np.object #this too should detect basic numpy array
 *     # How to detect fixed length array?
 *     if dtype in TYPES_NUMPY2ROOT:             # <<<<<<<<<<<<<<
 *         nbytes, roottype = TYPES_NUMPY2ROOT[dtype]
 *         return new ScalarNP2CConverter(tree, name, roottype, nbytes)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES_NUMPY2ROOT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_v_dtype, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":654
 *     # How to detect fixed length array?
 *     if dtype in TYPES_NUMPY2ROOT:
 *         nbytes, roottype = TYPES_NUMPY2ROOT[dtype]             # <<<<<<<<<<<<<<
 *         return new ScalarNP2CConverter(tree, name, roottype, nbytes)
 *     elif dtype == np.dtype(np.object):
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES_NUMPY2ROOT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_GetItem(__pyx_t_1, __pyx_v_dtype); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_1)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_nbytes = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_v_roottype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":655
 *     if dtype in TYPES_NUMPY2ROOT:
 *         nbytes, roottype = TYPES_NUMPY2ROOT[dtype]
 *         return new ScalarNP2CConverter(tree, name, roottype, nbytes)             # <<<<<<<<<<<<<<
 *     elif dtype == np.dtype(np.object):
 *         warnings.warn("Converter for %r not implemented yet (skipping)" % dtype)
 */
    __pyx_t_8 = __pyx_convert_string_from_py_(__pyx_v_name); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_9 = __pyx_convert_string_from_py_(__pyx_v_roottype); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_nbytes); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = new __pyx_t_13_librootnumpy_ScalarNP2CConverter(__pyx_v_tree, __pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L0;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":656
 *         nbytes, roottype = TYPES_NUMPY2ROOT[dtype]
 *         return new ScalarNP2CConverter(tree, name, roottype, nbytes)
 *     elif dtype == np.dtype(np.object):             # <<<<<<<<<<<<<<
 *         warnings.warn("Converter for %r not implemented yet (skipping)" % dtype)
 *         return NULL
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_object); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_dtype, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_3) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":657
 *         return new ScalarNP2CConverter(tree, name, roottype, nbytes)
 *     elif dtype == np.dtype(np.object):
 *         warnings.warn("Converter for %r not implemented yet (skipping)" % dtype)             # <<<<<<<<<<<<<<
 *         return NULL
 *         #lets peek
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warn); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Converter_for_r_not_implemented, __pyx_v_dtype); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":658
 *     elif dtype == np.dtype(np.object):
 *         warnings.warn("Converter for %r not implemented yet (skipping)" % dtype)
 *         return NULL             # <<<<<<<<<<<<<<
 *         #lets peek
 *         """
 */
    __pyx_r = NULL;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":667
 *         """
 *     else:
 *         warnings.warn("Converter for %r not implemented yet (skipping)" % dtype)             # <<<<<<<<<<<<<<
 *     return NULL
 * 
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warn); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Converter_for_r_not_implemented, __pyx_v_dtype); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":668
 *     else:
 *         warnings.warn("Converter for %r not implemented yet (skipping)" % dtype)
 *     return NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = NULL;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":648
 * 
 * 
 * cdef NP2CConverter* find_np2c_converter(TTree* tree, name, dtype, peekvalue=None):             # <<<<<<<<<<<<<<
 *     # TODO:
 *     # np.float16: #this needs special treatment root doesn't have 16 bit float?
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("_librootnumpy.find_np2c_converter", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nbytes);
  __Pyx_XDECREF(__pyx_v_roottype);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":671
 * 
 * 
 * cdef TTree* array2tree(np.ndarray arr, name='tree', TTree* tree=NULL) except *:             # <<<<<<<<<<<<<<
 *     # hmm how do I catch all python exception
 *     # and clean up before throwing ?
 */

static TTree *__pyx_f_13_librootnumpy_array2tree(PyArrayObject *__pyx_v_arr, struct __pyx_opt_args_13_librootnumpy_array2tree *__pyx_optional_args) {
  PyObject *__pyx_v_name = ((PyObject *)__pyx_n_s_tree);
  TTree *__pyx_v_tree = ((TTree *)NULL);
  std::vector<__pyx_t_13_librootnumpy_NP2CConverter *> __pyx_v_conv_array;
  std::vector<int> __pyx_v_posarray;
  std::vector<int> __pyx_v_roffsetarray;
  unsigned int __pyx_v_icv;
  int __pyx_v_icol;
  long __pyx_v_arr_len;
  long __pyx_v_idata;
  unsigned long __pyx_v_pos_len;
  unsigned long __pyx_v_ipos;
  void *__pyx_v_source;
  void *__pyx_v_thisrow;
  __pyx_t_13_librootnumpy_NP2CConverter *__pyx_v_tmpcv;
  PyObject *__pyx_v_fieldnames = NULL;
  PyObject *__pyx_v_fields = NULL;
  PyObject *__pyx_v_fieldname = NULL;
  PyObject *__pyx_v_dtype = NULL;
  PyObject *__pyx_v_roffset = NULL;
  __pyx_t_13_librootnumpy_NP2CConverter *__pyx_v_cvt;
  TTree *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  const char *__pyx_t_5;
  const char *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  __pyx_t_13_librootnumpy_NP2CConverter *__pyx_t_13;
  struct __pyx_opt_args_13_librootnumpy_find_np2c_converter __pyx_t_14;
  int __pyx_t_15;
  long __pyx_t_16;
  unsigned long __pyx_t_17;
  size_t __pyx_t_18;
  int __pyx_t_19;
  char const *__pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array2tree", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_name = __pyx_optional_args->name;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_tree = __pyx_optional_args->tree;
      }
    }
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":678
 *     cdef vector[int] roffsetarray
 *     cdef auto_ptr[NP2CConverter] tmp
 *     cdef unsigned int icv = 0             # <<<<<<<<<<<<<<
 *     cdef int icol
 *     cdef long arr_len = arr.shape[0]
 */
  __pyx_v_icv = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":680
 *     cdef unsigned int icv = 0
 *     cdef int icol
 *     cdef long arr_len = arr.shape[0]             # <<<<<<<<<<<<<<
 *     cdef long idata
 *     cdef unsigned long pos_len = 0
 */
  __pyx_v_arr_len = (__pyx_v_arr->dimensions[0]);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":682
 *     cdef long arr_len = arr.shape[0]
 *     cdef long idata
 *     cdef unsigned long pos_len = 0             # <<<<<<<<<<<<<<
 *     cdef unsigned long ipos
 *     cdef void* source = NULL
 */
  __pyx_v_pos_len = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":684
 *     cdef unsigned long pos_len = 0
 *     cdef unsigned long ipos
 *     cdef void* source = NULL             # <<<<<<<<<<<<<<
 *     cdef void* thisrow = NULL
 *     cdef NP2CConverter* tmpcv
 */
  __pyx_v_source = NULL;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":685
 *     cdef unsigned long ipos
 *     cdef void* source = NULL
 *     cdef void* thisrow = NULL             # <<<<<<<<<<<<<<
 *     cdef NP2CConverter* tmpcv
 * 
 */
  __pyx_v_thisrow = NULL;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":688
 *     cdef NP2CConverter* tmpcv
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if tree == NULL:
 *             tree = new TTree(name, name)
 */
  /*try:*/ {
    {
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":689
 * 
 *     try:
 *         if tree == NULL:             # <<<<<<<<<<<<<<
 *             tree = new TTree(name, name)
 * 
 */
        __pyx_t_4 = ((__pyx_v_tree == NULL) != 0);
        if (__pyx_t_4) {

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":690
 *     try:
 *         if tree == NULL:
 *             tree = new TTree(name, name)             # <<<<<<<<<<<<<<
 * 
 *         fieldnames = arr.dtype.names
 */
          __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __pyx_v_tree = new TTree(__pyx_t_5, __pyx_t_6);
          goto __pyx_L14;
        }
        __pyx_L14:;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":692
 *             tree = new TTree(name, name)
 * 
 *         fieldnames = arr.dtype.names             # <<<<<<<<<<<<<<
 *         fields = arr.dtype.fields
 * 
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_arr), __pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_names); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_fieldnames = __pyx_t_8;
        __pyx_t_8 = 0;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":693
 * 
 *         fieldnames = arr.dtype.names
 *         fields = arr.dtype.fields             # <<<<<<<<<<<<<<
 * 
 *         # figure out the structure
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_arr), __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_fields); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_v_fields = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":696
 * 
 *         # figure out the structure
 *         for icol from 0 <= icol < len(fieldnames):             # <<<<<<<<<<<<<<
 *             fieldname = fieldnames[icol]
 *             # roffset is an offset of particular field in each record
 */
        __pyx_t_9 = PyObject_Length(__pyx_v_fieldnames); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        for (__pyx_v_icol = 0; __pyx_v_icol < __pyx_t_9; __pyx_v_icol++) {

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":697
 *         # figure out the structure
 *         for icol from 0 <= icol < len(fieldnames):
 *             fieldname = fieldnames[icol]             # <<<<<<<<<<<<<<
 *             # roffset is an offset of particular field in each record
 *             dtype, roffset = fields[fieldname]
 */
          __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_fieldnames, __pyx_v_icol, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_XDECREF_SET(__pyx_v_fieldname, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":699
 *             fieldname = fieldnames[icol]
 *             # roffset is an offset of particular field in each record
 *             dtype, roffset = fields[fieldname]             # <<<<<<<<<<<<<<
 *             cvt = find_np2c_converter(tree, fieldname, dtype, arr[0][fieldname])
 *             if cvt is not NULL:
 */
          __pyx_t_7 = PyObject_GetItem(__pyx_v_fields, __pyx_v_fieldname); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_7);
          if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
            PyObject* sequence = __pyx_t_7;
            #if CYTHON_COMPILING_IN_CPYTHON
            Py_ssize_t size = Py_SIZE(sequence);
            #else
            Py_ssize_t size = PySequence_Size(sequence);
            #endif
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              {__pyx_filename = __pyx_f[1]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            }
            #if CYTHON_COMPILING_IN_CPYTHON
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            #else
            __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_10);
            #endif
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_11 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
            index = 0; __pyx_t_8 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_8)) goto __pyx_L17_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_8);
            index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L17_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_10);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __pyx_t_12 = NULL;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            goto __pyx_L18_unpacking_done;
            __pyx_L17_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_12 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            {__pyx_filename = __pyx_f[1]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __pyx_L18_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_dtype, __pyx_t_8);
          __pyx_t_8 = 0;
          __Pyx_XDECREF_SET(__pyx_v_roffset, __pyx_t_10);
          __pyx_t_10 = 0;

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":700
 *             # roffset is an offset of particular field in each record
 *             dtype, roffset = fields[fieldname]
 *             cvt = find_np2c_converter(tree, fieldname, dtype, arr[0][fieldname])             # <<<<<<<<<<<<<<
 *             if cvt is not NULL:
 *                 roffsetarray.push_back(roffset)
 */
          __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_arr), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_10 = PyObject_GetItem(__pyx_t_7, __pyx_v_fieldname); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_14.__pyx_n = 1;
          __pyx_t_14.peekvalue = __pyx_t_10;
          __pyx_t_13 = __pyx_f_13_librootnumpy_find_np2c_converter(__pyx_v_tree, __pyx_v_fieldname, __pyx_v_dtype, &__pyx_t_14); 
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_v_cvt = __pyx_t_13;

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":701
 *             dtype, roffset = fields[fieldname]
 *             cvt = find_np2c_converter(tree, fieldname, dtype, arr[0][fieldname])
 *             if cvt is not NULL:             # <<<<<<<<<<<<<<
 *                 roffsetarray.push_back(roffset)
 *                 conv_array.push_back(cvt)
 */
          __pyx_t_4 = ((__pyx_v_cvt != NULL) != 0);
          if (__pyx_t_4) {

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":702
 *             cvt = find_np2c_converter(tree, fieldname, dtype, arr[0][fieldname])
 *             if cvt is not NULL:
 *                 roffsetarray.push_back(roffset)             # <<<<<<<<<<<<<<
 *                 conv_array.push_back(cvt)
 *                 posarray.push_back(icol)
 */
            __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_roffset); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __pyx_v_roffsetarray.push_back(__pyx_t_15);

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":703
 *             if cvt is not NULL:
 *                 roffsetarray.push_back(roffset)
 *                 conv_array.push_back(cvt)             # <<<<<<<<<<<<<<
 *                 posarray.push_back(icol)
 * 
 */
            __pyx_v_conv_array.push_back(__pyx_v_cvt);

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":704
 *                 roffsetarray.push_back(roffset)
 *                 conv_array.push_back(cvt)
 *                 posarray.push_back(icol)             # <<<<<<<<<<<<<<
 * 
 *         # fill in data
 */
            __pyx_v_posarray.push_back(__pyx_v_icol);
            goto __pyx_L19;
          }
          __pyx_L19:;
        }

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":707
 * 
 *         # fill in data
 *         pos_len = posarray.size()             # <<<<<<<<<<<<<<
 *         for idata from 0 <= idata < arr_len:
 *             thisrow = np.PyArray_GETPTR1(arr, idata)
 */
        __pyx_v_pos_len = __pyx_v_posarray.size();

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":708
 *         # fill in data
 *         pos_len = posarray.size()
 *         for idata from 0 <= idata < arr_len:             # <<<<<<<<<<<<<<
 *             thisrow = np.PyArray_GETPTR1(arr, idata)
 *             for ipos from 0 <= ipos < pos_len:
 */
        __pyx_t_16 = __pyx_v_arr_len;
        for (__pyx_v_idata = 0; __pyx_v_idata < __pyx_t_16; __pyx_v_idata++) {

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":709
 *         pos_len = posarray.size()
 *         for idata from 0 <= idata < arr_len:
 *             thisrow = np.PyArray_GETPTR1(arr, idata)             # <<<<<<<<<<<<<<
 *             for ipos from 0 <= ipos < pos_len:
 *                 roffset = roffsetarray[ipos]
 */
          __pyx_v_thisrow = PyArray_GETPTR1(__pyx_v_arr, __pyx_v_idata);

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":710
 *         for idata from 0 <= idata < arr_len:
 *             thisrow = np.PyArray_GETPTR1(arr, idata)
 *             for ipos from 0 <= ipos < pos_len:             # <<<<<<<<<<<<<<
 *                 roffset = roffsetarray[ipos]
 *                 source = shift(thisrow, roffset)
 */
          __pyx_t_17 = __pyx_v_pos_len;
          for (__pyx_v_ipos = 0; __pyx_v_ipos < __pyx_t_17; __pyx_v_ipos++) {

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":711
 *             thisrow = np.PyArray_GETPTR1(arr, idata)
 *             for ipos from 0 <= ipos < pos_len:
 *                 roffset = roffsetarray[ipos]             # <<<<<<<<<<<<<<
 *                 source = shift(thisrow, roffset)
 *                 conv_array[ipos].fill_from(source)
 */
            __pyx_t_10 = __Pyx_PyInt_From_int((__pyx_v_roffsetarray[__pyx_v_ipos])); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_XDECREF_SET(__pyx_v_roffset, __pyx_t_10);
            __pyx_t_10 = 0;

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":712
 *             for ipos from 0 <= ipos < pos_len:
 *                 roffset = roffsetarray[ipos]
 *                 source = shift(thisrow, roffset)             # <<<<<<<<<<<<<<
 *                 conv_array[ipos].fill_from(source)
 * 
 */
            __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_roffset); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __pyx_v_source = shift(__pyx_v_thisrow, __pyx_t_15);

            /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":713
 *                 roffset = roffsetarray[ipos]
 *                 source = shift(thisrow, roffset)
 *                 conv_array[ipos].fill_from(source)             # <<<<<<<<<<<<<<
 * 
 *         # need to update the number of entries in the tree to match
 */
            (__pyx_v_conv_array[__pyx_v_ipos])->fill_from(__pyx_v_source);
          }
        }

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":717
 *         # need to update the number of entries in the tree to match
 *         # the number in the branches since each branch is filled separately.
 *         tree.SetEntries(-1)             # <<<<<<<<<<<<<<
 * 
 *     except:
 */
        __pyx_v_tree->SetEntries(-1);
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L13_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":719
 *         tree.SetEntries(-1)
 * 
 *     except:             # <<<<<<<<<<<<<<
 *         raise
 * 
 */
      /*except:*/ {
        __Pyx_AddTraceback("_librootnumpy.array2tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":720
 * 
 *     except:
 *         raise             # <<<<<<<<<<<<<<
 * 
 *     finally:
 */
        __Pyx_GIVEREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ErrRestore(__pyx_t_10, __pyx_t_7, __pyx_t_8);
        __pyx_t_10 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; 
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_exception_handled;
      }
      __pyx_L8_except_error:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L4_error;
      __pyx_L7_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L13_try_end:;
    }
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":726
 *         # root has some global funny memory management...
 *         # need to make sure no double free
 *         for icv from 0 <= icv < conv_array.size():             # <<<<<<<<<<<<<<
 *             tmpcv = conv_array[icv]
 *             del tmpcv
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_18 = __pyx_v_conv_array.size();
      for (__pyx_v_icv = 0; __pyx_v_icv < __pyx_t_18; __pyx_v_icv++) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":727
 *         # need to make sure no double free
 *         for icv from 0 <= icv < conv_array.size():
 *             tmpcv = conv_array[icv]             # <<<<<<<<<<<<<<
 *             del tmpcv
 * 
 */
        __pyx_v_tmpcv = (__pyx_v_conv_array[__pyx_v_icv]);

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":728
 *         for icv from 0 <= icv < conv_array.size():
 *             tmpcv = conv_array[icv]
 *             del tmpcv             # <<<<<<<<<<<<<<
 * 
 *     return tree
 */
        delete __pyx_v_tmpcv;
      }
      goto __pyx_L5;
    }
    /*exception exit:*/{
      __pyx_L4_error:;
      __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1) < 0)) __Pyx_ErrFetch(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_23);
      __pyx_t_15 = __pyx_lineno; __pyx_t_19 = __pyx_clineno; __pyx_t_20 = __pyx_filename;
      {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":726
 *         # root has some global funny memory management...
 *         # need to make sure no double free
 *         for icv from 0 <= icv < conv_array.size():             # <<<<<<<<<<<<<<
 *             tmpcv = conv_array[icv]
 *             del tmpcv
 */
        __pyx_t_18 = __pyx_v_conv_array.size();
        for (__pyx_v_icv = 0; __pyx_v_icv < __pyx_t_18; __pyx_v_icv++) {

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":727
 *         # need to make sure no double free
 *         for icv from 0 <= icv < conv_array.size():
 *             tmpcv = conv_array[icv]             # <<<<<<<<<<<<<<
 *             del tmpcv
 * 
 */
          __pyx_v_tmpcv = (__pyx_v_conv_array[__pyx_v_icv]);

          /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":728
 *         for icv from 0 <= icv < conv_array.size():
 *             tmpcv = conv_array[icv]
 *             del tmpcv             # <<<<<<<<<<<<<<
 * 
 *     return tree
 */
          delete __pyx_v_tmpcv;
        }
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_XGIVEREF(__pyx_t_23);
        __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
      }
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_ErrRestore(__pyx_t_3, __pyx_t_2, __pyx_t_1);
      __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_19; __pyx_filename = __pyx_t_20;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":730
 *             del tmpcv
 * 
 *     return tree             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_tree;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":671
 * 
 * 
 * cdef TTree* array2tree(np.ndarray arr, name='tree', TTree* tree=NULL) except *:             # <<<<<<<<<<<<<<
 *     # hmm how do I catch all python exception
 *     # and clean up before throwing ?
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("_librootnumpy.array2tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fieldnames);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_fieldname);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XDECREF(__pyx_v_roffset);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":733
 * 
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):             # <<<<<<<<<<<<<<
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_11array2tree_toCObj(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_11array2tree_toCObj = {__Pyx_NAMESTR("array2tree_toCObj"), (PyCFunction)__pyx_pw_13_librootnumpy_11array2tree_toCObj, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_11array2tree_toCObj(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_tree = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("array2tree_toCObj (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arr,&__pyx_n_s_name,&__pyx_n_s_tree,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_n_s_tree);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "array2tree_toCObj") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arr = values[0];
    __pyx_v_name = values[1];
    __pyx_v_tree = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("array2tree_toCObj", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.array2tree_toCObj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_10array2tree_toCObj(__pyx_self, __pyx_v_arr, __pyx_v_name, __pyx_v_tree);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_10array2tree_toCObj(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_name, PyObject *__pyx_v_tree) {
  TTree *__pyx_v_intree;
  TTree *__pyx_v_outtree;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  void *__pyx_t_4;
  TTree *__pyx_t_5;
  struct __pyx_opt_args_13_librootnumpy_array2tree __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array2tree_toCObj", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":734
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):
 *     cdef TTree* intree = NULL             # <<<<<<<<<<<<<<
 *     cdef TTree* outtree = NULL
 *     if tree is not None:
 */
  __pyx_v_intree = NULL;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":735
 * def array2tree_toCObj(arr, name='tree', tree=None):
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL             # <<<<<<<<<<<<<<
 *     if tree is not None:
 *         # this is not a safe method
 */
  __pyx_v_outtree = NULL;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":736
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 *     if tree is not None:             # <<<<<<<<<<<<<<
 *         # this is not a safe method
 *         # provided here for convenience only
 */
  __pyx_t_1 = (__pyx_v_tree != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":740
 *         # provided here for convenience only
 *         # typecheck should be implemented by the wrapper
 *         if not PyCObject_Check(tree):             # <<<<<<<<<<<<<<
 *             raise ValueError("tree must be PyCObject")
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 */
    __pyx_t_2 = ((!(PyCObject_Check(__pyx_v_tree) != 0)) != 0);
    if (__pyx_t_2) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":741
 *         # typecheck should be implemented by the wrapper
 *         if not PyCObject_Check(tree):
 *             raise ValueError("tree must be PyCObject")             # <<<<<<<<<<<<<<
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     outtree = array2tree(arr, name=name, tree=intree)
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":742
 *         if not PyCObject_Check(tree):
 *             raise ValueError("tree must be PyCObject")
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)             # <<<<<<<<<<<<<<
 *     outtree = array2tree(arr, name=name, tree=intree)
 *     return PyCObject_FromVoidPtr(outtree, NULL)
 */
    __pyx_t_4 = PyCObject_AsVoidPtr(__pyx_v_tree); if (unlikely(__pyx_t_4 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_intree = ((TTree *)__pyx_t_4);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":743
 *             raise ValueError("tree must be PyCObject")
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     outtree = array2tree(arr, name=name, tree=intree)             # <<<<<<<<<<<<<<
 *     return PyCObject_FromVoidPtr(outtree, NULL)
 * 
 */
  if (!(likely(((__pyx_v_arr) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_arr, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6.__pyx_n = 2;
  __pyx_t_6.name = __pyx_v_name;
  __pyx_t_6.tree = __pyx_v_intree;
  __pyx_t_5 = __pyx_f_13_librootnumpy_array2tree(((PyArrayObject *)__pyx_v_arr), &__pyx_t_6); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_outtree = __pyx_t_5;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":744
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     outtree = array2tree(arr, name=name, tree=intree)
 *     return PyCObject_FromVoidPtr(outtree, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyCObject_FromVoidPtr(__pyx_v_outtree, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":733
 * 
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):             # <<<<<<<<<<<<<<
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_librootnumpy.array2tree_toCObj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":747
 * 
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):             # <<<<<<<<<<<<<<
 *     cdef TFile* file = Open(filename, mode)
 *     if file is NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_13array2root(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_13array2root = {__Pyx_NAMESTR("array2root"), (PyCFunction)__pyx_pw_13_librootnumpy_13array2root, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_13array2root(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_treename = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("array2root (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arr,&__pyx_n_s_filename,&__pyx_n_s_treename,&__pyx_n_s_mode,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)__pyx_n_s_tree);
    values[3] = ((PyObject *)__pyx_n_s_update);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("array2root", 0, 2, 4, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_treename);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "array2root") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arr = values[0];
    __pyx_v_filename = values[1];
    __pyx_v_treename = values[2];
    __pyx_v_mode = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("array2root", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.array2root", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_12array2root(__pyx_self, __pyx_v_arr, __pyx_v_filename, __pyx_v_treename, __pyx_v_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_12array2root(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_filename, PyObject *__pyx_v_treename, PyObject *__pyx_v_mode) {
  TFile *__pyx_v_file;
  TTree *__pyx_v_tree;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  const char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  TTree *__pyx_t_6;
  struct __pyx_opt_args_13_librootnumpy_array2tree __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array2root", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":748
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):
 *     cdef TFile* file = Open(filename, mode)             # <<<<<<<<<<<<<<
 *     if file is NULL:
 *         raise IOError("cannot open file %s" % filename)
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_mode); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_file = TFile::Open(__pyx_t_1, __pyx_t_2);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":749
 * def array2root(arr, filename, treename='tree', mode='update'):
 *     cdef TFile* file = Open(filename, mode)
 *     if file is NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot open file %s" % filename)
 *     if not file.IsWritable():
 */
  __pyx_t_3 = ((__pyx_v_file == NULL) != 0);
  if (__pyx_t_3) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":750
 *     cdef TFile* file = Open(filename, mode)
 *     if file is NULL:
 *         raise IOError("cannot open file %s" % filename)             # <<<<<<<<<<<<<<
 *     if not file.IsWritable():
 *         raise IOError("file %s is not writable" % filename)
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_cannot_open_file_s, __pyx_v_filename); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":751
 *     if file is NULL:
 *         raise IOError("cannot open file %s" % filename)
 *     if not file.IsWritable():             # <<<<<<<<<<<<<<
 *         raise IOError("file %s is not writable" % filename)
 *     cdef TTree* tree = array2tree(arr, name=treename)
 */
  __pyx_t_3 = ((!(__pyx_v_file->IsWritable() != 0)) != 0);
  if (__pyx_t_3) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":752
 *         raise IOError("cannot open file %s" % filename)
 *     if not file.IsWritable():
 *         raise IOError("file %s is not writable" % filename)             # <<<<<<<<<<<<<<
 *     cdef TTree* tree = array2tree(arr, name=treename)
 *     tree.Write()
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_file_s_is_not_writable, __pyx_v_filename); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":753
 *     if not file.IsWritable():
 *         raise IOError("file %s is not writable" % filename)
 *     cdef TTree* tree = array2tree(arr, name=treename)             # <<<<<<<<<<<<<<
 *     tree.Write()
 *     file.Close()
 */
  if (!(likely(((__pyx_v_arr) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_arr, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.name = __pyx_v_treename;
  __pyx_t_6 = __pyx_f_13_librootnumpy_array2tree(((PyArrayObject *)__pyx_v_arr), &__pyx_t_7); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_tree = __pyx_t_6;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":754
 *         raise IOError("file %s is not writable" % filename)
 *     cdef TTree* tree = array2tree(arr, name=treename)
 *     tree.Write()             # <<<<<<<<<<<<<<
 *     file.Close()
 *     # how to clean up TTree? Same question as above.
 */
  __pyx_v_tree->Write();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":755
 *     cdef TTree* tree = array2tree(arr, name=treename)
 *     tree.Write()
 *     file.Close()             # <<<<<<<<<<<<<<
 *     # how to clean up TTree? Same question as above.
 *     del file
 */
  __pyx_v_file->Close();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":757
 *     file.Close()
 *     # how to clean up TTree? Same question as above.
 *     del file             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_file;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":747
 * 
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):             # <<<<<<<<<<<<<<
 *     cdef TFile* file = Open(filename, mode)
 *     if file is NULL:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_librootnumpy.array2root", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":761
 * 
 * @atexit.register
 * def cleanup():             # <<<<<<<<<<<<<<
 *     # delete all allocated converters
 *     it = CONVERTERS.begin()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_15cleanup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_15cleanup = {__Pyx_NAMESTR("cleanup"), (PyCFunction)__pyx_pw_13_librootnumpy_15cleanup, METH_NOARGS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_15cleanup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cleanup (wrapper)", 0);
  __pyx_r = __pyx_pf_13_librootnumpy_14cleanup(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_14cleanup(CYTHON_UNUSED PyObject *__pyx_self) {
  std::map<std::string,__pyx_t_13_librootnumpy_Converter *>::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("cleanup", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":763
 * def cleanup():
 *     # delete all allocated converters
 *     it = CONVERTERS.begin()             # <<<<<<<<<<<<<<
 *     while it != CONVERTERS.end():
 *         del deref(it).second
 */
  __pyx_v_it = __pyx_v_13_librootnumpy_CONVERTERS.begin();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":764
 *     # delete all allocated converters
 *     it = CONVERTERS.begin()
 *     while it != CONVERTERS.end():             # <<<<<<<<<<<<<<
 *         del deref(it).second
 *         inc(it)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_13_librootnumpy_CONVERTERS.end()) != 0);
    if (!__pyx_t_1) break;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":765
 *     it = CONVERTERS.begin()
 *     while it != CONVERTERS.end():
 *         del deref(it).second             # <<<<<<<<<<<<<<
 *         inc(it)
 */
    delete (*__pyx_v_it).second;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":766
 *     while it != CONVERTERS.end():
 *         del deref(it).second
 *         inc(it)             # <<<<<<<<<<<<<<
 */
    (++__pyx_v_it);
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":761
 * 
 * @atexit.register
 * def cleanup():             # <<<<<<<<<<<<<<
 *     # delete all allocated converters
 *     it = CONVERTERS.begin()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":5
 * """
 * 
 * cdef inline np.ndarray tonumpyarray(void* data, int size, int dtype) with gil:             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp dims = size
 *     #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
 */

static CYTHON_INLINE PyArrayObject *__pyx_f_13_librootnumpy_tonumpyarray(void *__pyx_v_data, int __pyx_v_size, int __pyx_v_dtype) {
  npy_intp __pyx_v_dims;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("tonumpyarray", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":6
 * 
 * cdef inline np.ndarray tonumpyarray(void* data, int size, int dtype) with gil:
 *     cdef np.npy_intp dims = size             # <<<<<<<<<<<<<<
 *     #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)
 */
  __pyx_v_dims = __pyx_v_size;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":8
 *     cdef np.npy_intp dims = size
 *     #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)             # <<<<<<<<<<<<<<
 * 
 * def array_d(root_arr):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), __pyx_v_dtype, __pyx_v_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":5
 * """
 * 
 * cdef inline np.ndarray tonumpyarray(void* data, int size, int dtype) with gil:             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp dims = size
 *     #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_librootnumpy.tonumpyarray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":10
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)
 * 
 * def array_d(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_17array_d(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_17array_d = {__Pyx_NAMESTR("array_d"), (PyCFunction)__pyx_pw_13_librootnumpy_17array_d, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_17array_d(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("array_d (wrapper)", 0);
  __pyx_r = __pyx_pf_13_librootnumpy_16array_d(__pyx_self, ((PyObject *)__pyx_v_root_arr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_16array_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayD *__pyx_v__arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_d", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":11
 * 
 * def array_d(root_arr):
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 * 
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__arr = ((TArrayD *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":12
 * def array_d(root_arr):
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)             # <<<<<<<<<<<<<<
 * 
 * def array_f(root_arr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_DOUBLE)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":10
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)
 * 
 * def array_d(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_librootnumpy.array_d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":14
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 * 
 * def array_f(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_19array_f(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_19array_f = {__Pyx_NAMESTR("array_f"), (PyCFunction)__pyx_pw_13_librootnumpy_19array_f, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_19array_f(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("array_f (wrapper)", 0);
  __pyx_r = __pyx_pf_13_librootnumpy_18array_f(__pyx_self, ((PyObject *)__pyx_v_root_arr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_18array_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayF *__pyx_v__arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_f", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":15
 * 
 * def array_f(root_arr):
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 * 
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__arr = ((TArrayF *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":16
 * def array_f(root_arr):
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)             # <<<<<<<<<<<<<<
 * 
 * def array_l(root_arr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_FLOAT32)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":14
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 * 
 * def array_f(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_librootnumpy.array_f", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":18
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 * 
 * def array_l(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_21array_l(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_21array_l = {__Pyx_NAMESTR("array_l"), (PyCFunction)__pyx_pw_13_librootnumpy_21array_l, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_21array_l(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("array_l (wrapper)", 0);
  __pyx_r = __pyx_pf_13_librootnumpy_20array_l(__pyx_self, ((PyObject *)__pyx_v_root_arr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_20array_l(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayL *__pyx_v__arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_l", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":19
 * 
 * def array_l(root_arr):
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 * 
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__arr = ((TArrayL *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":20
 * def array_l(root_arr):
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)             # <<<<<<<<<<<<<<
 * 
 * def array_i(root_arr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_LONG)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":18
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 * 
 * def array_l(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_librootnumpy.array_l", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":22
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 * 
 * def array_i(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_23array_i(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_23array_i = {__Pyx_NAMESTR("array_i"), (PyCFunction)__pyx_pw_13_librootnumpy_23array_i, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_23array_i(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("array_i (wrapper)", 0);
  __pyx_r = __pyx_pf_13_librootnumpy_22array_i(__pyx_self, ((PyObject *)__pyx_v_root_arr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_22array_i(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayI *__pyx_v__arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_i", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":23
 * 
 * def array_i(root_arr):
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 * 
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__arr = ((TArrayI *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":24
 * def array_i(root_arr):
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)             # <<<<<<<<<<<<<<
 * 
 * def array_s(root_arr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_INT)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":22
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 * 
 * def array_i(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_librootnumpy.array_i", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":26
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 * 
 * def array_s(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_25array_s(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_25array_s = {__Pyx_NAMESTR("array_s"), (PyCFunction)__pyx_pw_13_librootnumpy_25array_s, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_25array_s(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("array_s (wrapper)", 0);
  __pyx_r = __pyx_pf_13_librootnumpy_24array_s(__pyx_self, ((PyObject *)__pyx_v_root_arr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_24array_s(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayS *__pyx_v__arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_s", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":27
 * 
 * def array_s(root_arr):
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 * 
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__arr = ((TArrayS *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":28
 * def array_s(root_arr):
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)             # <<<<<<<<<<<<<<
 * 
 * def array_c(root_arr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_SHORT)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":26
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 * 
 * def array_s(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_librootnumpy.array_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":30
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 * 
 * def array_c(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_27array_c(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_27array_c = {__Pyx_NAMESTR("array_c"), (PyCFunction)__pyx_pw_13_librootnumpy_27array_c, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_27array_c(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("array_c (wrapper)", 0);
  __pyx_r = __pyx_pf_13_librootnumpy_26array_c(__pyx_self, ((PyObject *)__pyx_v_root_arr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_26array_c(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayC *__pyx_v__arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_c", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":31
 * 
 * def array_c(root_arr):
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__arr = ((TArrayC *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":32
 * def array_c(root_arr):
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_BYTE)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":30
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 * 
 * def array_c(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_librootnumpy.array_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":5
 * """
 * 
 * def matrix_d(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_29matrix_d(PyObject *__pyx_self, PyObject *__pyx_v_root_mat); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_29matrix_d = {__Pyx_NAMESTR("matrix_d"), (PyCFunction)__pyx_pw_13_librootnumpy_29matrix_d, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_29matrix_d(PyObject *__pyx_self, PyObject *__pyx_v_root_mat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("matrix_d (wrapper)", 0);
  __pyx_r = __pyx_pf_13_librootnumpy_28matrix_d(__pyx_self, ((PyObject *)__pyx_v_root_mat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_28matrix_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_mat) {
  TMatrixDBase *__pyx_v__mat;
  PyArrayObject *__pyx_v_arr = 0;
  int __pyx_v_i;
  int __pyx_v_j;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr;
  __Pyx_Buffer __pyx_pybuffer_arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("matrix_d", 0);
  __pyx_pybuffer_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_arr.refcount = 0;
  __pyx_pybuffernd_arr.data = NULL;
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":6
 * 
 * def matrix_d(root_mat):
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 *     cdef int i
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_mat); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__mat = ((TMatrixDBase *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":7
 * def matrix_d(root_mat):
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef int j
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v__mat->GetNrows()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v__mat->GetNcols()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":10
 *     cdef int i
 *     cdef int j
 *     for i from 0 <= i < _mat.GetNrows():             # <<<<<<<<<<<<<<
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)
 */
  __pyx_t_8 = __pyx_v__mat->GetNrows();
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":11
 *     cdef int j
 *     for i from 0 <= i < _mat.GetNrows():
 *         for j from 0 <= j < _mat.GetNcols():             # <<<<<<<<<<<<<<
 *             arr[i, j] = _mat.get(i, j)
 *     return np.matrix(arr)
 */
    __pyx_t_9 = __pyx_v__mat->GetNcols();
    for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_9; __pyx_v_j++) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":12
 *     for i from 0 <= i < _mat.GetNrows():
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)             # <<<<<<<<<<<<<<
 *     return np.matrix(arr)
 * 
 */
      __pyx_t_10 = __pyx_v_i;
      __pyx_t_11 = __pyx_v_j;
      __pyx_t_12 = -1;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_pybuffernd_arr.diminfo[0].shape;
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_12 = 0;
      } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_12 = 0;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_pybuffernd_arr.diminfo[1].shape;
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 1;
      } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_12 = 1;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v__mat->operator()(__pyx_v_i, __pyx_v_j);
    }
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":13
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)
 *     return np.matrix(arr)             # <<<<<<<<<<<<<<
 * 
 * def matrix_f(root_mat):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_matrix); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_arr));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arr));
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":5
 * """
 * 
 * def matrix_d(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.matrix_d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":15
 *     return np.matrix(arr)
 * 
 * def matrix_f(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_31matrix_f(PyObject *__pyx_self, PyObject *__pyx_v_root_mat); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_31matrix_f = {__Pyx_NAMESTR("matrix_f"), (PyCFunction)__pyx_pw_13_librootnumpy_31matrix_f, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_31matrix_f(PyObject *__pyx_self, PyObject *__pyx_v_root_mat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("matrix_f (wrapper)", 0);
  __pyx_r = __pyx_pf_13_librootnumpy_30matrix_f(__pyx_self, ((PyObject *)__pyx_v_root_mat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_30matrix_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_mat) {
  TMatrixFBase *__pyx_v__mat;
  PyArrayObject *__pyx_v_arr = 0;
  int __pyx_v_i;
  int __pyx_v_j;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr;
  __Pyx_Buffer __pyx_pybuffer_arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("matrix_f", 0);
  __pyx_pybuffer_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_arr.refcount = 0;
  __pyx_pybuffernd_arr.data = NULL;
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":16
 * 
 * def matrix_f(root_mat):
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 *     cdef int i
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_mat); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__mat = ((TMatrixFBase *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":17
 * def matrix_f(root_mat):
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef int j
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v__mat->GetNrows()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v__mat->GetNcols()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":20
 *     cdef int i
 *     cdef int j
 *     for i from 0 <= i < _mat.GetNrows():             # <<<<<<<<<<<<<<
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)
 */
  __pyx_t_8 = __pyx_v__mat->GetNrows();
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":21
 *     cdef int j
 *     for i from 0 <= i < _mat.GetNrows():
 *         for j from 0 <= j < _mat.GetNcols():             # <<<<<<<<<<<<<<
 *             arr[i, j] = _mat.get(i, j)
 *     return np.matrix(arr)
 */
    __pyx_t_9 = __pyx_v__mat->GetNcols();
    for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_9; __pyx_v_j++) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":22
 *     for i from 0 <= i < _mat.GetNrows():
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)             # <<<<<<<<<<<<<<
 *     return np.matrix(arr)
 */
      __pyx_t_10 = __pyx_v_i;
      __pyx_t_11 = __pyx_v_j;
      __pyx_t_12 = -1;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_pybuffernd_arr.diminfo[0].shape;
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_12 = 0;
      } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_12 = 0;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_pybuffernd_arr.diminfo[1].shape;
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 1;
      } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_12 = 1;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v__mat->operator()(__pyx_v_i, __pyx_v_j);
    }
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":23
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)
 *     return np.matrix(arr)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_matrix); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_arr));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arr));
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":15
 *     return np.matrix(arr)
 * 
 * def matrix_f(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.matrix_f", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":5
 * """
 * 
 * def sample_f1(f1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef unsigned int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_33sample_f1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_33sample_f1 = {__Pyx_NAMESTR("sample_f1"), (PyCFunction)__pyx_pw_13_librootnumpy_33sample_f1, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_33sample_f1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f1 = 0;
  unsigned int __pyx_v_n_samples;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sample_f1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f1,&__pyx_n_s_n_samples,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sample_f1", 1, 2, 2, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_f1") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_f1 = values[0];
    __pyx_v_n_samples = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_n_samples == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_f1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.sample_f1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_32sample_f1(__pyx_self, __pyx_v_f1, __pyx_v_n_samples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_32sample_f1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f1, unsigned int __pyx_v_n_samples) {
  TF1 *__pyx_v_f1_;
  unsigned int __pyx_v_i;
  PyArrayObject *__pyx_v_arr = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr;
  __Pyx_Buffer __pyx_pybuffer_arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sample_f1", 0);
  __pyx_pybuffer_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_arr.refcount = 0;
  __pyx_pybuffernd_arr.data = NULL;
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":6
 * 
 * def sample_f1(f1, unsigned int n_samples):
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_f1); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_f1_ = ((TF1 *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":8
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef unsigned int i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         arr[i] = f1_.GetRandom()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":9
 *     cdef unsigned int i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         arr[i] = f1_.GetRandom()
 *     return arr
 */
  __pyx_t_8 = __pyx_v_n_samples;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":10
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         arr[i] = f1_.GetRandom()             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = -1;
    if (unlikely(__pyx_t_9 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides) = __pyx_v_f1_->GetRandom();
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":11
 *     for i from 0 <= i < n_samples:
 *         arr[i] = f1_.GetRandom()
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":5
 * """
 * 
 * def sample_f1(f1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef unsigned int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.sample_f1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":14
 * 
 * 
 * def sample_h1(h1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef unsigned int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_35sample_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_35sample_h1 = {__Pyx_NAMESTR("sample_h1"), (PyCFunction)__pyx_pw_13_librootnumpy_35sample_h1, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_35sample_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_h1 = 0;
  unsigned int __pyx_v_n_samples;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sample_h1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_h1,&__pyx_n_s_n_samples,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sample_h1", 1, 2, 2, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_h1") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_h1 = values[0];
    __pyx_v_n_samples = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_n_samples == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_h1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.sample_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_34sample_h1(__pyx_self, __pyx_v_h1, __pyx_v_n_samples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_34sample_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h1, unsigned int __pyx_v_n_samples) {
  TH1 *__pyx_v_h1_;
  unsigned int __pyx_v_i;
  PyArrayObject *__pyx_v_arr = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr;
  __Pyx_Buffer __pyx_pybuffer_arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sample_h1", 0);
  __pyx_pybuffer_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_arr.refcount = 0;
  __pyx_pybuffernd_arr.data = NULL;
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":15
 * 
 * def sample_h1(h1, unsigned int n_samples):
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_h1); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_h1_ = ((TH1 *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":17
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef unsigned int i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         arr[i] = h1_.GetRandom()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":18
 *     cdef unsigned int i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         arr[i] = h1_.GetRandom()
 *     return arr
 */
  __pyx_t_8 = __pyx_v_n_samples;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":19
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         arr[i] = h1_.GetRandom()             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = -1;
    if (unlikely(__pyx_t_9 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides) = __pyx_v_h1_->GetRandom();
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":20
 *     for i from 0 <= i < n_samples:
 *         arr[i] = h1_.GetRandom()
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":14
 * 
 * 
 * def sample_h1(h1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef unsigned int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.sample_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":23
 * 
 * 
 * def sample_f2(f2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef unsigned int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_37sample_f2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_37sample_f2 = {__Pyx_NAMESTR("sample_f2"), (PyCFunction)__pyx_pw_13_librootnumpy_37sample_f2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_37sample_f2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f2 = 0;
  unsigned int __pyx_v_n_samples;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sample_f2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f2,&__pyx_n_s_n_samples,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sample_f2", 1, 2, 2, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_f2") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_f2 = values[0];
    __pyx_v_n_samples = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_n_samples == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_f2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.sample_f2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_36sample_f2(__pyx_self, __pyx_v_f2, __pyx_v_n_samples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_36sample_f2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f2, unsigned int __pyx_v_n_samples) {
  TF2 *__pyx_v_f2_;
  unsigned int __pyx_v_i;
  double __pyx_v_x;
  double __pyx_v_y;
  PyArrayObject *__pyx_v_arr = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr;
  __Pyx_Buffer __pyx_pybuffer_arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  long __pyx_t_10;
  int __pyx_t_11;
  unsigned int __pyx_t_12;
  long __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sample_f2", 0);
  __pyx_pybuffer_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_arr.refcount = 0;
  __pyx_pybuffernd_arr.data = NULL;
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":24
 * 
 * def sample_f2(f2, unsigned int n_samples):
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef double x = 0
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_f2); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_f2_ = ((TF2 *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":26
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef unsigned int i
 *     cdef double x = 0             # <<<<<<<<<<<<<<
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 */
  __pyx_v_x = 0.0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":27
 *     cdef unsigned int i
 *     cdef double x = 0
 *     cdef double y = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 */
  __pyx_v_y = 0.0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":28
 *     cdef double x = 0
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         f2_.GetRandom2(x, y)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":29
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         f2_.GetRandom2(x, y)
 *         arr[i, 0] = x
 */
  __pyx_t_8 = __pyx_v_n_samples;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":30
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         f2_.GetRandom2(x, y)             # <<<<<<<<<<<<<<
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 */
    __pyx_v_f2_->GetRandom2(__pyx_v_x, __pyx_v_y);

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":31
 *     for i from 0 <= i < n_samples:
 *         f2_.GetRandom2(x, y)
 *         arr[i, 0] = x             # <<<<<<<<<<<<<<
 *         arr[i, 1] = y
 *     return arr
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = 0;
    __pyx_t_11 = -1;
    if (unlikely(__pyx_t_9 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_arr.diminfo[1].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_x;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":32
 *         f2_.GetRandom2(x, y)
 *         arr[i, 0] = x
 *         arr[i, 1] = y             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 1;
    __pyx_t_11 = -1;
    if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_pybuffernd_arr.diminfo[1].shape;
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_y;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":33
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":23
 * 
 * 
 * def sample_f2(f2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef unsigned int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.sample_f2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":36
 * 
 * 
 * def sample_h2(h2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef unsigned int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_39sample_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_39sample_h2 = {__Pyx_NAMESTR("sample_h2"), (PyCFunction)__pyx_pw_13_librootnumpy_39sample_h2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_39sample_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_h2 = 0;
  unsigned int __pyx_v_n_samples;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sample_h2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_h2,&__pyx_n_s_n_samples,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sample_h2", 1, 2, 2, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_h2") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_h2 = values[0];
    __pyx_v_n_samples = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_n_samples == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_h2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.sample_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_38sample_h2(__pyx_self, __pyx_v_h2, __pyx_v_n_samples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_38sample_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h2, unsigned int __pyx_v_n_samples) {
  TH2 *__pyx_v_h2_;
  unsigned int __pyx_v_i;
  double __pyx_v_x;
  double __pyx_v_y;
  PyArrayObject *__pyx_v_arr = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr;
  __Pyx_Buffer __pyx_pybuffer_arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  long __pyx_t_10;
  int __pyx_t_11;
  unsigned int __pyx_t_12;
  long __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sample_h2", 0);
  __pyx_pybuffer_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_arr.refcount = 0;
  __pyx_pybuffernd_arr.data = NULL;
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":37
 * 
 * def sample_h2(h2, unsigned int n_samples):
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef double x = 0
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_h2); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_h2_ = ((TH2 *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":39
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef unsigned int i
 *     cdef double x = 0             # <<<<<<<<<<<<<<
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 */
  __pyx_v_x = 0.0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":40
 *     cdef unsigned int i
 *     cdef double x = 0
 *     cdef double y = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 */
  __pyx_v_y = 0.0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":41
 *     cdef double x = 0
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         h2_.GetRandom2(x, y)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":42
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         h2_.GetRandom2(x, y)
 *         arr[i, 0] = x
 */
  __pyx_t_8 = __pyx_v_n_samples;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":43
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         h2_.GetRandom2(x, y)             # <<<<<<<<<<<<<<
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 */
    __pyx_v_h2_->GetRandom2(__pyx_v_x, __pyx_v_y);

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":44
 *     for i from 0 <= i < n_samples:
 *         h2_.GetRandom2(x, y)
 *         arr[i, 0] = x             # <<<<<<<<<<<<<<
 *         arr[i, 1] = y
 *     return arr
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = 0;
    __pyx_t_11 = -1;
    if (unlikely(__pyx_t_9 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_arr.diminfo[1].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_x;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":45
 *         h2_.GetRandom2(x, y)
 *         arr[i, 0] = x
 *         arr[i, 1] = y             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 1;
    __pyx_t_11 = -1;
    if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_pybuffernd_arr.diminfo[1].shape;
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_y;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":46
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":36
 * 
 * 
 * def sample_h2(h2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef unsigned int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.sample_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":49
 * 
 * 
 * def sample_f3(f3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef unsigned int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_41sample_f3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_41sample_f3 = {__Pyx_NAMESTR("sample_f3"), (PyCFunction)__pyx_pw_13_librootnumpy_41sample_f3, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_41sample_f3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f3 = 0;
  unsigned int __pyx_v_n_samples;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sample_f3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f3,&__pyx_n_s_n_samples,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f3)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sample_f3", 1, 2, 2, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_f3") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_f3 = values[0];
    __pyx_v_n_samples = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_n_samples == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_f3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.sample_f3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_40sample_f3(__pyx_self, __pyx_v_f3, __pyx_v_n_samples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_40sample_f3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f3, unsigned int __pyx_v_n_samples) {
  TF3 *__pyx_v_f3_;
  unsigned int __pyx_v_i;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  PyArrayObject *__pyx_v_arr = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr;
  __Pyx_Buffer __pyx_pybuffer_arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  long __pyx_t_10;
  int __pyx_t_11;
  unsigned int __pyx_t_12;
  long __pyx_t_13;
  unsigned int __pyx_t_14;
  long __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sample_f3", 0);
  __pyx_pybuffer_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_arr.refcount = 0;
  __pyx_pybuffernd_arr.data = NULL;
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":50
 * 
 * def sample_f3(f3, unsigned int n_samples):
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef double x = 0
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_f3); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_f3_ = ((TF3 *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":52
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef unsigned int i
 *     cdef double x = 0             # <<<<<<<<<<<<<<
 *     cdef double y = 0
 *     cdef double z = 0
 */
  __pyx_v_x = 0.0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":53
 *     cdef unsigned int i
 *     cdef double x = 0
 *     cdef double y = 0             # <<<<<<<<<<<<<<
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 */
  __pyx_v_y = 0.0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":54
 *     cdef double x = 0
 *     cdef double y = 0
 *     cdef double z = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 */
  __pyx_v_z = 0.0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":55
 *     cdef double y = 0
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         f3_.GetRandom3(x, y, z)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":56
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         f3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x
 */
  __pyx_t_8 = __pyx_v_n_samples;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":57
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         f3_.GetRandom3(x, y, z)             # <<<<<<<<<<<<<<
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 */
    __pyx_v_f3_->GetRandom3(__pyx_v_x, __pyx_v_y, __pyx_v_z);

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":58
 *     for i from 0 <= i < n_samples:
 *         f3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x             # <<<<<<<<<<<<<<
 *         arr[i, 1] = y
 *         arr[i, 2] = z
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = 0;
    __pyx_t_11 = -1;
    if (unlikely(__pyx_t_9 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_arr.diminfo[1].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_x;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":59
 *         f3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x
 *         arr[i, 1] = y             # <<<<<<<<<<<<<<
 *         arr[i, 2] = z
 *     return arr
 */
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 1;
    __pyx_t_11 = -1;
    if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_pybuffernd_arr.diminfo[1].shape;
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_y;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":60
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 *         arr[i, 2] = z             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_15 = 2;
    __pyx_t_11 = -1;
    if (unlikely(__pyx_t_14 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;
    if (__pyx_t_15 < 0) {
      __pyx_t_15 += __pyx_pybuffernd_arr.diminfo[1].shape;
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_z;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":61
 *         arr[i, 1] = y
 *         arr[i, 2] = z
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":49
 * 
 * 
 * def sample_f3(f3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef unsigned int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.sample_f3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":64
 * 
 * 
 * def sample_h3(h3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef unsigned int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_43sample_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_43sample_h3 = {__Pyx_NAMESTR("sample_h3"), (PyCFunction)__pyx_pw_13_librootnumpy_43sample_h3, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_43sample_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_h3 = 0;
  unsigned int __pyx_v_n_samples;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sample_h3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_h3,&__pyx_n_s_n_samples,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h3)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sample_h3", 1, 2, 2, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_h3") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_h3 = values[0];
    __pyx_v_n_samples = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_n_samples == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_h3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.sample_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_42sample_h3(__pyx_self, __pyx_v_h3, __pyx_v_n_samples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_42sample_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h3, unsigned int __pyx_v_n_samples) {
  TH3 *__pyx_v_h3_;
  unsigned int __pyx_v_i;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  PyArrayObject *__pyx_v_arr = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr;
  __Pyx_Buffer __pyx_pybuffer_arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  long __pyx_t_10;
  int __pyx_t_11;
  unsigned int __pyx_t_12;
  long __pyx_t_13;
  unsigned int __pyx_t_14;
  long __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sample_h3", 0);
  __pyx_pybuffer_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_arr.refcount = 0;
  __pyx_pybuffernd_arr.data = NULL;
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":65
 * 
 * def sample_h3(h3, unsigned int n_samples):
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef double x = 0
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_h3); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_h3_ = ((TH3 *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":67
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef unsigned int i
 *     cdef double x = 0             # <<<<<<<<<<<<<<
 *     cdef double y = 0
 *     cdef double z = 0
 */
  __pyx_v_x = 0.0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":68
 *     cdef unsigned int i
 *     cdef double x = 0
 *     cdef double y = 0             # <<<<<<<<<<<<<<
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 */
  __pyx_v_y = 0.0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":69
 *     cdef double x = 0
 *     cdef double y = 0
 *     cdef double z = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 */
  __pyx_v_z = 0.0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":70
 *     cdef double y = 0
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         h3_.GetRandom3(x, y, z)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":71
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         h3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x
 */
  __pyx_t_8 = __pyx_v_n_samples;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":72
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         h3_.GetRandom3(x, y, z)             # <<<<<<<<<<<<<<
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 */
    __pyx_v_h3_->GetRandom3(__pyx_v_x, __pyx_v_y, __pyx_v_z);

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":73
 *     for i from 0 <= i < n_samples:
 *         h3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x             # <<<<<<<<<<<<<<
 *         arr[i, 1] = y
 *         arr[i, 2] = z
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = 0;
    __pyx_t_11 = -1;
    if (unlikely(__pyx_t_9 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_arr.diminfo[1].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_x;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":74
 *         h3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x
 *         arr[i, 1] = y             # <<<<<<<<<<<<<<
 *         arr[i, 2] = z
 *     return arr
 */
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 1;
    __pyx_t_11 = -1;
    if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_pybuffernd_arr.diminfo[1].shape;
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_y;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":75
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 *         arr[i, 2] = z             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_15 = 2;
    __pyx_t_11 = -1;
    if (unlikely(__pyx_t_14 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;
    if (__pyx_t_15 < 0) {
      __pyx_t_15 += __pyx_pybuffernd_arr.diminfo[1].shape;
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_z;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":76
 *         arr[i, 1] = y
 *         arr[i, 2] = z
 *     return arr             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":64
 * 
 * 
 * def sample_h3(h3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef unsigned int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.sample_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":1
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_45fill_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_45fill_h1 = {__Pyx_NAMESTR("fill_h1"), (PyCFunction)__pyx_pw_13_librootnumpy_45fill_h1, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_45fill_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0;
  PyArrayObject *__pyx_v_array = 0;
  PyArrayObject *__pyx_v_weights = 0;
  bool __pyx_v_return_indices;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_h1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};
    PyObject* values[4] = {0,0,0,0};

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":3
 * def fill_h1(hist,
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */
    values[2] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fill_h1", 0, 2, 4, 1); {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_h1") < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_hist = values[0];
    __pyx_v_array = ((PyArrayObject *)values[1]);
    __pyx_v_weights = ((PyArrayObject *)values[2]);
    if (values[3]) {
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":4
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 */
      __pyx_v_return_indices = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_h1", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.fill_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13_librootnumpy_44fill_h1(__pyx_self, __pyx_v_hist, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":1
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_44fill_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TH1 *__pyx_v__hist;
  long __pyx_v_size;
  PyArrayObject *__pyx_v_idx = 0;
  long __pyx_v_i;
  int __pyx_v_bin_idx;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array;
  __Pyx_Buffer __pyx_pybuffer_array;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx;
  __Pyx_Buffer __pyx_pybuffer_idx;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights;
  __Pyx_Buffer __pyx_pybuffer_weights;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  long __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fill_h1", 0);
  __pyx_pybuffer_idx.pybuffer.buf = NULL;
  __pyx_pybuffer_idx.refcount = 0;
  __pyx_pybuffernd_idx.data = NULL;
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;
  __pyx_pybuffer_array.pybuffer.buf = NULL;
  __pyx_pybuffer_array.refcount = 0;
  __pyx_pybuffernd_array.data = NULL;
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;
  __pyx_pybuffer_weights.pybuffer.buf = NULL;
  __pyx_pybuffer_weights.refcount = 0;
  __pyx_pybuffernd_weights.data = NULL;
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":6
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__hist = ((TH1 *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":7
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef long i
 */
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":8
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__16, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[6]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":11
 *     cdef long i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */
  __pyx_t_7 = (__pyx_v_return_indices != 0);
  if (__pyx_t_7) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":12
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_9 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
      }
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));
    __pyx_t_8 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":13
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i], weights[i])
 */
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);
  __pyx_t_13 = (__pyx_t_7 != 0);
  if (__pyx_t_13) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":14
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i], weights[i])
 *             if return_indices:
 */
    __pyx_t_14 = __pyx_v_size;
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":15
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */
      __pyx_t_15 = __pyx_v_i;
      __pyx_t_9 = -1;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_pybuffernd_array.diminfo[0].shape;
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_16 = __pyx_v_i;
      __pyx_t_9 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_pybuffernd_weights.diminfo[0].shape;
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_weights.diminfo[0].shape)) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":16
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */
      __pyx_t_13 = (__pyx_v_return_indices != 0);
      if (__pyx_t_13) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":17
 *             bin_idx = _hist.Fill(array[i], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */
        __pyx_t_17 = __pyx_v_i;
        __pyx_t_9 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_pybuffernd_idx.diminfo[0].shape;
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[6]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L4;
  }
  /*else*/ {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":19
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i])
 *             if return_indices:
 */
    __pyx_t_14 = __pyx_v_size;
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":20
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */
      __pyx_t_18 = __pyx_v_i;
      __pyx_t_9 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_pybuffernd_array.diminfo[0].shape;
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_array.diminfo[0].strides)));

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":21
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */
      __pyx_t_13 = (__pyx_v_return_indices != 0);
      if (__pyx_t_13) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":22
 *             bin_idx = _hist.Fill(array[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */
        __pyx_t_19 = __pyx_v_i;
        __pyx_t_9 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_idx.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[6]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;
        goto __pyx_L10;
      }
      __pyx_L10:;
    }
  }
  __pyx_L4:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":23
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */
  __pyx_t_13 = (__pyx_v_return_indices != 0);
  if (__pyx_t_13) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":24
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * def fill_h2(hist,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));
    __pyx_r = ((PyObject *)__pyx_v_idx);
    goto __pyx_L0;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":1
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.fill_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":26
 *         return idx
 * 
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_47fill_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_47fill_h2 = {__Pyx_NAMESTR("fill_h2"), (PyCFunction)__pyx_pw_13_librootnumpy_47fill_h2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_47fill_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0;
  PyArrayObject *__pyx_v_array = 0;
  PyArrayObject *__pyx_v_weights = 0;
  bool __pyx_v_return_indices;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_h2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};
    PyObject* values[4] = {0,0,0,0};

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":28
 * def fill_h2(hist,
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */
    values[2] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fill_h2", 0, 2, 4, 1); {__pyx_filename = __pyx_f[6]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_h2") < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_hist = values[0];
    __pyx_v_array = ((PyArrayObject *)values[1]);
    __pyx_v_weights = ((PyArrayObject *)values[2]);
    if (values[3]) {
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":29
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 */
      __pyx_v_return_indices = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_h2", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[6]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.fill_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13_librootnumpy_46fill_h2(__pyx_self, __pyx_v_hist, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":26
 *         return idx
 * 
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_46fill_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TH2 *__pyx_v__hist;
  long __pyx_v_size;
  PyArrayObject *__pyx_v_idx = 0;
  long __pyx_v_i;
  int __pyx_v_bin_idx;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array;
  __Pyx_Buffer __pyx_pybuffer_array;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx;
  __Pyx_Buffer __pyx_pybuffer_idx;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights;
  __Pyx_Buffer __pyx_pybuffer_weights;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  long __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  long __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fill_h2", 0);
  __pyx_pybuffer_idx.pybuffer.buf = NULL;
  __pyx_pybuffer_idx.refcount = 0;
  __pyx_pybuffernd_idx.data = NULL;
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;
  __pyx_pybuffer_array.pybuffer.buf = NULL;
  __pyx_pybuffer_array.refcount = 0;
  __pyx_pybuffernd_array.data = NULL;
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;
  __pyx_pybuffer_weights.pybuffer.buf = NULL;
  __pyx_pybuffer_weights.refcount = 0;
  __pyx_pybuffernd_weights.data = NULL;
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":31
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__hist = ((TH2 *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":32
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef long i
 */
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":33
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__17, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[6]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":36
 *     cdef long i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */
  __pyx_t_7 = (__pyx_v_return_indices != 0);
  if (__pyx_t_7) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":37
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_9 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
      }
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));
    __pyx_t_8 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":38
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 */
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);
  __pyx_t_13 = (__pyx_t_7 != 0);
  if (__pyx_t_13) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":39
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:
 */
    __pyx_t_14 = __pyx_v_size;
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":40
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */
      __pyx_t_15 = __pyx_v_i;
      __pyx_t_16 = 0;
      __pyx_t_9 = -1;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_pybuffernd_array.diminfo[0].shape;
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_pybuffernd_array.diminfo[1].shape;
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_17 = __pyx_v_i;
      __pyx_t_18 = 1;
      __pyx_t_9 = -1;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_pybuffernd_array.diminfo[0].shape;
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_pybuffernd_array.diminfo[1].shape;
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_19 = __pyx_v_i;
      __pyx_t_9 = -1;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_pybuffernd_weights.diminfo[0].shape;
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_weights.diminfo[0].shape)) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":41
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */
      __pyx_t_13 = (__pyx_v_return_indices != 0);
      if (__pyx_t_13) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":42
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */
        __pyx_t_20 = __pyx_v_i;
        __pyx_t_9 = -1;
        if (__pyx_t_20 < 0) {
          __pyx_t_20 += __pyx_pybuffernd_idx.diminfo[0].shape;
          if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[6]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L4;
  }
  /*else*/ {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":44
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])
 *             if return_indices:
 */
    __pyx_t_14 = __pyx_v_size;
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":45
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */
      __pyx_t_21 = __pyx_v_i;
      __pyx_t_22 = 0;
      __pyx_t_9 = -1;
      if (__pyx_t_21 < 0) {
        __pyx_t_21 += __pyx_pybuffernd_array.diminfo[0].shape;
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
      if (__pyx_t_22 < 0) {
        __pyx_t_22 += __pyx_pybuffernd_array.diminfo[1].shape;
        if (unlikely(__pyx_t_22 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_23 = __pyx_v_i;
      __pyx_t_24 = 1;
      __pyx_t_9 = -1;
      if (__pyx_t_23 < 0) {
        __pyx_t_23 += __pyx_pybuffernd_array.diminfo[0].shape;
        if (unlikely(__pyx_t_23 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
      if (__pyx_t_24 < 0) {
        __pyx_t_24 += __pyx_pybuffernd_array.diminfo[1].shape;
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_array.diminfo[1].strides)));

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":46
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */
      __pyx_t_13 = (__pyx_v_return_indices != 0);
      if (__pyx_t_13) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":47
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */
        __pyx_t_25 = __pyx_v_i;
        __pyx_t_9 = -1;
        if (__pyx_t_25 < 0) {
          __pyx_t_25 += __pyx_pybuffernd_idx.diminfo[0].shape;
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[6]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;
        goto __pyx_L10;
      }
      __pyx_L10:;
    }
  }
  __pyx_L4:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":48
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */
  __pyx_t_13 = (__pyx_v_return_indices != 0);
  if (__pyx_t_13) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":49
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * def fill_h3(hist,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));
    __pyx_r = ((PyObject *)__pyx_v_idx);
    goto __pyx_L0;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":26
 *         return idx
 * 
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.fill_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":51
 *         return idx
 * 
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_49fill_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_49fill_h3 = {__Pyx_NAMESTR("fill_h3"), (PyCFunction)__pyx_pw_13_librootnumpy_49fill_h3, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_49fill_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0;
  PyArrayObject *__pyx_v_array = 0;
  PyArrayObject *__pyx_v_weights = 0;
  bool __pyx_v_return_indices;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_h3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};
    PyObject* values[4] = {0,0,0,0};

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":53
 * def fill_h3(hist,
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */
    values[2] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fill_h3", 0, 2, 4, 1); {__pyx_filename = __pyx_f[6]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_h3") < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_hist = values[0];
    __pyx_v_array = ((PyArrayObject *)values[1]);
    __pyx_v_weights = ((PyArrayObject *)values[2]);
    if (values[3]) {
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":54
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 */
      __pyx_v_return_indices = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_h3", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[6]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.fill_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13_librootnumpy_48fill_h3(__pyx_self, __pyx_v_hist, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":51
 *         return idx
 * 
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_48fill_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TH3 *__pyx_v__hist;
  long __pyx_v_size;
  PyArrayObject *__pyx_v_idx = 0;
  long __pyx_v_i;
  int __pyx_v_bin_idx;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array;
  __Pyx_Buffer __pyx_pybuffer_array;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx;
  __Pyx_Buffer __pyx_pybuffer_idx;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights;
  __Pyx_Buffer __pyx_pybuffer_weights;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  long __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  long __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  long __pyx_t_27;
  long __pyx_t_28;
  long __pyx_t_29;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fill_h3", 0);
  __pyx_pybuffer_idx.pybuffer.buf = NULL;
  __pyx_pybuffer_idx.refcount = 0;
  __pyx_pybuffernd_idx.data = NULL;
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;
  __pyx_pybuffer_array.pybuffer.buf = NULL;
  __pyx_pybuffer_array.refcount = 0;
  __pyx_pybuffernd_array.data = NULL;
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;
  __pyx_pybuffer_weights.pybuffer.buf = NULL;
  __pyx_pybuffer_weights.refcount = 0;
  __pyx_pybuffernd_weights.data = NULL;
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":56
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__hist = ((TH3 *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":57
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef long i
 */
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":58
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__18, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[6]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":61
 *     cdef long i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */
  __pyx_t_7 = (__pyx_v_return_indices != 0);
  if (__pyx_t_7) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":62
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_9 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
      }
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));
    __pyx_t_8 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":63
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 */
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);
  __pyx_t_13 = (__pyx_t_7 != 0);
  if (__pyx_t_13) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":64
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:
 */
    __pyx_t_14 = __pyx_v_size;
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":65
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */
      __pyx_t_15 = __pyx_v_i;
      __pyx_t_16 = 0;
      __pyx_t_9 = -1;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_pybuffernd_array.diminfo[0].shape;
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_pybuffernd_array.diminfo[1].shape;
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_17 = __pyx_v_i;
      __pyx_t_18 = 1;
      __pyx_t_9 = -1;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_pybuffernd_array.diminfo[0].shape;
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_pybuffernd_array.diminfo[1].shape;
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_19 = __pyx_v_i;
      __pyx_t_20 = 2;
      __pyx_t_9 = -1;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_pybuffernd_array.diminfo[0].shape;
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
      if (__pyx_t_20 < 0) {
        __pyx_t_20 += __pyx_pybuffernd_array.diminfo[1].shape;
        if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_21 = __pyx_v_i;
      __pyx_t_9 = -1;
      if (__pyx_t_21 < 0) {
        __pyx_t_21 += __pyx_pybuffernd_weights.diminfo[0].shape;
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_weights.diminfo[0].shape)) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":66
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */
      __pyx_t_13 = (__pyx_v_return_indices != 0);
      if (__pyx_t_13) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":67
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */
        __pyx_t_22 = __pyx_v_i;
        __pyx_t_9 = -1;
        if (__pyx_t_22 < 0) {
          __pyx_t_22 += __pyx_pybuffernd_idx.diminfo[0].shape;
          if (unlikely(__pyx_t_22 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[6]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L4;
  }
  /*else*/ {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":69
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:
 */
    __pyx_t_14 = __pyx_v_size;
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":70
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */
      __pyx_t_23 = __pyx_v_i;
      __pyx_t_24 = 0;
      __pyx_t_9 = -1;
      if (__pyx_t_23 < 0) {
        __pyx_t_23 += __pyx_pybuffernd_array.diminfo[0].shape;
        if (unlikely(__pyx_t_23 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
      if (__pyx_t_24 < 0) {
        __pyx_t_24 += __pyx_pybuffernd_array.diminfo[1].shape;
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_25 = __pyx_v_i;
      __pyx_t_26 = 1;
      __pyx_t_9 = -1;
      if (__pyx_t_25 < 0) {
        __pyx_t_25 += __pyx_pybuffernd_array.diminfo[0].shape;
        if (unlikely(__pyx_t_25 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
      if (__pyx_t_26 < 0) {
        __pyx_t_26 += __pyx_pybuffernd_array.diminfo[1].shape;
        if (unlikely(__pyx_t_26 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_27 = __pyx_v_i;
      __pyx_t_28 = 2;
      __pyx_t_9 = -1;
      if (__pyx_t_27 < 0) {
        __pyx_t_27 += __pyx_pybuffernd_array.diminfo[0].shape;
        if (unlikely(__pyx_t_27 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
      if (__pyx_t_28 < 0) {
        __pyx_t_28 += __pyx_pybuffernd_array.diminfo[1].shape;
        if (unlikely(__pyx_t_28 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_array.diminfo[1].strides)));

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":71
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */
      __pyx_t_13 = (__pyx_v_return_indices != 0);
      if (__pyx_t_13) {

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":72
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */
        __pyx_t_29 = __pyx_v_i;
        __pyx_t_9 = -1;
        if (__pyx_t_29 < 0) {
          __pyx_t_29 += __pyx_pybuffernd_idx.diminfo[0].shape;
          if (unlikely(__pyx_t_29 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_29 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[6]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;
        goto __pyx_L10;
      }
      __pyx_L10:;
    }
  }
  __pyx_L4:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":73
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 */
  __pyx_t_13 = (__pyx_v_return_indices != 0);
  if (__pyx_t_13) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":74
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));
    __pyx_r = ((PyObject *)__pyx_v_idx);
    goto __pyx_L0;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":51
 *         return idx
 * 
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.fill_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":1
 * def fill_g1(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_51fill_g1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_51fill_g1 = {__Pyx_NAMESTR("fill_g1"), (PyCFunction)__pyx_pw_13_librootnumpy_51fill_g1, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_51fill_g1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0;
  PyArrayObject *__pyx_v_array = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_g1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_array,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fill_g1", 1, 2, 2, 1); {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_g1") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = values[0];
    __pyx_v_array = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_g1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.fill_g1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13_librootnumpy_50fill_g1(__pyx_self, __pyx_v_graph, __pyx_v_array);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_50fill_g1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array) {
  TGraph *__pyx_v__graph;
  int __pyx_v_size;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array;
  __Pyx_Buffer __pyx_pybuffer_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fill_g1", 0);
  __pyx_pybuffer_array.pybuffer.buf = NULL;
  __pyx_pybuffer_array.refcount = 0;
  __pyx_pybuffernd_array.data = NULL;
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":4
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)             # <<<<<<<<<<<<<<
 *     cdef int size = array.shape[0]
 *     cdef int i
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_graph); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__graph = ((TGraph *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":5
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 *     cdef int size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef int i
 *     _graph.Set(size)
 */
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":7
 *     cdef int size = array.shape[0]
 *     cdef int i
 *     _graph.Set(size)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 */
  __pyx_v__graph->Set(__pyx_v_size);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":8
 *     cdef int i
 *     _graph.Set(size)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 * 
 */
  __pyx_t_2 = __pyx_v_size;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_2; __pyx_v_i++) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":9
 *     _graph.Set(size)
 *     for i from 0 <= i < size:
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])             # <<<<<<<<<<<<<<
 * 
 * def fill_g2(graph,
 */
    __pyx_t_3 = __pyx_v_i;
    __pyx_t_4 = 0;
    __pyx_t_5 = -1;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_pybuffernd_array.diminfo[0].shape;
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_5 = 0;
    } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_5 = 0;
    if (__pyx_t_4 < 0) {
      __pyx_t_4 += __pyx_pybuffernd_array.diminfo[1].shape;
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 1;
    } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_5 = 1;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 1;
    __pyx_t_7 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_pybuffernd_array.diminfo[0].shape;
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_7 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_7 = 0;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_pybuffernd_array.diminfo[1].shape;
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
    } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_7 = 1;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v__graph->SetPoint(__pyx_v_i, (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_array.diminfo[1].strides)));
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":1
 * def fill_g1(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.fill_g1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":11
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 * 
 * def fill_g2(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_53fill_g2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_53fill_g2 = {__Pyx_NAMESTR("fill_g2"), (PyCFunction)__pyx_pw_13_librootnumpy_53fill_g2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_13_librootnumpy_53fill_g2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0;
  PyArrayObject *__pyx_v_array = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_g2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_array,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fill_g2", 1, 2, 2, 1); {__pyx_filename = __pyx_f[7]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_g2") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = values[0];
    __pyx_v_array = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_g2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[7]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.fill_g2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13_librootnumpy_52fill_g2(__pyx_self, __pyx_v_graph, __pyx_v_array);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_52fill_g2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array) {
  TGraph2D *__pyx_v__graph;
  int __pyx_v_size;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array;
  __Pyx_Buffer __pyx_pybuffer_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fill_g2", 0);
  __pyx_pybuffer_array.pybuffer.buf = NULL;
  __pyx_pybuffer_array.refcount = 0;
  __pyx_pybuffernd_array.data = NULL;
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":14
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TGraph2D* _graph = <TGraph2D*> PyCObject_AsVoidPtr(graph)             # <<<<<<<<<<<<<<
 *     cdef int size = array.shape[0]
 *     cdef int i
 */
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_graph); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__graph = ((TGraph2D *)__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":15
 *     # perform type checking on python side
 *     cdef TGraph2D* _graph = <TGraph2D*> PyCObject_AsVoidPtr(graph)
 *     cdef int size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef int i
 *     _graph.Set(size)
 */
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":17
 *     cdef int size = array.shape[0]
 *     cdef int i
 *     _graph.Set(size)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         _graph.SetPoint(i, array[i, 0], array[i, 1], array[i, 2])
 */
  __pyx_v__graph->Set(__pyx_v_size);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":18
 *     cdef int i
 *     _graph.Set(size)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         _graph.SetPoint(i, array[i, 0], array[i, 1], array[i, 2])
 */
  __pyx_t_2 = __pyx_v_size;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_2; __pyx_v_i++) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":19
 *     _graph.Set(size)
 *     for i from 0 <= i < size:
 *         _graph.SetPoint(i, array[i, 0], array[i, 1], array[i, 2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_3 = __pyx_v_i;
    __pyx_t_4 = 0;
    __pyx_t_5 = -1;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_pybuffernd_array.diminfo[0].shape;
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_5 = 0;
    } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_5 = 0;
    if (__pyx_t_4 < 0) {
      __pyx_t_4 += __pyx_pybuffernd_array.diminfo[1].shape;
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 1;
    } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_5 = 1;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 1;
    __pyx_t_7 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_pybuffernd_array.diminfo[0].shape;
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_7 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_7 = 0;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_pybuffernd_array.diminfo[1].shape;
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
    } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_7 = 1;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = 2;
    __pyx_t_9 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_pybuffernd_array.diminfo[0].shape;
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_pybuffernd_array.diminfo[1].shape;
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v__graph->SetPoint(__pyx_v_i, (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_8, __pyx_pybuffernd_array.diminfo[1].strides)));
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":11
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 * 
 * def fill_g2(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.fill_g2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pw_13_librootnumpy_55blockwise_inner_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_blockwise_inner_join(PyObject *__pyx_v_data, PyObject *__pyx_v_left, PyObject *__pyx_v_foreign_key, PyObject *__pyx_v_right, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_13_librootnumpy_blockwise_inner_join *__pyx_optional_args) {

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":12
 * 
 * cpdef blockwise_inner_join(data, left, foreign_key, right,
 *                            force_repeat=None,             # <<<<<<<<<<<<<<
 *                            fk_name=None):
 *     """
 */
  PyObject *__pyx_v_force_repeat = ((PyObject *)Py_None);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":13
 * cpdef blockwise_inner_join(data, left, foreign_key, right,
 *                            force_repeat=None,
 *                            fk_name=None):             # <<<<<<<<<<<<<<
 *     """
 *     perform a blockwise inner join from names specified in left to right via
 */
  PyObject *__pyx_v_fk_name = ((PyObject *)Py_None);
  PyObject *__pyx_v_fk = NULL;
  PyObject *__pyx_v_scalar_mode = NULL;
  PyObject *__pyx_v_i_fk_name = NULL;
  PyObject *__pyx_v_repeat_columns = NULL;
  PyArrayObject *__pyx_v_repeat_indices = 0;
  PyObject *__pyx_v_stretch_columns = NULL;
  PyArrayObject *__pyx_v_stretch_indices = 0;
  PyArrayObject *__pyx_v_right_indices = 0;
  PyObject *__pyx_v_new_dtype = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_ret = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_indices;
  __Pyx_Buffer __pyx_pybuffer_repeat_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_indices;
  __Pyx_Buffer __pyx_pybuffer_right_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_indices;
  __Pyx_Buffer __pyx_pybuffer_stretch_indices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  PyArrayObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("blockwise_inner_join", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_force_repeat = __pyx_optional_args->force_repeat;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_fk_name = __pyx_optional_args->fk_name;
      }
    }
  }
  __Pyx_INCREF(__pyx_v_force_repeat);
  __Pyx_INCREF(__pyx_v_fk_name);
  __pyx_pybuffer_repeat_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_repeat_indices.refcount = 0;
  __pyx_pybuffernd_repeat_indices.data = NULL;
  __pyx_pybuffernd_repeat_indices.rcbuffer = &__pyx_pybuffer_repeat_indices;
  __pyx_pybuffer_stretch_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_stretch_indices.refcount = 0;
  __pyx_pybuffernd_stretch_indices.data = NULL;
  __pyx_pybuffernd_stretch_indices.rcbuffer = &__pyx_pybuffer_stretch_indices;
  __pyx_pybuffer_right_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_right_indices.refcount = 0;
  __pyx_pybuffernd_right_indices.data = NULL;
  __pyx_pybuffernd_right_indices.rcbuffer = &__pyx_pybuffer_right_indices;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":64
 * 
 *     """
 *     fk = foreign_key if not isinstance(foreign_key, basestring) else data[foreign_key]             # <<<<<<<<<<<<<<
 * 
 *     # foreign key is given by array of scalar not array of array
 */
  __pyx_t_2 = __Pyx_PyBaseString_Check(__pyx_v_foreign_key); 
  if (((!(__pyx_t_2 != 0)) != 0)) {
    __Pyx_INCREF(__pyx_v_foreign_key);
    __pyx_t_1 = __pyx_v_foreign_key;
  } else {
    __pyx_t_3 = PyObject_GetItem(__pyx_v_data, __pyx_v_foreign_key); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_v_fk = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":67
 * 
 *     # foreign key is given by array of scalar not array of array
 *     scalar_mode = fk.dtype != 'O'             # <<<<<<<<<<<<<<
 * 
 *     # determine fk_name to be fk1 fk2 ....
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_fk, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_n_s_O, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_scalar_mode = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":71
 *     # determine fk_name to be fk1 fk2 ....
 *     # whichever is the first one that doesn't collide
 *     if fk_name is None:             # <<<<<<<<<<<<<<
 *         i_fk_name = 1
 *         fk_name = 'fk%d'%i_fk_name
 */
  __pyx_t_2 = (__pyx_v_fk_name == Py_None);
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":72
 *     # whichever is the first one that doesn't collide
 *     if fk_name is None:
 *         i_fk_name = 1             # <<<<<<<<<<<<<<
 *         fk_name = 'fk%d'%i_fk_name
 *         while fk_name in left or fk_name in right:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_i_fk_name = __pyx_int_1;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":73
 *     if fk_name is None:
 *         i_fk_name = 1
 *         fk_name = 'fk%d'%i_fk_name             # <<<<<<<<<<<<<<
 *         while fk_name in left or fk_name in right:
 *             i_fk_name += 1
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_fk_d, __pyx_v_i_fk_name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_fk_name, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":74
 *         i_fk_name = 1
 *         fk_name = 'fk%d'%i_fk_name
 *         while fk_name in left or fk_name in right:             # <<<<<<<<<<<<<<
 *             i_fk_name += 1
 *             fk_name = 'fk%d'%i_fk_name
 */
    while (1) {
      __pyx_t_4 = (__Pyx_PySequence_Contains(__pyx_v_fk_name, __pyx_v_left, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!(__pyx_t_4 != 0)) {
        __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_v_fk_name, __pyx_v_right, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_5 = (__pyx_t_2 != 0);
      } else {
        __pyx_t_5 = (__pyx_t_4 != 0);
      }
      if (!__pyx_t_5) break;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":75
 *         fk_name = 'fk%d'%i_fk_name
 *         while fk_name in left or fk_name in right:
 *             i_fk_name += 1             # <<<<<<<<<<<<<<
 *             fk_name = 'fk%d'%i_fk_name
 * 
 */
      __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_i_fk_name, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_i_fk_name, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":76
 *         while fk_name in left or fk_name in right:
 *             i_fk_name += 1
 *             fk_name = 'fk%d'%i_fk_name             # <<<<<<<<<<<<<<
 * 
 *     force_repeat = [] if force_repeat is None else force_repeat
 */
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_fk_d, __pyx_v_i_fk_name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_fk_name, __pyx_t_3);
      __pyx_t_3 = 0;
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":78
 *             fk_name = 'fk%d'%i_fk_name
 * 
 *     force_repeat = [] if force_repeat is None else force_repeat             # <<<<<<<<<<<<<<
 * 
 *     if scalar_mode:
 */
  __pyx_t_5 = (__pyx_v_force_repeat == Py_None);
  if ((__pyx_t_5 != 0)) {
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_force_repeat);
    __pyx_t_3 = __pyx_v_force_repeat;
  }
  __Pyx_DECREF_SET(__pyx_v_force_repeat, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":80
 *     force_repeat = [] if force_repeat is None else force_repeat
 * 
 *     if scalar_mode:             # <<<<<<<<<<<<<<
 *         # auto repeat everything on the left in scalar mode
 *         # not really repeat since there would be exactly one copy
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_scalar_mode); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_5) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":83
 *         # auto repeat everything on the left in scalar mode
 *         # not really repeat since there would be exactly one copy
 *         force_repeat += left             # <<<<<<<<<<<<<<
 * 
 *     repeat_columns = [c for c in left if data.dtype[c]!='O' or c in force_repeat]
 */
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_force_repeat, __pyx_v_left); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_force_repeat, __pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":85
 *         force_repeat += left
 * 
 *     repeat_columns = [c for c in left if data.dtype[c]!='O' or c in force_repeat]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] repeat_indices = \
 *         np.array(map(data.dtype.names.index, repeat_columns), np.int)
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_v_left) || PyTuple_CheckExact(__pyx_v_left)) {
    __pyx_t_1 = __pyx_v_left; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_left); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_8 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyObject_GetItem(__pyx_t_8, __pyx_v_c); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_9, __pyx_n_s_O, Py_NE)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (!__pyx_t_5) {
      __pyx_t_4 = (__Pyx_PySequence_Contains(__pyx_v_c, __pyx_v_force_repeat, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = __pyx_t_4;
    } else {
      __pyx_t_2 = __pyx_t_5;
    }
    if (__pyx_t_2) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_v_c))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L9;
    }
    __pyx_L9:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_repeat_columns = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":87
 *     repeat_columns = [c for c in left if data.dtype[c]!='O' or c in force_repeat]
 *     cdef np.ndarray[np.int_t] repeat_indices = \
 *         np.array(map(data.dtype.names.index, repeat_columns), np.int)             # <<<<<<<<<<<<<<
 * 
 *     stretch_columns = [c for c in left if c not in repeat_columns]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_names); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_repeat_columns);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_repeat_columns);
  __Pyx_GIVEREF(__pyx_v_repeat_columns);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_repeat_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_repeat_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_repeat_indices = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":89
 *         np.array(map(data.dtype.names.index, repeat_columns), np.int)
 * 
 *     stretch_columns = [c for c in left if c not in repeat_columns]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] stretch_indices = \
 *         np.array(map(data.dtype.names.index, stretch_columns), np.int)
 */
  __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyList_CheckExact(__pyx_v_left) || PyTuple_CheckExact(__pyx_v_left)) {
    __pyx_t_9 = __pyx_v_left; __Pyx_INCREF(__pyx_t_9); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_left); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = Py_TYPE(__pyx_t_9)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_9)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_9)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_9)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_9);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_v_c, __pyx_v_repeat_columns, Py_NE)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (__pyx_t_5) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_v_c))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L12;
    }
    __pyx_L12:;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_stretch_columns = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":91
 *     stretch_columns = [c for c in left if c not in repeat_columns]
 *     cdef np.ndarray[np.int_t] stretch_indices = \
 *         np.array(map(data.dtype.names.index, stretch_columns), np.int)             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray[np.int_t] right_indices = \
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_names); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_index); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_stretch_columns);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_stretch_columns);
  __Pyx_GIVEREF(__pyx_v_stretch_columns);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_8 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_stretch_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_stretch_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_11 = 0;
  __pyx_v_stretch_indices = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":94
 * 
 *     cdef np.ndarray[np.int_t] right_indices = \
 *         np.array(map(data.dtype.names.index, right), np.int)             # <<<<<<<<<<<<<<
 * 
 *     # making new dtype
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_names); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_right);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_right);
  __Pyx_GIVEREF(__pyx_v_right);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_12 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_right_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_right_indices.diminfo[0].strides = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_indices.diminfo[0].shape = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_12 = 0;
  __pyx_v_right_indices = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":97
 * 
 *     # making new dtype
 *     new_dtype = []             # <<<<<<<<<<<<<<
 *     for c in left: # preserve order-ish
 *         if c in repeat_columns:
 */
  __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_new_dtype = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":98
 *     # making new dtype
 *     new_dtype = []
 *     for c in left: # preserve order-ish             # <<<<<<<<<<<<<<
 *         if c in repeat_columns:
 *             new_dtype.append((c,data.dtype[c]))
 */
  if (PyList_CheckExact(__pyx_v_left) || PyTuple_CheckExact(__pyx_v_left)) {
    __pyx_t_8 = __pyx_v_left; __Pyx_INCREF(__pyx_t_8); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_left); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = Py_TYPE(__pyx_t_8)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_8)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_8)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_9); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_8)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_9); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_9 = __pyx_t_7(__pyx_t_8);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":99
 *     new_dtype = []
 *     for c in left: # preserve order-ish
 *         if c in repeat_columns:             # <<<<<<<<<<<<<<
 *             new_dtype.append((c,data.dtype[c]))
 *         elif c in stretch_columns:
 */
    __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_v_c, __pyx_v_repeat_columns, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (__pyx_t_2) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":100
 *     for c in left: # preserve order-ish
 *         if c in repeat_columns:
 *             new_dtype.append((c,data.dtype[c]))             # <<<<<<<<<<<<<<
 *         elif c in stretch_columns:
 *             new_dtype.append((c,data[c][0].dtype))
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = PyObject_GetItem(__pyx_t_9, __pyx_v_c); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_c);
      __Pyx_GIVEREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_new_dtype, __pyx_t_9); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L15;
    }

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":101
 *         if c in repeat_columns:
 *             new_dtype.append((c,data.dtype[c]))
 *         elif c in stretch_columns:             # <<<<<<<<<<<<<<
 *             new_dtype.append((c,data[c][0].dtype))
 *     for c in right: # preserve order_ish
 */
    __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_v_c, __pyx_v_stretch_columns, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (__pyx_t_5) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":102
 *             new_dtype.append((c,data.dtype[c]))
 *         elif c in stretch_columns:
 *             new_dtype.append((c,data[c][0].dtype))             # <<<<<<<<<<<<<<
 *     for c in right: # preserve order_ish
 *         new_dtype.append((c,data[c][0].dtype))
 */
      __pyx_t_9 = PyObject_GetItem(__pyx_v_data, __pyx_v_c); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_dtype); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_c);
      __Pyx_GIVEREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_new_dtype, __pyx_t_1); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L15;
    }
    __pyx_L15:;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":103
 *         elif c in stretch_columns:
 *             new_dtype.append((c,data[c][0].dtype))
 *     for c in right: # preserve order_ish             # <<<<<<<<<<<<<<
 *         new_dtype.append((c,data[c][0].dtype))
 * 
 */
  if (PyList_CheckExact(__pyx_v_right) || PyTuple_CheckExact(__pyx_v_right)) {
    __pyx_t_8 = __pyx_v_right; __Pyx_INCREF(__pyx_t_8); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_right); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = Py_TYPE(__pyx_t_8)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_8)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_8)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_8)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_8);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":104
 *             new_dtype.append((c,data[c][0].dtype))
 *     for c in right: # preserve order_ish
 *         new_dtype.append((c,data[c][0].dtype))             # <<<<<<<<<<<<<<
 * 
 *     new_dtype.append((fk_name,fk[0].dtype))
 */
    __pyx_t_1 = PyObject_GetItem(__pyx_v_data, __pyx_v_c); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_c);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_c);
    __Pyx_GIVEREF(__pyx_v_c);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_new_dtype, __pyx_t_9); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":106
 *         new_dtype.append((c,data[c][0].dtype))
 * 
 *     new_dtype.append((fk_name,fk[0].dtype))             # <<<<<<<<<<<<<<
 *     ret = None
 * 
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_fk, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_dtype); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_fk_name);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_fk_name);
  __Pyx_GIVEREF(__pyx_v_fk_name);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_new_dtype, __pyx_t_8); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":107
 * 
 *     new_dtype.append((fk_name,fk[0].dtype))
 *     ret = None             # <<<<<<<<<<<<<<
 * 
 *     if scalar_mode: # scalar key mode
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_ret = Py_None;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":109
 *     ret = None
 * 
 *     if scalar_mode: # scalar key mode             # <<<<<<<<<<<<<<
 *         ret = _scalar_fk_inner_join(
 *             data, right, fk, fk_name, new_dtype,
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_scalar_mode); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_5) {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":111
 *     if scalar_mode: # scalar key mode
 *         ret = _scalar_fk_inner_join(
 *             data, right, fk, fk_name, new_dtype,             # <<<<<<<<<<<<<<
 *             repeat_columns, stretch_columns,
 *             repeat_indices, stretch_indices, right_indices)
 */
    if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!(likely(((__pyx_v_fk) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_fk, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":110
 * 
 *     if scalar_mode: # scalar key mode
 *         ret = _scalar_fk_inner_join(             # <<<<<<<<<<<<<<
 *             data, right, fk, fk_name, new_dtype,
 *             repeat_columns, stretch_columns,
 */
    __pyx_t_8 = __pyx_f_13_librootnumpy__scalar_fk_inner_join(((PyArrayObject *)__pyx_v_data), __pyx_v_right, ((PyArrayObject *)__pyx_v_fk), __pyx_v_fk_name, __pyx_v_new_dtype, __pyx_v_repeat_columns, __pyx_v_stretch_columns, ((PyArrayObject *)__pyx_v_repeat_indices), ((PyArrayObject *)__pyx_v_stretch_indices), ((PyArrayObject *)__pyx_v_right_indices)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_8);
    __pyx_t_8 = 0;
    goto __pyx_L18;
  }
  /*else*/ {

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":116
 *     else: # vector key mode
 *         ret = _vector_fk_inner_join(
 *             data, right, fk, fk_name, new_dtype,             # <<<<<<<<<<<<<<
 *             repeat_columns, stretch_columns,
 *             repeat_indices, stretch_indices, right_indices)
 */
    if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!(likely(((__pyx_v_fk) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_fk, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":115
 *             repeat_indices, stretch_indices, right_indices)
 *     else: # vector key mode
 *         ret = _vector_fk_inner_join(             # <<<<<<<<<<<<<<
 *             data, right, fk, fk_name, new_dtype,
 *             repeat_columns, stretch_columns,
 */
    __pyx_t_8 = __pyx_f_13_librootnumpy__vector_fk_inner_join(((PyArrayObject *)__pyx_v_data), __pyx_v_right, ((PyArrayObject *)__pyx_v_fk), __pyx_v_fk_name, __pyx_v_new_dtype, __pyx_v_repeat_columns, __pyx_v_stretch_columns, ((PyArrayObject *)__pyx_v_repeat_indices), ((PyArrayObject *)__pyx_v_stretch_indices), ((PyArrayObject *)__pyx_v_right_indices)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_8);
    __pyx_t_8 = 0;
  }
  __pyx_L18:;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":119
 *             repeat_columns, stretch_columns,
 *             repeat_indices, stretch_indices, right_indices)
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":11
 * # be careful of objects though you will need to INCREF it
 * 
 * cpdef blockwise_inner_join(data, left, foreign_key, right,             # <<<<<<<<<<<<<<
 *                            force_repeat=None,
 *                            fk_name=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy.blockwise_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_fk);
  __Pyx_XDECREF(__pyx_v_scalar_mode);
  __Pyx_XDECREF(__pyx_v_i_fk_name);
  __Pyx_XDECREF(__pyx_v_repeat_columns);
  __Pyx_XDECREF((PyObject *)__pyx_v_repeat_indices);
  __Pyx_XDECREF(__pyx_v_stretch_columns);
  __Pyx_XDECREF((PyObject *)__pyx_v_stretch_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_right_indices);
  __Pyx_XDECREF(__pyx_v_new_dtype);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_force_repeat);
  __Pyx_XDECREF(__pyx_v_fk_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_13_librootnumpy_55blockwise_inner_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13_librootnumpy_54blockwise_inner_join[] = "\n    perform a blockwise inner join from names specified in left to right via \n    foreign_key left->foreign_key->right.\n    \n    Parameters\n    ----------\n    \n    data : array\n        full data set\n\n    left : array\n        array of left side column names\n\n    foreign_key : array or string\n        numpy array or string foreign_key column name\n        This column can be either integer or array of int.\n        if foreign_key is array of int column, left column will \n        be treated according to left column type:\n\n        - Scalar columns or columns in force_repeat will be repeated\n\n        - Array columns not in force_repeat will be assumed to the\n          same length as foreign_key and will be strecthed by index \n\n    right : array\n        array of right side column names\n        These are array columns that each index foreign_key points to.\n        These columns are assumed to have the same length.\n\n    force_repeat : array\n        array of left column names that \n        will be force to stretch even if it's an array(useful when\n        you want to emulate multiple join)\n    \n    Examples\n    --------\n\n        >>> test_data = np.array([\n        (1.0, np.array([11,12,13]), np.array([1,0,1]), 0, np.array([1,2,3])),\n        (2.0, np.array([21,22,23]), np.array([-1,2,-1]), 1, np.array([31,32,33]))],\n        dtype=[('sl', np.float), ('al', 'O'), ('fk', 'O'), ('s_fk', np.int), ('ar', 'O')])\n        >>> blockwise_inner_join(test_data, ['sl', 'al'], test_data['fk'], ['ar'] )\n        array([(1.0, 11, 2, 1), (1.0, 12, 1, 0), (1.0, 13, 2, 1), (2.0, 22, 33, 2)], \n        dtype=[('sl', '<f8'), ('al', '<i8'), ('ar', '<i8'), ('fk', '<i8')])\n        >>> blockwise_inner_join(test_data, ['sl','al'], test_data['fk'], ['ar'], force_repeat=['al'])\n        array([(1.0, [11, 12, 13], 2, 1), (1.0, [11, 12, 13], 1, 0),\n        (1.0, [11, 12, 13], 2, 1), (2.0, [21, 22, 23], 33, 2)], \n        dtype=[('sl', '<f8'), ('al', '|O8'), ('ar', '<i""8'), ('fk', '<i8')])\n\n    ";
static PyObject *__pyx_pw_13_librootnumpy_55blockwise_inner_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_left = 0;
  PyObject *__pyx_v_foreign_key = 0;
  PyObject *__pyx_v_right = 0;
  PyObject *__pyx_v_force_repeat = 0;
  PyObject *__pyx_v_fk_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("blockwise_inner_join (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_left,&__pyx_n_s_foreign_key,&__pyx_n_s_right,&__pyx_n_s_force_repeat,&__pyx_n_s_fk_name,0};
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":12
 * 
 * cpdef blockwise_inner_join(data, left, foreign_key, right,
 *                            force_repeat=None,             # <<<<<<<<<<<<<<
 *                            fk_name=None):
 *     """
 */
    values[4] = ((PyObject *)Py_None);

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":13
 * cpdef blockwise_inner_join(data, left, foreign_key, right,
 *                            force_repeat=None,
 *                            fk_name=None):             # <<<<<<<<<<<<<<
 *     """
 *     perform a blockwise inner join from names specified in left to right via
 */
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_left)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("blockwise_inner_join", 0, 4, 6, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_foreign_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("blockwise_inner_join", 0, 4, 6, 2); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_right)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("blockwise_inner_join", 0, 4, 6, 3); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force_repeat);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fk_name);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "blockwise_inner_join") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = values[0];
    __pyx_v_left = values[1];
    __pyx_v_foreign_key = values[2];
    __pyx_v_right = values[3];
    __pyx_v_force_repeat = values[4];
    __pyx_v_fk_name = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("blockwise_inner_join", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_librootnumpy.blockwise_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_librootnumpy_54blockwise_inner_join(__pyx_self, __pyx_v_data, __pyx_v_left, __pyx_v_foreign_key, __pyx_v_right, __pyx_v_force_repeat, __pyx_v_fk_name);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":11
 * # be careful of objects though you will need to INCREF it
 * 
 * cpdef blockwise_inner_join(data, left, foreign_key, right,             # <<<<<<<<<<<<<<
 *                            force_repeat=None,
 *                            fk_name=None):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_librootnumpy_54blockwise_inner_join(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_left, PyObject *__pyx_v_foreign_key, PyObject *__pyx_v_right, PyObject *__pyx_v_force_repeat, PyObject *__pyx_v_fk_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_13_librootnumpy_blockwise_inner_join __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("blockwise_inner_join", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.force_repeat = __pyx_v_force_repeat;
  __pyx_t_2.fk_name = __pyx_v_fk_name;
  __pyx_t_1 = __pyx_f_13_librootnumpy_blockwise_inner_join(__pyx_v_data, __pyx_v_left, __pyx_v_foreign_key, __pyx_v_right, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_librootnumpy.blockwise_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":122
 * 
 * 
 * cdef _vector_fk_inner_join(np.ndarray data, right,  np.ndarray fk, fk_name,             # <<<<<<<<<<<<<<
 *                            new_dtype,
 *                            repeat_columns, stretch_columns,
 */

static PyObject *__pyx_f_13_librootnumpy__vector_fk_inner_join(PyArrayObject *__pyx_v_data, PyObject *__pyx_v_right, PyArrayObject *__pyx_v_fk, PyObject *__pyx_v_fk_name, PyObject *__pyx_v_new_dtype, PyObject *__pyx_v_repeat_columns, PyObject *__pyx_v_stretch_columns, PyArrayObject *__pyx_v_repeat_indices, PyArrayObject *__pyx_v_stretch_indices, PyArrayObject *__pyx_v_right_indices) {
  long __pyx_v_ndata;
  PyArrayObject *__pyx_v_first_right = 0;
  PyArrayObject *__pyx_v_good_fk_index = 0;
  long __pyx_v_nresult;
  long __pyx_v_i_data;
  long __pyx_v_max_fks;
  PyArrayObject *__pyx_v_good_index = 0;
  PyObject *__pyx_v_fks = NULL;
  PyArrayObject *__pyx_v_ret = 0;
  PyArrayObject *__pyx_v_repeat_result_indices = 0;
  PyArrayObject *__pyx_v_stretch_result_indices = 0;
  PyArrayObject *__pyx_v_right_result_indices = 0;
  int __pyx_v_fk_result_index;
  long __pyx_v_nrepeat;
  long __pyx_v_nstretch;
  long __pyx_v_nright;
  long __pyx_v_left_good_index;
  long __pyx_v_right_good_index;
  long __pyx_v_i_land;
  long __pyx_v_i_source;
  long __pyx_v_i_repeat;
  long __pyx_v_i_stretch;
  long __pyx_v_i_right;
  long __pyx_v_i_ret;
  long __pyx_v_i_fk;
  long __pyx_v_this_n_good_fk;
  PyArrayObject *__pyx_v_tmp_good_fk_index = 0;
  PyArrayObject *__pyx_v_tmp_fk = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_good_index;
  __Pyx_Buffer __pyx_pybuffer_good_index;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_indices;
  __Pyx_Buffer __pyx_pybuffer_repeat_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_result_indices;
  __Pyx_Buffer __pyx_pybuffer_repeat_result_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_indices;
  __Pyx_Buffer __pyx_pybuffer_right_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_result_indices;
  __Pyx_Buffer __pyx_pybuffer_right_result_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_indices;
  __Pyx_Buffer __pyx_pybuffer_stretch_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_result_indices;
  __Pyx_Buffer __pyx_pybuffer_stretch_result_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_tmp_good_fk_index;
  __Pyx_Buffer __pyx_pybuffer_tmp_good_fk_index;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  long __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  PyArrayObject *__pyx_t_16 = NULL;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  long __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  long __pyx_t_27;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_vector_fk_inner_join", 0);
  __pyx_pybuffer_good_index.pybuffer.buf = NULL;
  __pyx_pybuffer_good_index.refcount = 0;
  __pyx_pybuffernd_good_index.data = NULL;
  __pyx_pybuffernd_good_index.rcbuffer = &__pyx_pybuffer_good_index;
  __pyx_pybuffer_repeat_result_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_repeat_result_indices.refcount = 0;
  __pyx_pybuffernd_repeat_result_indices.data = NULL;
  __pyx_pybuffernd_repeat_result_indices.rcbuffer = &__pyx_pybuffer_repeat_result_indices;
  __pyx_pybuffer_stretch_result_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_stretch_result_indices.refcount = 0;
  __pyx_pybuffernd_stretch_result_indices.data = NULL;
  __pyx_pybuffernd_stretch_result_indices.rcbuffer = &__pyx_pybuffer_stretch_result_indices;
  __pyx_pybuffer_right_result_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_right_result_indices.refcount = 0;
  __pyx_pybuffernd_right_result_indices.data = NULL;
  __pyx_pybuffernd_right_result_indices.rcbuffer = &__pyx_pybuffer_right_result_indices;
  __pyx_pybuffer_tmp_good_fk_index.pybuffer.buf = NULL;
  __pyx_pybuffer_tmp_good_fk_index.refcount = 0;
  __pyx_pybuffernd_tmp_good_fk_index.data = NULL;
  __pyx_pybuffernd_tmp_good_fk_index.rcbuffer = &__pyx_pybuffer_tmp_good_fk_index;
  __pyx_pybuffer_repeat_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_repeat_indices.refcount = 0;
  __pyx_pybuffernd_repeat_indices.data = NULL;
  __pyx_pybuffernd_repeat_indices.rcbuffer = &__pyx_pybuffer_repeat_indices;
  __pyx_pybuffer_stretch_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_stretch_indices.refcount = 0;
  __pyx_pybuffernd_stretch_indices.data = NULL;
  __pyx_pybuffernd_stretch_indices.rcbuffer = &__pyx_pybuffer_stretch_indices;
  __pyx_pybuffer_right_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_right_indices.refcount = 0;
  __pyx_pybuffernd_right_indices.data = NULL;
  __pyx_pybuffernd_right_indices.rcbuffer = &__pyx_pybuffer_right_indices;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_repeat_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_repeat_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_stretch_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_stretch_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_right_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_right_indices.diminfo[0].strides = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_indices.diminfo[0].shape = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.shape[0];

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":128
 *                            np.ndarray[np.int_t] stretch_indices,
 *                            np.ndarray[np.int_t] right_indices):
 *     cdef long ndata = len(data)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_data)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ndata = __pyx_t_1;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":129
 *                            np.ndarray[np.int_t] right_indices):
 *     cdef long ndata = len(data)
 *     cdef np.ndarray first_right = data[right[0]]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')
 *     cdef long nresult = 0
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_right, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_data), __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_first_right = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":130
 *     cdef long ndata = len(data)
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')             # <<<<<<<<<<<<<<
 *     cdef long nresult = 0
 *     cdef long i_data = 0
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_ndata); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_O);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_O);
  __Pyx_GIVEREF(__pyx_n_s_O);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_good_fk_index = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":131
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')
 *     cdef long nresult = 0             # <<<<<<<<<<<<<<
 *     cdef long i_data = 0
 *     cdef long max_fks
 */
  __pyx_v_nresult = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":132
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')
 *     cdef long nresult = 0
 *     cdef long i_data = 0             # <<<<<<<<<<<<<<
 *     cdef long max_fks
 *     cdef np.ndarray[np.int_t] good_index
 */
  __pyx_v_i_data = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":136
 *     cdef np.ndarray[np.int_t] good_index
 * 
 *     for i_data in range(ndata):             # <<<<<<<<<<<<<<
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]
 */
  __pyx_t_5 = __pyx_v_ndata;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i_data = __pyx_t_6;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":137
 * 
 *     for i_data in range(ndata):
 *         max_fks = len(first_right[i_data])             # <<<<<<<<<<<<<<
 *         fks = fk[i_data]
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))
 */
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_first_right), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_max_fks = __pyx_t_1;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":138
 *     for i_data in range(ndata):
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]             # <<<<<<<<<<<<<<
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))
 *         nresult += len(good_index)
 */
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_fk), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_fks, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":139
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))             # <<<<<<<<<<<<<<
 *         nresult += len(good_index)
 *         good_fk_index[i_data] = good_index
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_flatnonzero); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_fks, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_max_fks); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_fks, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_And(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = ((PyArrayObject *)__pyx_t_2);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer);
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_9 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer, (PyObject*)__pyx_v_good_index, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
      }
      __pyx_pybuffernd_good_index.diminfo[0].strides = __pyx_pybuffernd_good_index.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_good_index.diminfo[0].shape = __pyx_pybuffernd_good_index.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_good_index, ((PyArrayObject *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":140
 *         fks = fk[i_data]
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))
 *         nresult += len(good_index)             # <<<<<<<<<<<<<<
 *         good_fk_index[i_data] = good_index
 * 
 */
    __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_good_index)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_nresult = (__pyx_v_nresult + __pyx_t_1);

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":141
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))
 *         nresult += len(good_index)
 *         good_fk_index[i_data] = good_index             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray ret = np.empty(nresult, new_dtype)
 */
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_good_fk_index), __pyx_v_i_data, ((PyObject *)__pyx_v_good_index), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":143
 *         good_fk_index[i_data] = good_index
 * 
 *     cdef np.ndarray ret = np.empty(nresult, new_dtype)             # <<<<<<<<<<<<<<
 * 
 *     # find where each of repeat/stretch/right lands
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_nresult); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_new_dtype);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_new_dtype);
  __Pyx_GIVEREF(__pyx_v_new_dtype);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ret = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":147
 *     # find where each of repeat/stretch/right lands
 *     cdef np.ndarray[np.int_t, ndim=1] repeat_result_indices = \
 *         np.array(map(ret.dtype.names.index, repeat_columns), np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] stretch_result_indices = \
 *         np.array(map(ret.dtype.names.index, stretch_columns), np.int)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ret), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_names); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_index); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_repeat_columns);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_repeat_columns);
  __Pyx_GIVEREF(__pyx_v_repeat_columns);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_repeat_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_repeat_result_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_13 = 0;
  __pyx_v_repeat_result_indices = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":149
 *         np.array(map(ret.dtype.names.index, repeat_columns), np.int)
 *     cdef np.ndarray[np.int_t, ndim=1] stretch_result_indices = \
 *         np.array(map(ret.dtype.names.index, stretch_columns), np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] right_result_indices = \
 *         np.array(map(ret.dtype.names.index, right) , np.int)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ret), __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_names); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_stretch_columns);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_stretch_columns);
  __Pyx_GIVEREF(__pyx_v_stretch_columns);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_stretch_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_stretch_result_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_result_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_14 = 0;
  __pyx_v_stretch_result_indices = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":151
 *         np.array(map(ret.dtype.names.index, stretch_columns), np.int)
 *     cdef np.ndarray[np.int_t, ndim=1] right_result_indices = \
 *         np.array(map(ret.dtype.names.index, right) , np.int)             # <<<<<<<<<<<<<<
 * 
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ret), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_names); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_index); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_right);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_right);
  __Pyx_GIVEREF(__pyx_v_right);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_right_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_right_result_indices.diminfo[0].strides = __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_result_indices.diminfo[0].shape = __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_15 = 0;
  __pyx_v_right_result_indices = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":153
 *         np.array(map(ret.dtype.names.index, right) , np.int)
 * 
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)             # <<<<<<<<<<<<<<
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nstretch = len(stretch_indices)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ret), __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_names); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_v_fk_name);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_fk_name);
  __Pyx_GIVEREF(__pyx_v_fk_name);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_fk_result_index = __pyx_t_9;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":154
 * 
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 *     cdef long nrepeat = len(repeat_indices)             # <<<<<<<<<<<<<<
 *     cdef long nstretch = len(stretch_indices)
 *     cdef long nright = len(right_indices)
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_repeat_indices)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nrepeat = __pyx_t_1;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":155
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nstretch = len(stretch_indices)             # <<<<<<<<<<<<<<
 *     cdef long nright = len(right_indices)
 *     cdef long left_good_index = 0
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_stretch_indices)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nstretch = __pyx_t_1;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":156
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nstretch = len(stretch_indices)
 *     cdef long nright = len(right_indices)             # <<<<<<<<<<<<<<
 *     cdef long left_good_index = 0
 *     cdef long right_good_index = 0
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_right_indices)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nright = __pyx_t_1;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":157
 *     cdef long nstretch = len(stretch_indices)
 *     cdef long nright = len(right_indices)
 *     cdef long left_good_index = 0             # <<<<<<<<<<<<<<
 *     cdef long right_good_index = 0
 *     cdef long i_land = 0
 */
  __pyx_v_left_good_index = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":158
 *     cdef long nright = len(right_indices)
 *     cdef long left_good_index = 0
 *     cdef long right_good_index = 0             # <<<<<<<<<<<<<<
 *     cdef long i_land = 0
 *     cdef long i_source = 0
 */
  __pyx_v_right_good_index = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":159
 *     cdef long left_good_index = 0
 *     cdef long right_good_index = 0
 *     cdef long i_land = 0             # <<<<<<<<<<<<<<
 *     cdef long i_source = 0
 *     cdef long i_repeat = 0
 */
  __pyx_v_i_land = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":160
 *     cdef long right_good_index = 0
 *     cdef long i_land = 0
 *     cdef long i_source = 0             # <<<<<<<<<<<<<<
 *     cdef long i_repeat = 0
 *     cdef long i_stretch = 0
 */
  __pyx_v_i_source = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":161
 *     cdef long i_land = 0
 *     cdef long i_source = 0
 *     cdef long i_repeat = 0             # <<<<<<<<<<<<<<
 *     cdef long i_stretch = 0
 *     cdef long i_right = 0
 */
  __pyx_v_i_repeat = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":162
 *     cdef long i_source = 0
 *     cdef long i_repeat = 0
 *     cdef long i_stretch = 0             # <<<<<<<<<<<<<<
 *     cdef long i_right = 0
 *     cdef long i_ret = 0
 */
  __pyx_v_i_stretch = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":163
 *     cdef long i_repeat = 0
 *     cdef long i_stretch = 0
 *     cdef long i_right = 0             # <<<<<<<<<<<<<<
 *     cdef long i_ret = 0
 *     cdef long i_fk = 0
 */
  __pyx_v_i_right = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":164
 *     cdef long i_stretch = 0
 *     cdef long i_right = 0
 *     cdef long i_ret = 0             # <<<<<<<<<<<<<<
 *     cdef long i_fk = 0
 *     cdef long this_n_good_fk = 0
 */
  __pyx_v_i_ret = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":165
 *     cdef long i_right = 0
 *     cdef long i_ret = 0
 *     cdef long i_fk = 0             # <<<<<<<<<<<<<<
 *     cdef long this_n_good_fk = 0
 *     cdef np.ndarray[np.int_t] tmp_good_fk_index
 */
  __pyx_v_i_fk = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":166
 *     cdef long i_ret = 0
 *     cdef long i_fk = 0
 *     cdef long this_n_good_fk = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] tmp_good_fk_index
 *     cdef np.ndarray tmp_fk
 */
  __pyx_v_this_n_good_fk = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":170
 *     cdef np.ndarray tmp_fk
 * 
 *     for i_data in range(ndata):             # <<<<<<<<<<<<<<
 *         tmp_good_fk_index = good_fk_index[i_data]
 *         tmp_fk = fk[i_data]
 */
  __pyx_t_5 = __pyx_v_ndata;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i_data = __pyx_t_6;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":171
 * 
 *     for i_data in range(ndata):
 *         tmp_good_fk_index = good_fk_index[i_data]             # <<<<<<<<<<<<<<
 *         tmp_fk = fk[i_data]
 *         this_n_good_fk = len(tmp_good_fk_index)
 */
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_good_fk_index), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_16 = ((PyArrayObject *)__pyx_t_4);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer);
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_9 < 0)) {
        PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer, (PyObject*)__pyx_v_tmp_good_fk_index, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].strides = __pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].shape = __pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_16 = 0;
    __Pyx_XDECREF_SET(__pyx_v_tmp_good_fk_index, ((PyArrayObject *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":172
 *     for i_data in range(ndata):
 *         tmp_good_fk_index = good_fk_index[i_data]
 *         tmp_fk = fk[i_data]             # <<<<<<<<<<<<<<
 *         this_n_good_fk = len(tmp_good_fk_index)
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_fk), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_tmp_fk, ((PyArrayObject *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":173
 *         tmp_good_fk_index = good_fk_index[i_data]
 *         tmp_fk = fk[i_data]
 *         this_n_good_fk = len(tmp_good_fk_index)             # <<<<<<<<<<<<<<
 * 
 *         for i_fk in range(this_n_good_fk):
 */
    __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_tmp_good_fk_index)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_this_n_good_fk = __pyx_t_1;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":175
 *         this_n_good_fk = len(tmp_good_fk_index)
 * 
 *         for i_fk in range(this_n_good_fk):             # <<<<<<<<<<<<<<
 * 
 *             left_good_index = tmp_good_fk_index[i_fk]
 */
    __pyx_t_17 = __pyx_v_this_n_good_fk;
    for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
      __pyx_v_i_fk = __pyx_t_18;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":177
 *         for i_fk in range(this_n_good_fk):
 * 
 *             left_good_index = tmp_good_fk_index[i_fk]             # <<<<<<<<<<<<<<
 *             right_good_index = tmp_fk[left_good_index]
 * 
 */
      __pyx_t_19 = __pyx_v_i_fk;
      __pyx_t_9 = -1;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].shape;
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].shape)) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_left_good_index = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].strides));

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":178
 * 
 *             left_good_index = tmp_good_fk_index[i_fk]
 *             right_good_index = tmp_fk[left_good_index]             # <<<<<<<<<<<<<<
 * 
 *             for i_repeat in range(nrepeat):
 */
      __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_tmp_fk), __pyx_v_left_good_index, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_20 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_20 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_right_good_index = __pyx_t_20;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":180
 *             right_good_index = tmp_fk[left_good_index]
 * 
 *             for i_repeat in range(nrepeat):             # <<<<<<<<<<<<<<
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]
 */
      __pyx_t_20 = __pyx_v_nrepeat;
      for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
        __pyx_v_i_repeat = __pyx_t_21;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":181
 * 
 *             for i_repeat in range(nrepeat):
 *                 i_land = repeat_result_indices[i_repeat]             # <<<<<<<<<<<<<<
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster
 */
        __pyx_t_22 = __pyx_v_i_repeat;
        __pyx_t_9 = -1;
        if (__pyx_t_22 < 0) {
          __pyx_t_22 += __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape;
          if (unlikely(__pyx_t_22 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_repeat_result_indices.diminfo[0].strides));

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":182
 *             for i_repeat in range(nrepeat):
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster
 * 
 */
        __pyx_t_23 = __pyx_v_i_repeat;
        __pyx_t_9 = -1;
        if (__pyx_t_23 < 0) {
          __pyx_t_23 += __pyx_pybuffernd_repeat_indices.diminfo[0].shape;
          if (unlikely(__pyx_t_23 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_repeat_indices.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_repeat_indices.diminfo[0].strides));

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":183
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster             # <<<<<<<<<<<<<<
 * 
 *             for i_stretch in range(nstretch):
 */
        __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_v_i_land, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":185
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster
 * 
 *             for i_stretch in range(nstretch):             # <<<<<<<<<<<<<<
 *                 i_land = stretch_result_indices[i_stretch]
 *                 i_source = stretch_indices[i_stretch]
 */
      __pyx_t_20 = __pyx_v_nstretch;
      for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
        __pyx_v_i_stretch = __pyx_t_21;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":186
 * 
 *             for i_stretch in range(nstretch):
 *                 i_land = stretch_result_indices[i_stretch]             # <<<<<<<<<<<<<<
 *                 i_source = stretch_indices[i_stretch]
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster
 */
        __pyx_t_24 = __pyx_v_i_stretch;
        __pyx_t_9 = -1;
        if (__pyx_t_24 < 0) {
          __pyx_t_24 += __pyx_pybuffernd_stretch_result_indices.diminfo[0].shape;
          if (unlikely(__pyx_t_24 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_stretch_result_indices.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_stretch_result_indices.diminfo[0].strides));

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":187
 *             for i_stretch in range(nstretch):
 *                 i_land = stretch_result_indices[i_stretch]
 *                 i_source = stretch_indices[i_stretch]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster
 * 
 */
        __pyx_t_25 = __pyx_v_i_stretch;
        __pyx_t_9 = -1;
        if (__pyx_t_25 < 0) {
          __pyx_t_25 += __pyx_pybuffernd_stretch_indices.diminfo[0].shape;
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_stretch_indices.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_stretch_indices.diminfo[0].strides));

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":188
 *                 i_land = stretch_result_indices[i_stretch]
 *                 i_source = stretch_indices[i_stretch]
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster             # <<<<<<<<<<<<<<
 * 
 *             for i_right in range(nright):
 */
        __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_7, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_left_good_index, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_v_i_land, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":190
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster
 * 
 *             for i_right in range(nright):             # <<<<<<<<<<<<<<
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]
 */
      __pyx_t_20 = __pyx_v_nright;
      for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
        __pyx_v_i_right = __pyx_t_21;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":191
 * 
 *             for i_right in range(nright):
 *                 i_land = right_result_indices[i_right]             # <<<<<<<<<<<<<<
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster
 */
        __pyx_t_26 = __pyx_v_i_right;
        __pyx_t_9 = -1;
        if (__pyx_t_26 < 0) {
          __pyx_t_26 += __pyx_pybuffernd_right_result_indices.diminfo[0].shape;
          if (unlikely(__pyx_t_26 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_right_result_indices.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_right_result_indices.diminfo[0].strides));

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":192
 *             for i_right in range(nright):
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster
 * 
 */
        __pyx_t_27 = __pyx_v_i_right;
        __pyx_t_9 = -1;
        if (__pyx_t_27 < 0) {
          __pyx_t_27 += __pyx_pybuffernd_right_indices.diminfo[0].shape;
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_right_indices.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_right_indices.diminfo[0].strides));

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":193
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster             # <<<<<<<<<<<<<<
 * 
 *             ret[i_ret][fk_result_index] = right_good_index
 */
        __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_7, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_right_good_index, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_v_i_land, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":195
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster
 * 
 *             ret[i_ret][fk_result_index] = right_good_index             # <<<<<<<<<<<<<<
 *             i_ret += 1
 *     return ret
 */
      __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_v_right_good_index); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_v_fk_result_index, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":196
 * 
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
      __pyx_v_i_ret = (__pyx_v_i_ret + 1);
    }
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":197
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":122
 * 
 * 
 * cdef _vector_fk_inner_join(np.ndarray data, right,  np.ndarray fk, fk_name,             # <<<<<<<<<<<<<<
 *                            new_dtype,
 *                            repeat_columns, stretch_columns,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy._vector_fk_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_first_right);
  __Pyx_XDECREF((PyObject *)__pyx_v_good_fk_index);
  __Pyx_XDECREF((PyObject *)__pyx_v_good_index);
  __Pyx_XDECREF(__pyx_v_fks);
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XDECREF((PyObject *)__pyx_v_repeat_result_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_stretch_result_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_right_result_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp_good_fk_index);
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp_fk);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":200
 * 
 * 
 * cdef _scalar_fk_inner_join(np.ndarray data, right, np.ndarray fk,             # <<<<<<<<<<<<<<
 *                            fk_name, new_dtype,
 *                            repeat_columns, stretch_columns,
 */

static PyObject *__pyx_f_13_librootnumpy__scalar_fk_inner_join(PyArrayObject *__pyx_v_data, PyObject *__pyx_v_right, PyArrayObject *__pyx_v_fk, PyObject *__pyx_v_fk_name, PyObject *__pyx_v_new_dtype, PyObject *__pyx_v_repeat_columns, PyObject *__pyx_v_stretch_columns, PyArrayObject *__pyx_v_repeat_indices, CYTHON_UNUSED PyArrayObject *__pyx_v_stretch_indices, PyArrayObject *__pyx_v_right_indices) {
  long __pyx_v_ndata;
  PyArrayObject *__pyx_v_first_right = 0;
  PyArrayObject *__pyx_v_fk_index_good = 0;
  long __pyx_v_max_fks;
  int __pyx_v_fks;
  PyObject *__pyx_v_nresult = NULL;
  long __pyx_v_i_data;
  PyObject *__pyx_v_ret = NULL;
  PyArrayObject *__pyx_v_repeat_result_indices = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_stretch_result_indices = 0;
  PyArrayObject *__pyx_v_right_result_indices = 0;
  int __pyx_v_fk_result_index;
  PyObject *__pyx_v_i_ret = NULL;
  long __pyx_v_nrepeat;
  long __pyx_v_nright;
  long __pyx_v_i_repeat;
  long __pyx_v_i_right;
  long __pyx_v_i_land;
  long __pyx_v_i_source;
  long __pyx_v_right_good_index;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_fk_index_good;
  __Pyx_Buffer __pyx_pybuffer_fk_index_good;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_indices;
  __Pyx_Buffer __pyx_pybuffer_repeat_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_result_indices;
  __Pyx_Buffer __pyx_pybuffer_repeat_result_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_indices;
  __Pyx_Buffer __pyx_pybuffer_right_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_result_indices;
  __Pyx_Buffer __pyx_pybuffer_right_result_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_indices;
  __Pyx_Buffer __pyx_pybuffer_stretch_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_result_indices;
  __Pyx_Buffer __pyx_pybuffer_stretch_result_indices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  long __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  long __pyx_t_13;
  PyArrayObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  PyArrayObject *__pyx_t_16 = NULL;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  long __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_scalar_fk_inner_join", 0);
  __pyx_pybuffer_fk_index_good.pybuffer.buf = NULL;
  __pyx_pybuffer_fk_index_good.refcount = 0;
  __pyx_pybuffernd_fk_index_good.data = NULL;
  __pyx_pybuffernd_fk_index_good.rcbuffer = &__pyx_pybuffer_fk_index_good;
  __pyx_pybuffer_repeat_result_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_repeat_result_indices.refcount = 0;
  __pyx_pybuffernd_repeat_result_indices.data = NULL;
  __pyx_pybuffernd_repeat_result_indices.rcbuffer = &__pyx_pybuffer_repeat_result_indices;
  __pyx_pybuffer_stretch_result_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_stretch_result_indices.refcount = 0;
  __pyx_pybuffernd_stretch_result_indices.data = NULL;
  __pyx_pybuffernd_stretch_result_indices.rcbuffer = &__pyx_pybuffer_stretch_result_indices;
  __pyx_pybuffer_right_result_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_right_result_indices.refcount = 0;
  __pyx_pybuffernd_right_result_indices.data = NULL;
  __pyx_pybuffernd_right_result_indices.rcbuffer = &__pyx_pybuffer_right_result_indices;
  __pyx_pybuffer_repeat_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_repeat_indices.refcount = 0;
  __pyx_pybuffernd_repeat_indices.data = NULL;
  __pyx_pybuffernd_repeat_indices.rcbuffer = &__pyx_pybuffer_repeat_indices;
  __pyx_pybuffer_stretch_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_stretch_indices.refcount = 0;
  __pyx_pybuffernd_stretch_indices.data = NULL;
  __pyx_pybuffernd_stretch_indices.rcbuffer = &__pyx_pybuffer_stretch_indices;
  __pyx_pybuffer_right_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_right_indices.refcount = 0;
  __pyx_pybuffernd_right_indices.data = NULL;
  __pyx_pybuffernd_right_indices.rcbuffer = &__pyx_pybuffer_right_indices;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_repeat_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_repeat_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_stretch_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_stretch_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_right_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_right_indices.diminfo[0].strides = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_indices.diminfo[0].shape = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.shape[0];

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":206
 *                            np.ndarray[np.int_t] stretch_indices,
 *                            np.ndarray[np.int_t] right_indices):
 *     cdef long ndata = len(data)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray[np.int8_t, ndim=1] fk_index_good = np.empty(ndata,np.int8)
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_data)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ndata = __pyx_t_1;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":207
 *                            np.ndarray[np.int_t] right_indices):
 *     cdef long ndata = len(data)
 *     cdef np.ndarray first_right = data[right[0]]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int8_t, ndim=1] fk_index_good = np.empty(ndata,np.int8)
 *     cdef long max_fks
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_right, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_data), __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_first_right = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":208
 *     cdef long ndata = len(data)
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray[np.int8_t, ndim=1] fk_index_good = np.empty(ndata,np.int8)             # <<<<<<<<<<<<<<
 *     cdef long max_fks
 *     cdef int fks = 0
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_ndata); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_fk_index_good = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_fk_index_good.diminfo[0].strides = __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_fk_index_good.diminfo[0].shape = __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_fk_index_good = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":210
 *     cdef np.ndarray[np.int8_t, ndim=1] fk_index_good = np.empty(ndata,np.int8)
 *     cdef long max_fks
 *     cdef int fks = 0             # <<<<<<<<<<<<<<
 * 
 *     nresult = 0
 */
  __pyx_v_fks = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":212
 *     cdef int fks = 0
 * 
 *     nresult = 0             # <<<<<<<<<<<<<<
 *     for i_data in range(ndata):
 *         max_fks = len(first_right[i_data])
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_nresult = __pyx_int_0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":213
 * 
 *     nresult = 0
 *     for i_data in range(ndata):             # <<<<<<<<<<<<<<
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]
 */
  __pyx_t_7 = __pyx_v_ndata;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i_data = __pyx_t_8;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":214
 *     nresult = 0
 *     for i_data in range(ndata):
 *         max_fks = len(first_right[i_data])             # <<<<<<<<<<<<<<
 *         fks = fk[i_data]
 *         fk_index_good[i_data] = (fks >= 0) and (fks < max_fks)
 */
    __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_first_right), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_max_fks = __pyx_t_1;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":215
 *     for i_data in range(ndata):
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]             # <<<<<<<<<<<<<<
 *         fk_index_good[i_data] = (fks >= 0) and (fks < max_fks)
 * 
 */
    __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_fk), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_fks = __pyx_t_9;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":216
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]
 *         fk_index_good[i_data] = (fks >= 0) and (fks < max_fks)             # <<<<<<<<<<<<<<
 * 
 *     nresult = np.count_nonzero(fk_index_good)
 */
    __pyx_t_10 = (__pyx_v_fks >= 0);
    if (__pyx_t_10) {
      __pyx_t_11 = (__pyx_v_fks < __pyx_v_max_fks);
      __pyx_t_12 = __pyx_t_11;
    } else {
      __pyx_t_12 = __pyx_t_10;
    }
    __pyx_t_13 = __pyx_v_i_data;
    __pyx_t_9 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_pybuffernd_fk_index_good.diminfo[0].shape;
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_fk_index_good.diminfo[0].shape)) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_fk_index_good.diminfo[0].strides) = __pyx_t_12;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":218
 *         fk_index_good[i_data] = (fks >= 0) and (fks < max_fks)
 * 
 *     nresult = np.count_nonzero(fk_index_good)             # <<<<<<<<<<<<<<
 * 
 *     ret = np.empty(nresult, new_dtype)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_count_nonzero); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_fk_index_good));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_fk_index_good));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_fk_index_good));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_nresult, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":220
 *     nresult = np.count_nonzero(fk_index_good)
 * 
 *     ret = np.empty(nresult, new_dtype)             # <<<<<<<<<<<<<<
 * 
 *     # find where each of repeat/stretch/right lands
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_nresult);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_nresult);
  __Pyx_GIVEREF(__pyx_v_nresult);
  __Pyx_INCREF(__pyx_v_new_dtype);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_new_dtype);
  __Pyx_GIVEREF(__pyx_v_new_dtype);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ret = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":224
 *     # find where each of repeat/stretch/right lands
 *     cdef np.ndarray[np.int_t] repeat_result_indices = \
 *         np.array(map(ret.dtype.names.index, repeat_columns ), np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] stretch_result_indices = \
 *         np.array(map(ret.dtype.names.index, stretch_columns ), np.int)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ret, __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_names); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_index); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_repeat_columns);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_repeat_columns);
  __Pyx_GIVEREF(__pyx_v_repeat_columns);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_repeat_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_repeat_result_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_14 = 0;
  __pyx_v_repeat_result_indices = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":226
 *         np.array(map(ret.dtype.names.index, repeat_columns ), np.int)
 *     cdef np.ndarray[np.int_t] stretch_result_indices = \
 *         np.array(map(ret.dtype.names.index, stretch_columns ), np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] right_result_indices = \
 *         np.array(map(ret.dtype.names.index, right ), np.int)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ret, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_names); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_stretch_columns);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_stretch_columns);
  __Pyx_GIVEREF(__pyx_v_stretch_columns);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_stretch_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_stretch_result_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_result_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_15 = 0;
  __pyx_v_stretch_result_indices = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":228
 *         np.array(map(ret.dtype.names.index, stretch_columns ), np.int)
 *     cdef np.ndarray[np.int_t] right_result_indices = \
 *         np.array(map(ret.dtype.names.index, right ), np.int)             # <<<<<<<<<<<<<<
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ret, __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_names); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_index); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_right);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_right);
  __Pyx_GIVEREF(__pyx_v_right);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_16 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_right_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_right_result_indices.diminfo[0].strides = __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_result_indices.diminfo[0].shape = __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_16 = 0;
  __pyx_v_right_result_indices = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":229
 *     cdef np.ndarray[np.int_t] right_result_indices = \
 *         np.array(map(ret.dtype.names.index, right ), np.int)
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)             # <<<<<<<<<<<<<<
 * 
 *     i_ret = 0
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ret, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_names); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_fk_name);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_fk_name);
  __Pyx_GIVEREF(__pyx_v_fk_name);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_fk_result_index = __pyx_t_9;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":231
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 * 
 *     i_ret = 0             # <<<<<<<<<<<<<<
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nright = len(right_indices)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_i_ret = __pyx_int_0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":232
 * 
 *     i_ret = 0
 *     cdef long nrepeat = len(repeat_indices)             # <<<<<<<<<<<<<<
 *     cdef long nright = len(right_indices)
 *     cdef long i_repeat = 0
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_repeat_indices)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nrepeat = __pyx_t_1;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":233
 *     i_ret = 0
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nright = len(right_indices)             # <<<<<<<<<<<<<<
 *     cdef long i_repeat = 0
 *     cdef long i_right = 0
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_right_indices)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nright = __pyx_t_1;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":234
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nright = len(right_indices)
 *     cdef long i_repeat = 0             # <<<<<<<<<<<<<<
 *     cdef long i_right = 0
 *     cdef long i_land = 0
 */
  __pyx_v_i_repeat = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":235
 *     cdef long nright = len(right_indices)
 *     cdef long i_repeat = 0
 *     cdef long i_right = 0             # <<<<<<<<<<<<<<
 *     cdef long i_land = 0
 *     cdef long i_source = 0
 */
  __pyx_v_i_right = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":236
 *     cdef long i_repeat = 0
 *     cdef long i_right = 0
 *     cdef long i_land = 0             # <<<<<<<<<<<<<<
 *     cdef long i_source = 0
 *     cdef long right_good_index=0
 */
  __pyx_v_i_land = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":237
 *     cdef long i_right = 0
 *     cdef long i_land = 0
 *     cdef long i_source = 0             # <<<<<<<<<<<<<<
 *     cdef long right_good_index=0
 * 
 */
  __pyx_v_i_source = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":238
 *     cdef long i_land = 0
 *     cdef long i_source = 0
 *     cdef long right_good_index=0             # <<<<<<<<<<<<<<
 * 
 *     for i_data in range(ndata):
 */
  __pyx_v_right_good_index = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":240
 *     cdef long right_good_index=0
 * 
 *     for i_data in range(ndata):             # <<<<<<<<<<<<<<
 *         if fk_index_good[i_data]:
 * 
 */
  __pyx_t_7 = __pyx_v_ndata;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i_data = __pyx_t_8;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":241
 * 
 *     for i_data in range(ndata):
 *         if fk_index_good[i_data]:             # <<<<<<<<<<<<<<
 * 
 *             right_good_index = fk[i_data]
 */
    __pyx_t_17 = __pyx_v_i_data;
    __pyx_t_9 = -1;
    if (__pyx_t_17 < 0) {
      __pyx_t_17 += __pyx_pybuffernd_fk_index_good.diminfo[0].shape;
      if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_fk_index_good.diminfo[0].shape)) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_12 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_fk_index_good.diminfo[0].strides)) != 0);
    if (__pyx_t_12) {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":243
 *         if fk_index_good[i_data]:
 * 
 *             right_good_index = fk[i_data]             # <<<<<<<<<<<<<<
 * 
 *             for i_repeat in range(nrepeat):
 */
      __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_fk), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_18 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_18 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_right_good_index = __pyx_t_18;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":245
 *             right_good_index = fk[i_data]
 * 
 *             for i_repeat in range(nrepeat):             # <<<<<<<<<<<<<<
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]
 */
      __pyx_t_18 = __pyx_v_nrepeat;
      for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
        __pyx_v_i_repeat = __pyx_t_19;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":246
 * 
 *             for i_repeat in range(nrepeat):
 *                 i_land = repeat_result_indices[i_repeat]             # <<<<<<<<<<<<<<
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source]
 */
        __pyx_t_20 = __pyx_v_i_repeat;
        __pyx_t_9 = -1;
        if (__pyx_t_20 < 0) {
          __pyx_t_20 += __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape;
          if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_repeat_result_indices.diminfo[0].strides));

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":247
 *             for i_repeat in range(nrepeat):
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source]
 * 
 */
        __pyx_t_21 = __pyx_v_i_repeat;
        __pyx_t_9 = -1;
        if (__pyx_t_21 < 0) {
          __pyx_t_21 += __pyx_pybuffernd_repeat_indices.diminfo[0].shape;
          if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_repeat_indices.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_repeat_indices.diminfo[0].strides));

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":248
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source]             # <<<<<<<<<<<<<<
 * 
 *             for i_right in range(nright):
 */
        __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_GetItem(__pyx_v_ret, __pyx_v_i_ret); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_2);
        if (unlikely(__Pyx_SetItemInt(__pyx_t_2, __pyx_v_i_land, __pyx_t_5, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":250
 *                 ret[i_ret][i_land] = data[i_data][i_source]
 * 
 *             for i_right in range(nright):             # <<<<<<<<<<<<<<
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]
 */
      __pyx_t_18 = __pyx_v_nright;
      for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
        __pyx_v_i_right = __pyx_t_19;

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":251
 * 
 *             for i_right in range(nright):
 *                 i_land = right_result_indices[i_right]             # <<<<<<<<<<<<<<
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]
 */
        __pyx_t_22 = __pyx_v_i_right;
        __pyx_t_9 = -1;
        if (__pyx_t_22 < 0) {
          __pyx_t_22 += __pyx_pybuffernd_right_result_indices.diminfo[0].shape;
          if (unlikely(__pyx_t_22 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_right_result_indices.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_right_result_indices.diminfo[0].strides));

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":252
 *             for i_right in range(nright):
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]
 * 
 */
        __pyx_t_23 = __pyx_v_i_right;
        __pyx_t_9 = -1;
        if (__pyx_t_23 < 0) {
          __pyx_t_23 += __pyx_pybuffernd_right_indices.diminfo[0].shape;
          if (unlikely(__pyx_t_23 < 0)) __pyx_t_9 = 0;
        } else if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_right_indices.diminfo[0].shape)) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_right_indices.diminfo[0].strides));

        /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":253
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]             # <<<<<<<<<<<<<<
 * 
 *             ret[i_ret][fk_result_index] = right_good_index
 */
        __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_right_good_index, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_GetItem(__pyx_v_ret, __pyx_v_i_ret); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_2);
        if (unlikely(__Pyx_SetItemInt(__pyx_t_2, __pyx_v_i_land, __pyx_t_5, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":255
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]
 * 
 *             ret[i_ret][fk_result_index] = right_good_index             # <<<<<<<<<<<<<<
 *             i_ret += 1
 *     return ret
 */
      __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_right_good_index); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = PyObject_GetItem(__pyx_v_ret, __pyx_v_i_ret); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_SetItemInt(__pyx_t_2, __pyx_v_fk_result_index, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":256
 * 
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1             # <<<<<<<<<<<<<<
 *     return ret
 */
      __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_i_ret, __pyx_int_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_i_ret, __pyx_t_5);
      __pyx_t_5 = 0;
      goto __pyx_L7;
    }
    __pyx_L7:;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":257
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1
 *     return ret             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":200
 * 
 * 
 * cdef _scalar_fk_inner_join(np.ndarray data, right, np.ndarray fk,             # <<<<<<<<<<<<<<
 *                            fk_name, new_dtype,
 *                            repeat_columns, stretch_columns,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_librootnumpy._scalar_fk_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_first_right);
  __Pyx_XDECREF((PyObject *)__pyx_v_fk_index_good);
  __Pyx_XDECREF(__pyx_v_nresult);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF((PyObject *)__pyx_v_repeat_result_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_stretch_result_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_right_result_indices);
  __Pyx_XDECREF(__pyx_v_i_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":91
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cpython_5array_5array___getbuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags) {
  PyObject *__pyx_v_item_count = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "array.pxd":96
 *             # In particular strided access is always provided regardless
 *             # of flags
 *             item_count = Py_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *             info.suboffsets = NULL
 */
  __pyx_t_1 = PyInt_FromSsize_t(Py_SIZE(((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_item_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "array.pxd":98
 *             item_count = Py_SIZE(self)
 * 
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "array.pxd":99
 * 
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars             # <<<<<<<<<<<<<<
 *             info.readonly = 0
 *             info.ndim = 1
 */
  __pyx_t_2 = __pyx_v_self->data.as_chars;
  __pyx_v_info->buf = __pyx_t_2;

  /* "array.pxd":100
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars
 *             info.readonly = 0             # <<<<<<<<<<<<<<
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 */
  __pyx_v_info->readonly = 0;

  /* "array.pxd":101
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count
 */
  __pyx_v_info->ndim = 1;

  /* "array.pxd":102
 *             info.readonly = 0
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)             # <<<<<<<<<<<<<<
 *             info.len = info.itemsize * item_count
 * 
 */
  __pyx_t_3 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "array.pxd":103
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count             # <<<<<<<<<<<<<<
 * 
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_info->itemsize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_item_count); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_info->len = __pyx_t_5;

  /* "array.pxd":105
 *             info.len = info.itemsize * item_count
 * 
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)             # <<<<<<<<<<<<<<
 *             if not info.shape:
 *                 raise MemoryError()
 */
  __pyx_v_info->shape = ((Py_ssize_t *)PyMem_Malloc(((sizeof(Py_ssize_t)) + 2)));

  /* "array.pxd":106
 * 
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */
  __pyx_t_6 = ((!(__pyx_v_info->shape != 0)) != 0);
  if (__pyx_t_6) {

    /* "array.pxd":107
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "array.pxd":108
 *             if not info.shape:
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing             # <<<<<<<<<<<<<<
 *             info.strides = &info.itemsize
 * 
 */
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_item_count); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  (__pyx_v_info->shape[0]) = __pyx_t_5;

  /* "array.pxd":109
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize             # <<<<<<<<<<<<<<
 * 
 *             info.format = <char*> (info.shape + 1)
 */
  __pyx_v_info->strides = (&__pyx_v_info->itemsize);

  /* "array.pxd":111
 *             info.strides = &info.itemsize
 * 
 *             info.format = <char*> (info.shape + 1)             # <<<<<<<<<<<<<<
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 */
  __pyx_v_info->format = ((char *)(__pyx_v_info->shape + 1));

  /* "array.pxd":112
 * 
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode             # <<<<<<<<<<<<<<
 *             info.format[1] = 0
 *             info.obj = self
 */
  __pyx_t_3 = __pyx_v_self->ob_descr->typecode;
  (__pyx_v_info->format[0]) = __pyx_t_3;

  /* "array.pxd":113
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0             # <<<<<<<<<<<<<<
 *             info.obj = self
 * 
 */
  (__pyx_v_info->format[1]) = 0;

  /* "array.pxd":114
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "array.pxd":91
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cpython.array.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_item_count);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":116
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyMem_Free(info.shape)
 * 
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_7cpython_5array_5array_2__releasebuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "array.pxd":117
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 *             PyMem_Free(info.shape)             # <<<<<<<<<<<<<<
 * 
 *     array newarrayobject(PyTypeObject* type, Py_ssize_t size, arraydescr *descr)
 */
  PyMem_Free(__pyx_v_info->shape);

  /* "array.pxd":116
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyMem_Free(info.shape)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "array.pxd":128
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_clone(arrayobject *__pyx_v_template, Py_ssize_t __pyx_v_length, int __pyx_v_zero) {
  arrayobject *__pyx_v_op = NULL;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "array.pxd":132
 *     type will be same as template.
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)             # <<<<<<<<<<<<<<
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 */
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_template)), __pyx_v_length, __pyx_v_template->ob_descr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "array.pxd":133
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */
  if ((__pyx_v_zero != 0)) {
    __pyx_t_2 = (((PyObject *)__pyx_v_op) != Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
  } else {
    __pyx_t_3 = (__pyx_v_zero != 0);
  }
  if (__pyx_t_3) {

    /* "array.pxd":134
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */
    memset(__pyx_v_op->data.as_chars, 0, (__pyx_v_length * __pyx_v_op->ob_descr->itemsize));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "array.pxd":135
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline array copy(array self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_op));
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "array.pxd":128
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":137
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_copy(arrayobject *__pyx_v_self) {
  arrayobject *__pyx_v_op = NULL;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "array.pxd":139
 * cdef inline array copy(array self):
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)             # <<<<<<<<<<<<<<
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op
 */
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_self)), Py_SIZE(((PyObject *)__pyx_v_self)), __pyx_v_self->ob_descr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "array.pxd":140
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */
  memcpy(__pyx_v_op->data.as_chars, __pyx_v_self->data.as_chars, (Py_SIZE(((PyObject *)__pyx_v_op)) * __pyx_v_op->ob_descr->itemsize));

  /* "array.pxd":141
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_op));
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "array.pxd":137
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":143
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficent appending of new stuff of same type
 *     (e.g. of same array type)
 */

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *__pyx_v_self, char *__pyx_v_stuff, Py_ssize_t __pyx_v_n) {
  Py_ssize_t __pyx_v_itemsize;
  Py_ssize_t __pyx_v_origsize;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extend_buffer", 0);

  /* "array.pxd":147
 *     (e.g. of same array type)
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 */
  __pyx_t_1 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "array.pxd":148
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)             # <<<<<<<<<<<<<<
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 */
  __pyx_v_origsize = Py_SIZE(((PyObject *)__pyx_v_self));

  /* "array.pxd":149
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)             # <<<<<<<<<<<<<<
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0
 */
  __pyx_t_1 = resize_smart(__pyx_v_self, (__pyx_v_origsize + __pyx_v_n)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "array.pxd":150
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  memcpy((__pyx_v_self->data.as_chars + (__pyx_v_origsize * __pyx_v_itemsize)), __pyx_v_stuff, (__pyx_v_n * __pyx_v_itemsize));

  /* "array.pxd":151
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend(array self, array other) except -1:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "array.pxd":143
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficent appending of new stuff of same type
 *     (e.g. of same array type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":153
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend(arrayobject *__pyx_v_self, arrayobject *__pyx_v_other) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extend", 0);

  /* "array.pxd":155
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */
  __pyx_t_1 = ((__pyx_v_self->ob_descr->typecode != __pyx_v_other->ob_descr->typecode) != 0);
  if (__pyx_t_1) {

    /* "array.pxd":156
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()             # <<<<<<<<<<<<<<
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 */
    __pyx_t_2 = PyErr_BadArgument(); if (unlikely(__pyx_t_2 == 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "array.pxd":157
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))             # <<<<<<<<<<<<<<
 * 
 * cdef inline void zero(array self):
 */
  __pyx_t_2 = __pyx_f_7cpython_5array_extend_buffer(__pyx_v_self, __pyx_v_other->data.as_chars, Py_SIZE(((PyObject *)__pyx_v_other))); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "array.pxd":153
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":159
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

static CYTHON_INLINE void __pyx_f_7cpython_5array_zero(arrayobject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero", 0);

  /* "array.pxd":161
 * cdef inline void zero(array self):
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 */
  memset(__pyx_v_self->data.as_chars, 0, (Py_SIZE(((PyObject *)__pyx_v_self)) * __pyx_v_self->ob_descr->itemsize));

  /* "array.pxd":159
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_1 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_1) {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
    __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[9]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_3 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_3) {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
    __pyx_t_1 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  if (__pyx_t_2) {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[9]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_2 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_2) {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_5 = __pyx_v_ndim;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L7;
  }
  /*else*/ {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L7:;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
    __pyx_t_3 = ((!(__pyx_v_copy_shape != 0)) != 0);
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (__pyx_t_1) {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L10;
  }
  /*else*/ {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L10:;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_5 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_5;

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_1 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = (__pyx_v_little_endian != 0);
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    if (!__pyx_t_2) {

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
      __pyx_t_1 = ((__pyx_v_descr->byteorder == '<') != 0);
      if (__pyx_t_1) {
        __pyx_t_3 = ((!(__pyx_v_little_endian != 0)) != 0);
        __pyx_t_7 = __pyx_t_3;
      } else {
        __pyx_t_7 = __pyx_t_1;
      }
      __pyx_t_1 = __pyx_t_7;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[9]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[9]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_9;

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  char *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[9]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[9]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[9]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[9]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_6 = ((__pyx_v_child->byteorder == '>') != 0);
    if (__pyx_t_6) {
      __pyx_t_7 = (__pyx_v_little_endian != 0);
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    if (!__pyx_t_7) {

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
      __pyx_t_6 = ((__pyx_v_child->byteorder == '<') != 0);
      if (__pyx_t_6) {
        __pyx_t_8 = ((!(__pyx_v_little_endian != 0)) != 0);
        __pyx_t_9 = __pyx_t_8;
      } else {
        __pyx_t_9 = __pyx_t_6;
      }
      __pyx_t_6 = __pyx_t_9;
    } else {
      __pyx_t_6 = __pyx_t_7;
    }
    if (__pyx_t_6) {

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[9]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_10 = 0;
      (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + 1);
    }

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_10 = 0;
    (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + __pyx_v_child->elsize);

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[9]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L11;
      }
      /*else*/ {

        /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[9]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L11:;

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L9;
    }
    /*else*/ {

      /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_11 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_11;
    }
    __pyx_L9:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

static PyObject *__pyx_convert_string_to_py_(const std::string &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_to_py_", 0);

  /* "string.to_py":31
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_string_to_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("blockwise_inner_join"), (PyCFunction)__pyx_pw_13_librootnumpy_55blockwise_inner_join, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_13_librootnumpy_54blockwise_inner_join)},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("_librootnumpy"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_kp_s_Converter_for_r_not_implemented, __pyx_k_Converter_for_r_not_implemented, sizeof(__pyx_k_Converter_for_r_not_implemented), 0, 0, 1, 0},
  {&__pyx_n_s_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 1, 1},
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 1, 1},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_No_converter_for_s, __pyx_k_No_converter_for_s, sizeof(__pyx_k_No_converter_for_s), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 1, 1},
  {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
  {&__pyx_n_s_RootNumpyUnconvertibleWarning, __pyx_k_RootNumpyUnconvertibleWarning, sizeof(__pyx_k_RootNumpyUnconvertibleWarning), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
  {&__pyx_n_s_TTree, __pyx_k_TTree, sizeof(__pyx_k_TTree), 0, 0, 1, 1},
  {&__pyx_n_s_TYPES, __pyx_k_TYPES, sizeof(__pyx_k_TYPES), 0, 0, 1, 1},
  {&__pyx_n_s_TYPES_NUMPY2ROOT, __pyx_k_TYPES_NUMPY2ROOT, sizeof(__pyx_k_TYPES_NUMPY2ROOT), 0, 0, 1, 1},
  {&__pyx_kp_s_The_branch_or_expression_s_is_no, __pyx_k_The_branch_or_expression_s_is_no, sizeof(__pyx_k_The_branch_or_expression_s_is_no), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Users_kratsg_root_numpy_dev_roo, __pyx_k_Users_kratsg_root_numpy_dev_roo, sizeof(__pyx_k_Users_kratsg_root_numpy_dev_roo), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_kratsg_root_numpy_dev_roo_2, __pyx_k_Users_kratsg_root_numpy_dev_roo_2, sizeof(__pyx_k_Users_kratsg_root_numpy_dev_roo_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_kratsg_root_numpy_dev_roo_3, __pyx_k_Users_kratsg_root_numpy_dev_roo_3, sizeof(__pyx_k_Users_kratsg_root_numpy_dev_roo_3), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_kratsg_root_numpy_dev_roo_4, __pyx_k_Users_kratsg_root_numpy_dev_roo_4, sizeof(__pyx_k_Users_kratsg_root_numpy_dev_roo_4), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_kratsg_root_numpy_dev_roo_5, __pyx_k_Users_kratsg_root_numpy_dev_roo_5, sizeof(__pyx_k_Users_kratsg_root_numpy_dev_roo_5), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_kratsg_root_numpy_dev_roo_6, __pyx_k_Users_kratsg_root_numpy_dev_roo_6, sizeof(__pyx_k_Users_kratsg_root_numpy_dev_roo_6), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 0, 1, 0},
  {&__pyx_n_s_arr, __pyx_k_arr, sizeof(__pyx_k_arr), 0, 0, 1, 1},
  {&__pyx_n_s_arr_2, __pyx_k_arr_2, sizeof(__pyx_k_arr_2), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_array2root, __pyx_k_array2root, sizeof(__pyx_k_array2root), 0, 0, 1, 1},
  {&__pyx_n_s_array2tree_toCObj, __pyx_k_array2tree_toCObj, sizeof(__pyx_k_array2tree_toCObj), 0, 0, 1, 1},
  {&__pyx_n_s_array_c, __pyx_k_array_c, sizeof(__pyx_k_array_c), 0, 0, 1, 1},
  {&__pyx_n_s_array_d, __pyx_k_array_d, sizeof(__pyx_k_array_d), 0, 0, 1, 1},
  {&__pyx_n_s_array_f, __pyx_k_array_f, sizeof(__pyx_k_array_f), 0, 0, 1, 1},
  {&__pyx_n_s_array_i, __pyx_k_array_i, sizeof(__pyx_k_array_i), 0, 0, 1, 1},
  {&__pyx_n_s_array_l, __pyx_k_array_l, sizeof(__pyx_k_array_l), 0, 0, 1, 1},
  {&__pyx_n_s_array_s, __pyx_k_array_s, sizeof(__pyx_k_array_s), 0, 0, 1, 1},
  {&__pyx_n_s_atexit, __pyx_k_atexit, sizeof(__pyx_k_atexit), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_bin_idx, __pyx_k_bin_idx, sizeof(__pyx_k_bin_idx), 0, 0, 1, 1},
  {&__pyx_kp_u_blockwise_inner_join_line_11, __pyx_k_blockwise_inner_join_line_11, sizeof(__pyx_k_blockwise_inner_join_line_11), 0, 1, 0, 0},
  {&__pyx_n_s_bool, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {&__pyx_kp_s_branch_s_has_no_leaves, __pyx_k_branch_s_has_no_leaves, sizeof(__pyx_k_branch_s_has_no_leaves), 0, 0, 1, 0},
  {&__pyx_n_s_branches, __pyx_k_branches, sizeof(__pyx_k_branches), 0, 0, 1, 1},
  {&__pyx_kp_s_cannot_access_tree_in_current_fi, __pyx_k_cannot_access_tree_in_current_fi, sizeof(__pyx_k_cannot_access_tree_in_current_fi), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_convert_leaf_s_of_branch, __pyx_k_cannot_convert_leaf_s_of_branch, sizeof(__pyx_k_cannot_convert_leaf_s_of_branch), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_open_current_file, __pyx_k_cannot_open_current_file, sizeof(__pyx_k_cannot_open_current_file), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_open_file_s, __pyx_k_cannot_open_file_s, sizeof(__pyx_k_cannot_open_file_s), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_read_s, __pyx_k_cannot_read_s, sizeof(__pyx_k_cannot_read_s), 0, 0, 1, 0},
  {&__pyx_n_s_chain, __pyx_k_chain, sizeof(__pyx_k_chain), 0, 0, 1, 1},
  {&__pyx_kp_s_chain_is_empty, __pyx_k_chain_is_empty, sizeof(__pyx_k_chain_is_empty), 0, 0, 1, 0},
  {&__pyx_n_s_char, __pyx_k_char, sizeof(__pyx_k_char), 0, 0, 1, 1},
  {&__pyx_n_s_cleanup, __pyx_k_cleanup, sizeof(__pyx_k_cleanup), 0, 0, 1, 1},
  {&__pyx_n_s_clname, __pyx_k_clname, sizeof(__pyx_k_clname), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_kp_s_could_not_compile_selection_form, __pyx_k_could_not_compile_selection_form, sizeof(__pyx_k_could_not_compile_selection_form), 0, 0, 1, 0},
  {&__pyx_n_s_count_nonzero, __pyx_k_count_nonzero, sizeof(__pyx_k_count_nonzero), 0, 0, 1, 1},
  {&__pyx_n_s_ctype, __pyx_k_ctype, sizeof(__pyx_k_ctype), 0, 0, 1, 1},
  {&__pyx_n_s_ctypename, __pyx_k_ctypename, sizeof(__pyx_k_ctypename), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtypecode, __pyx_k_dtypecode, sizeof(__pyx_k_dtypecode), 0, 0, 1, 1},
  {&__pyx_kp_s_duplicate_branches_requested, __pyx_k_duplicate_branches_requested, sizeof(__pyx_k_duplicate_branches_requested), 0, 0, 1, 0},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_extern_ordereddict, __pyx_k_extern_ordereddict, sizeof(__pyx_k_extern_ordereddict), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_f1, __pyx_k_f1, sizeof(__pyx_k_f1), 0, 0, 1, 1},
  {&__pyx_n_s_f1_2, __pyx_k_f1_2, sizeof(__pyx_k_f1_2), 0, 0, 1, 1},
  {&__pyx_n_s_f2, __pyx_k_f2, sizeof(__pyx_k_f2), 0, 0, 1, 1},
  {&__pyx_n_s_f2_2, __pyx_k_f2_2, sizeof(__pyx_k_f2_2), 0, 0, 1, 1},
  {&__pyx_n_s_f3, __pyx_k_f3, sizeof(__pyx_k_f3), 0, 0, 1, 1},
  {&__pyx_n_s_f3_2, __pyx_k_f3_2, sizeof(__pyx_k_f3_2), 0, 0, 1, 1},
  {&__pyx_kp_s_field_s_of_type_s_is_not_compati, __pyx_k_field_s_of_type_s_is_not_compati, sizeof(__pyx_k_field_s_of_type_s_is_not_compati), 0, 0, 1, 0},
  {&__pyx_n_s_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_kp_s_file_s_is_not_writable, __pyx_k_file_s_is_not_writable, sizeof(__pyx_k_file_s_is_not_writable), 0, 0, 1, 0},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_fill_g1, __pyx_k_fill_g1, sizeof(__pyx_k_fill_g1), 0, 0, 1, 1},
  {&__pyx_n_s_fill_g2, __pyx_k_fill_g2, sizeof(__pyx_k_fill_g2), 0, 0, 1, 1},
  {&__pyx_n_s_fill_h1, __pyx_k_fill_h1, sizeof(__pyx_k_fill_h1), 0, 0, 1, 1},
  {&__pyx_n_s_fill_h2, __pyx_k_fill_h2, sizeof(__pyx_k_fill_h2), 0, 0, 1, 1},
  {&__pyx_n_s_fill_h3, __pyx_k_fill_h3, sizeof(__pyx_k_fill_h3), 0, 0, 1, 1},
  {&__pyx_kp_s_fixed, __pyx_k_fixed, sizeof(__pyx_k_fixed), 0, 0, 1, 0},
  {&__pyx_kp_s_fk_d, __pyx_k_fk_d, sizeof(__pyx_k_fk_d), 0, 0, 1, 0},
  {&__pyx_n_s_fk_name, __pyx_k_fk_name, sizeof(__pyx_k_fk_name), 0, 0, 1, 1},
  {&__pyx_n_s_flatnonzero, __pyx_k_flatnonzero, sizeof(__pyx_k_flatnonzero), 0, 0, 1, 1},
  {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_fn, __pyx_k_fn, sizeof(__pyx_k_fn), 0, 0, 1, 1},
  {&__pyx_n_s_fname, __pyx_k_fname, sizeof(__pyx_k_fname), 0, 0, 1, 1},
  {&__pyx_n_s_fnames, __pyx_k_fnames, sizeof(__pyx_k_fnames), 0, 0, 1, 1},
  {&__pyx_n_s_force_repeat, __pyx_k_force_repeat, sizeof(__pyx_k_force_repeat), 0, 0, 1, 1},
  {&__pyx_n_s_foreign_key, __pyx_k_foreign_key, sizeof(__pyx_k_foreign_key), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_graph, __pyx_k_graph, sizeof(__pyx_k_graph), 0, 0, 1, 1},
  {&__pyx_n_s_graph_2, __pyx_k_graph_2, sizeof(__pyx_k_graph_2), 0, 0, 1, 1},
  {&__pyx_n_s_h1, __pyx_k_h1, sizeof(__pyx_k_h1), 0, 0, 1, 1},
  {&__pyx_n_s_h1_2, __pyx_k_h1_2, sizeof(__pyx_k_h1_2), 0, 0, 1, 1},
  {&__pyx_n_s_h2, __pyx_k_h2, sizeof(__pyx_k_h2), 0, 0, 1, 1},
  {&__pyx_n_s_h2_2, __pyx_k_h2_2, sizeof(__pyx_k_h2_2), 0, 0, 1, 1},
  {&__pyx_n_s_h3, __pyx_k_h3, sizeof(__pyx_k_h3), 0, 0, 1, 1},
  {&__pyx_n_s_h3_2, __pyx_k_h3_2, sizeof(__pyx_k_h3_2), 0, 0, 1, 1},
  {&__pyx_n_s_hist, __pyx_k_hist, sizeof(__pyx_k_hist), 0, 0, 1, 1},
  {&__pyx_n_s_hist_2, __pyx_k_hist_2, sizeof(__pyx_k_hist_2), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_include_weight, __pyx_k_include_weight, sizeof(__pyx_k_include_weight), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_s_int16, __pyx_k_int16, sizeof(__pyx_k_int16), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 0, 1, 1},
  {&__pyx_n_s_int8, __pyx_k_int8, sizeof(__pyx_k_int8), 0, 0, 1, 1},
  {&__pyx_n_s_intree, __pyx_k_intree, sizeof(__pyx_k_intree), 0, 0, 1, 1},
  {&__pyx_n_s_it, __pyx_k_it, sizeof(__pyx_k_it), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_kp_s_leaf_list_for_branch_s_is_empty, __pyx_k_leaf_list_for_branch_s_is_empty, sizeof(__pyx_k_leaf_list_for_branch_s_is_empty), 0, 0, 1, 0},
  {&__pyx_n_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 1},
  {&__pyx_n_s_librootnumpy, __pyx_k_librootnumpy, sizeof(__pyx_k_librootnumpy), 0, 0, 1, 1},
  {&__pyx_n_s_list_branches, __pyx_k_list_branches, sizeof(__pyx_k_list_branches), 0, 0, 1, 1},
  {&__pyx_n_s_list_structures, __pyx_k_list_structures, sizeof(__pyx_k_list_structures), 0, 0, 1, 1},
  {&__pyx_n_s_list_trees, __pyx_k_list_trees, sizeof(__pyx_k_list_trees), 0, 0, 1, 1},
  {&__pyx_n_s_long, __pyx_k_long, sizeof(__pyx_k_long), 0, 0, 1, 1},
  {&__pyx_kp_s_long_long, __pyx_k_long_long, sizeof(__pyx_k_long_long), 0, 0, 1, 0},
  {&__pyx_n_s_longlong, __pyx_k_longlong, sizeof(__pyx_k_longlong), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_mat, __pyx_k_mat, sizeof(__pyx_k_mat), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_matrix_d, __pyx_k_matrix_d, sizeof(__pyx_k_matrix_d), 0, 0, 1, 1},
  {&__pyx_n_s_matrix_f, __pyx_k_matrix_f, sizeof(__pyx_k_matrix_f), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_kp_s_multiple_trees_found_s, __pyx_k_multiple_trees_found_s, sizeof(__pyx_k_multiple_trees_found_s), 0, 0, 1, 0},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_n_samples, __pyx_k_n_samples, sizeof(__pyx_k_n_samples), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_names, __pyx_k_names, sizeof(__pyx_k_names), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_outtree, __pyx_k_outtree, sizeof(__pyx_k_outtree), 0, 0, 1, 1},
  {&__pyx_kp_u_perform_a_blockwise_inner_join, __pyx_k_perform_a_blockwise_inner_join, sizeof(__pyx_k_perform_a_blockwise_inner_join), 0, 1, 0, 0},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_releasebuffer, __pyx_k_pyx_releasebuffer, sizeof(__pyx_k_pyx_releasebuffer), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_kp_s_read_failure_in_current_tree, __pyx_k_read_failure_in_current_tree, sizeof(__pyx_k_read_failure_in_current_tree), 0, 0, 1, 0},
  {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
  {&__pyx_n_s_resize, __pyx_k_resize, sizeof(__pyx_k_resize), 0, 0, 1, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_n_s_return_indices, __pyx_k_return_indices, sizeof(__pyx_k_return_indices), 0, 0, 1, 1},
  {&__pyx_n_s_right, __pyx_k_right, sizeof(__pyx_k_right), 0, 0, 1, 1},
  {&__pyx_n_s_root2array_fromCObj, __pyx_k_root2array_fromCObj, sizeof(__pyx_k_root2array_fromCObj), 0, 0, 1, 1},
  {&__pyx_n_s_root2array_fromFname, __pyx_k_root2array_fromFname, sizeof(__pyx_k_root2array_fromFname), 0, 0, 1, 1},
  {&__pyx_n_s_root_arr, __pyx_k_root_arr, sizeof(__pyx_k_root_arr), 0, 0, 1, 1},
  {&__pyx_n_s_root_mat, __pyx_k_root_mat, sizeof(__pyx_k_root_mat), 0, 0, 1, 1},
  {&__pyx_n_s_rpartition, __pyx_k_rpartition, sizeof(__pyx_k_rpartition), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_kp_s_s__s, __pyx_k_s__s, sizeof(__pyx_k_s__s), 0, 0, 1, 0},
  {&__pyx_n_s_sample_f1, __pyx_k_sample_f1, sizeof(__pyx_k_sample_f1), 0, 0, 1, 1},
  {&__pyx_n_s_sample_f2, __pyx_k_sample_f2, sizeof(__pyx_k_sample_f2), 0, 0, 1, 1},
  {&__pyx_n_s_sample_f3, __pyx_k_sample_f3, sizeof(__pyx_k_sample_f3), 0, 0, 1, 1},
  {&__pyx_n_s_sample_h1, __pyx_k_sample_h1, sizeof(__pyx_k_sample_h1), 0, 0, 1, 1},
  {&__pyx_n_s_sample_h2, __pyx_k_sample_h2, sizeof(__pyx_k_sample_h2), 0, 0, 1, 1},
  {&__pyx_n_s_sample_h3, __pyx_k_sample_h3, sizeof(__pyx_k_sample_h3), 0, 0, 1, 1},
  {&__pyx_n_s_selection, __pyx_k_selection, sizeof(__pyx_k_selection), 0, 0, 1, 1},
  {&__pyx_n_s_short, __pyx_k_short, sizeof(__pyx_k_short), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 1, 1},
  {&__pyx_n_s_string_2, __pyx_k_string_2, sizeof(__pyx_k_string_2), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_the_chain_is_not_initialized, __pyx_k_the_chain_is_not_initialized, sizeof(__pyx_k_the_chain_is_not_initialized), 0, 0, 1, 0},
  {&__pyx_n_s_tree, __pyx_k_tree, sizeof(__pyx_k_tree), 0, 0, 1, 1},
  {&__pyx_kp_s_tree_index_in_chain_is_out_of_bo, __pyx_k_tree_index_in_chain_is_out_of_bo, sizeof(__pyx_k_tree_index_in_chain_is_out_of_bo), 0, 0, 1, 0},
  {&__pyx_kp_s_tree_must_be_PyCObject, __pyx_k_tree_must_be_PyCObject, sizeof(__pyx_k_tree_must_be_PyCObject), 0, 0, 1, 0},
  {&__pyx_kp_s_tree_s_not_found_in_s, __pyx_k_tree_s_not_found_in_s, sizeof(__pyx_k_tree_s_not_found_in_s), 0, 0, 1, 0},
  {&__pyx_n_s_treename, __pyx_k_treename, sizeof(__pyx_k_treename), 0, 0, 1, 1},
  {&__pyx_n_s_ttree, __pyx_k_ttree, sizeof(__pyx_k_ttree), 0, 0, 1, 1},
  {&__pyx_n_s_uint16, __pyx_k_uint16, sizeof(__pyx_k_uint16), 0, 0, 1, 1},
  {&__pyx_n_s_uint32, __pyx_k_uint32, sizeof(__pyx_k_uint32), 0, 0, 1, 1},
  {&__pyx_n_s_uint64, __pyx_k_uint64, sizeof(__pyx_k_uint64), 0, 0, 1, 1},
  {&__pyx_n_s_uint8, __pyx_k_uint8, sizeof(__pyx_k_uint8), 0, 0, 1, 1},
  {&__pyx_n_s_ulonglong, __pyx_k_ulonglong, sizeof(__pyx_k_ulonglong), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_access_tree_0_in_1, __pyx_k_unable_to_access_tree_0_in_1, sizeof(__pyx_k_unable_to_access_tree_0_in_1), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_get_keys_in_s, __pyx_k_unable_to_get_keys_in_s, sizeof(__pyx_k_unable_to_get_keys_in_s), 0, 0, 1, 0},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_kp_s_unsigned_char, __pyx_k_unsigned_char, sizeof(__pyx_k_unsigned_char), 0, 0, 1, 0},
  {&__pyx_kp_s_unsigned_int, __pyx_k_unsigned_int, sizeof(__pyx_k_unsigned_int), 0, 0, 1, 0},
  {&__pyx_kp_s_unsigned_long, __pyx_k_unsigned_long, sizeof(__pyx_k_unsigned_long), 0, 0, 1, 0},
  {&__pyx_kp_s_unsigned_long_long, __pyx_k_unsigned_long_long, sizeof(__pyx_k_unsigned_long_long), 0, 0, 1, 0},
  {&__pyx_kp_s_unsigned_short, __pyx_k_unsigned_short, sizeof(__pyx_k_unsigned_short), 0, 0, 1, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_kp_s_vary, __pyx_k_vary, sizeof(__pyx_k_vary), 0, 0, 1, 0},
  {&__pyx_kp_b_vector_bool, __pyx_k_vector_bool, sizeof(__pyx_k_vector_bool), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_char, __pyx_k_vector_char, sizeof(__pyx_k_vector_char), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_double, __pyx_k_vector_double, sizeof(__pyx_k_vector_double), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_float, __pyx_k_vector_float, sizeof(__pyx_k_vector_float), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_int, __pyx_k_vector_int, sizeof(__pyx_k_vector_int), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_long, __pyx_k_vector_long, sizeof(__pyx_k_vector_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_long_long, __pyx_k_vector_long_long, sizeof(__pyx_k_vector_long_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_short, __pyx_k_vector_short, sizeof(__pyx_k_vector_short), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_char, __pyx_k_vector_unsigned_char, sizeof(__pyx_k_vector_unsigned_char), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_int, __pyx_k_vector_unsigned_int, sizeof(__pyx_k_vector_unsigned_int), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_long, __pyx_k_vector_unsigned_long, sizeof(__pyx_k_vector_unsigned_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_long_long, __pyx_k_vector_unsigned_long_long, sizeof(__pyx_k_vector_unsigned_long_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_short, __pyx_k_vector_unsigned_short, sizeof(__pyx_k_vector_unsigned_short), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_char, __pyx_k_vector_vector_char, sizeof(__pyx_k_vector_vector_char), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_double, __pyx_k_vector_vector_double, sizeof(__pyx_k_vector_vector_double), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_float, __pyx_k_vector_vector_float, sizeof(__pyx_k_vector_vector_float), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_int, __pyx_k_vector_vector_int, sizeof(__pyx_k_vector_vector_int), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_long, __pyx_k_vector_vector_long, sizeof(__pyx_k_vector_vector_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_long_long, __pyx_k_vector_vector_long_long, sizeof(__pyx_k_vector_vector_long_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_short, __pyx_k_vector_vector_short, sizeof(__pyx_k_vector_vector_short), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_char, __pyx_k_vector_vector_unsigned_char, sizeof(__pyx_k_vector_vector_unsigned_char), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_int, __pyx_k_vector_vector_unsigned_int, sizeof(__pyx_k_vector_vector_unsigned_int), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_long, __pyx_k_vector_vector_unsigned_long, sizeof(__pyx_k_vector_vector_unsigned_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_long_long, __pyx_k_vector_vector_unsigned_long_long, sizeof(__pyx_k_vector_vector_unsigned_long_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_short, __pyx_k_vector_vector_unsigned_short, sizeof(__pyx_k_vector_vector_unsigned_short), 0, 0, 0, 0},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_warnings_2, __pyx_k_warnings_2, sizeof(__pyx_k_warnings_2), 0, 0, 1, 1},
  {&__pyx_n_s_weight_name, __pyx_k_weight_name, sizeof(__pyx_k_weight_name), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":264
 * 
 *         #these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_n_s_O); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":419
 *         cv.push_back(this_conv)
 *     if include_weight:
 *         nst.append((weight_name, np.dtype('d')))             # <<<<<<<<<<<<<<
 *     return np.empty(entries, dtype=nst)
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_n_s_d); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":427
 *         return
 *     if load == -1:
 *         raise ValueError("chain is empty")             # <<<<<<<<<<<<<<
 *     elif load == -2:
 *         if ignore_index:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_chain_is_empty); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":431
 *         if ignore_index:
 *             return
 *         raise IndexError("tree index in chain is out of bounds")             # <<<<<<<<<<<<<<
 *     elif load == -3:
 *         raise IOError("cannot open current file")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_tree_index_in_chain_is_out_of_bo); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":433
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:
 *         raise IOError("cannot open current file")             # <<<<<<<<<<<<<<
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_cannot_open_current_file); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":435
 *         raise IOError("cannot open current file")
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")             # <<<<<<<<<<<<<<
 *     raise RuntimeError("the chain is not initialized")
 * 
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_cannot_access_tree_in_current_fi); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":436
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")
 *     raise RuntimeError("the chain is not initialized")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_the_chain_is_not_initialized); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":475
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 *                 del selection_formula
 *                 raise ValueError("could not compile selection formula")             # <<<<<<<<<<<<<<
 *             # The chain will take care of updating the formula leaves when
 *             # rolling over to the next tree.
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_could_not_compile_selection_form); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":485
 *             branches = structure.keys()
 *         elif len(branches) != len(set(branches)):
 *             raise ValueError("duplicate branches requested")             # <<<<<<<<<<<<<<
 * 
 *         for branch in branches:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_duplicate_branches_requested); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":534
 *             handle_load(entry_size)
 *             if entry_size == 0:
 *                 raise IOError("read failure in current tree")             # <<<<<<<<<<<<<<
 * 
 *             # Determine if this entry passes the selection,
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_read_failure_in_current_tree); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":592
 *     # typecheck should be implemented by the wrapper
 *     if not PyCObject_Check(tree):
 *         raise ValueError("tree must be PyCObject")             # <<<<<<<<<<<<<<
 *     cdef TTree* chain = <TTree*> PyCObject_AsVoidPtr(tree)
 *     return tree2array(
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_tree_must_be_PyCObject); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":631
 *         else:
 *             # check type compatibility of existing branch
 *             existing_type = this.branch.GetTitle().rpartition('/')[-1]             # <<<<<<<<<<<<<<
 *             if str(roottype) != existing_type:
 *                 raise TypeError(
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s__13); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":741
 *         # typecheck should be implemented by the wrapper
 *         if not PyCObject_Check(tree):
 *             raise ValueError("tree must be PyCObject")             # <<<<<<<<<<<<<<
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     outtree = array2tree(arr, name=name, tree=intree)
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_tree_must_be_PyCObject); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":8
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":33
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":58
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "/Library/Python/2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":21
 * 
 * TYPES_NUMPY2ROOT = {
 *     np.dtype(np.bool):      (1, 'O'),             # <<<<<<<<<<<<<<
 *     #np.int8 from cython means something else
 *     np.dtype(np.int8):      (1, 'B'),
 */
  __pyx_tuple__25 = PyTuple_Pack(2, __pyx_int_1, __pyx_n_s_O); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":23
 *     np.dtype(np.bool):      (1, 'O'),
 *     #np.int8 from cython means something else
 *     np.dtype(np.int8):      (1, 'B'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int16):     (2, 'S'),
 *     np.dtype(np.int32):     (4, 'I'),
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_int_1, __pyx_n_s_B); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":24
 *     #np.int8 from cython means something else
 *     np.dtype(np.int8):      (1, 'B'),
 *     np.dtype(np.int16):     (2, 'S'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int32):     (4, 'I'),
 *     np.dtype(np.int64):     (8, 'L'),
 */
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_int_2, __pyx_n_s_S); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":25
 *     np.dtype(np.int8):      (1, 'B'),
 *     np.dtype(np.int16):     (2, 'S'),
 *     np.dtype(np.int32):     (4, 'I'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int64):     (8, 'L'),
 *     np.dtype(np.uint8):     (1, 'b'),
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_int_4, __pyx_n_s_I); if (unlikely(!__pyx_tuple__28)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":26
 *     np.dtype(np.int16):     (2, 'S'),
 *     np.dtype(np.int32):     (4, 'I'),
 *     np.dtype(np.int64):     (8, 'L'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint8):     (1, 'b'),
 *     np.dtype(np.uint16):    (2, 's'),
 */
  __pyx_tuple__29 = PyTuple_Pack(2, __pyx_int_8, __pyx_n_s_L); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":27
 *     np.dtype(np.int32):     (4, 'I'),
 *     np.dtype(np.int64):     (8, 'L'),
 *     np.dtype(np.uint8):     (1, 'b'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint16):    (2, 's'),
 *     np.dtype(np.uint32):    (4, 'i'),
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_int_1, __pyx_n_s_b); if (unlikely(!__pyx_tuple__30)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":28
 *     np.dtype(np.int64):     (8, 'L'),
 *     np.dtype(np.uint8):     (1, 'b'),
 *     np.dtype(np.uint16):    (2, 's'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint32):    (4, 'i'),
 *     np.dtype(np.uint64):    (8, 'l'),
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_int_2, __pyx_n_s_s); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":29
 *     np.dtype(np.uint8):     (1, 'b'),
 *     np.dtype(np.uint16):    (2, 's'),
 *     np.dtype(np.uint32):    (4, 'i'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint64):    (8, 'l'),
 *     np.dtype(np.float):     (8, 'D'),
 */
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_int_4, __pyx_n_s_i); if (unlikely(!__pyx_tuple__32)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":30
 *     np.dtype(np.uint16):    (2, 's'),
 *     np.dtype(np.uint32):    (4, 'i'),
 *     np.dtype(np.uint64):    (8, 'l'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float):     (8, 'D'),
 *     np.dtype(np.float32):   (4, 'F'),
 */
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_int_8, __pyx_n_s_l); if (unlikely(!__pyx_tuple__33)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":31
 *     np.dtype(np.uint32):    (4, 'i'),
 *     np.dtype(np.uint64):    (8, 'l'),
 *     np.dtype(np.float):     (8, 'D'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float32):   (4, 'F'),
 *     np.dtype(np.float64):   (8, 'D'),
 */
  __pyx_tuple__34 = PyTuple_Pack(2, __pyx_int_8, __pyx_n_s_D); if (unlikely(!__pyx_tuple__34)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":32
 *     np.dtype(np.uint64):    (8, 'l'),
 *     np.dtype(np.float):     (8, 'D'),
 *     np.dtype(np.float32):   (4, 'F'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float64):   (8, 'D'),
 * #    np.dtype(np.string_):   (18, 'S'),
 */
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_int_4, __pyx_n_s_F); if (unlikely(!__pyx_tuple__35)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":33
 *     np.dtype(np.float):     (8, 'D'),
 *     np.dtype(np.float32):   (4, 'F'),
 *     np.dtype(np.float64):   (8, 'D'),             # <<<<<<<<<<<<<<
 * #    np.dtype(np.string_):   (18, 'S'),
 * }
 */
  __pyx_tuple__36 = PyTuple_Pack(2, __pyx_int_8, __pyx_n_s_D); if (unlikely(!__pyx_tuple__36)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":38
 * 
 * 
 * def list_trees(fname):             # <<<<<<<<<<<<<<
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 */
  __pyx_tuple__37 = PyTuple_Pack(9, __pyx_n_s_fname, __pyx_n_s_f, __pyx_n_s_keys, __pyx_n_s_ret, __pyx_n_s_n, __pyx_n_s_obj, __pyx_n_s_i, __pyx_n_s_name, __pyx_n_s_clname); if (unlikely(!__pyx_tuple__37)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo, __pyx_n_s_list_trees, 38, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":60
 * 
 * 
 * def list_structures(fname, tree=None):             # <<<<<<<<<<<<<<
 *     if tree is None:
 *         # automatically select single tree
 */
  __pyx_tuple__39 = PyTuple_Pack(4, __pyx_n_s_fname, __pyx_n_s_tree, __pyx_n_s_f, __pyx_n_s_t); if (unlikely(!__pyx_tuple__39)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo, __pyx_n_s_list_structures, 60, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":80
 * 
 * 
 * def list_branches(fname, tree=None):             # <<<<<<<<<<<<<<
 *     return list_structures(fname, tree).keys()
 * 
 */
  __pyx_tuple__41 = PyTuple_Pack(2, __pyx_n_s_fname, __pyx_n_s_tree); if (unlikely(!__pyx_tuple__41)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo, __pyx_n_s_list_branches, 80, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":566
 * 
 * 
 * def root2array_fromFname(fnames, treename, branches,             # <<<<<<<<<<<<<<
 *                          selection, start, stop, step,
 *                          include_weight, weight_name):
 */
  __pyx_tuple__43 = PyTuple_Pack(12, __pyx_n_s_fnames, __pyx_n_s_treename, __pyx_n_s_branches, __pyx_n_s_selection, __pyx_n_s_start, __pyx_n_s_stop, __pyx_n_s_step, __pyx_n_s_include_weight, __pyx_n_s_weight_name, __pyx_n_s_ttree, __pyx_n_s_fn, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__43)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(9, 0, 12, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo, __pyx_n_s_root2array_fromFname, 566, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":585
 * 
 * 
 * def root2array_fromCObj(tree, branches, selection,             # <<<<<<<<<<<<<<
 *                         start, stop, step,
 *                         include_weight, weight_name):
 */
  __pyx_tuple__45 = PyTuple_Pack(9, __pyx_n_s_tree, __pyx_n_s_branches, __pyx_n_s_selection, __pyx_n_s_start, __pyx_n_s_stop, __pyx_n_s_step, __pyx_n_s_include_weight, __pyx_n_s_weight_name, __pyx_n_s_chain); if (unlikely(!__pyx_tuple__45)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo, __pyx_n_s_root2array_fromCObj, 585, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":733
 * 
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):             # <<<<<<<<<<<<<<
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 */
  __pyx_tuple__47 = PyTuple_Pack(5, __pyx_n_s_arr, __pyx_n_s_name, __pyx_n_s_tree, __pyx_n_s_intree, __pyx_n_s_outtree); if (unlikely(!__pyx_tuple__47)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo, __pyx_n_s_array2tree_toCObj, 733, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":747
 * 
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):             # <<<<<<<<<<<<<<
 *     cdef TFile* file = Open(filename, mode)
 *     if file is NULL:
 */
  __pyx_tuple__49 = PyTuple_Pack(6, __pyx_n_s_arr, __pyx_n_s_filename, __pyx_n_s_treename, __pyx_n_s_mode, __pyx_n_s_file, __pyx_n_s_tree); if (unlikely(!__pyx_tuple__49)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo, __pyx_n_s_array2root, 747, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":761
 * 
 * @atexit.register
 * def cleanup():             # <<<<<<<<<<<<<<
 *     # delete all allocated converters
 *     it = CONVERTERS.begin()
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_n_s_it); if (unlikely(!__pyx_tuple__51)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo, __pyx_n_s_cleanup, 761, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":10
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)
 * 
 * def array_d(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 */
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__53)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_2, __pyx_n_s_array_d, 10, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":14
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 * 
 * def array_f(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 */
  __pyx_tuple__55 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__55)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_2, __pyx_n_s_array_f, 14, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":18
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 * 
 * def array_l(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__57)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_2, __pyx_n_s_array_l, 18, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":22
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 * 
 * def array_i(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 */
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__59)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_2, __pyx_n_s_array_i, 22, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":26
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 * 
 * def array_s(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 */
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__61)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_2, __pyx_n_s_array_s, 26, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":30
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 * 
 * def array_c(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */
  __pyx_tuple__63 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__63)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_2, __pyx_n_s_array_c, 30, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":5
 * """
 * 
 * def matrix_d(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 */
  __pyx_tuple__65 = PyTuple_Pack(5, __pyx_n_s_root_mat, __pyx_n_s_mat, __pyx_n_s_arr, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__65)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_3, __pyx_n_s_matrix_d, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":15
 *     return np.matrix(arr)
 * 
 * def matrix_f(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 */
  __pyx_tuple__67 = PyTuple_Pack(5, __pyx_n_s_root_mat, __pyx_n_s_mat, __pyx_n_s_arr, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__67)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_3, __pyx_n_s_matrix_f, 15, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":5
 * """
 * 
 * def sample_f1(f1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef unsigned int i
 */
  __pyx_tuple__69 = PyTuple_Pack(5, __pyx_n_s_f1, __pyx_n_s_n_samples, __pyx_n_s_f1_2, __pyx_n_s_i, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__69)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_4, __pyx_n_s_sample_f1, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":14
 * 
 * 
 * def sample_h1(h1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef unsigned int i
 */
  __pyx_tuple__71 = PyTuple_Pack(5, __pyx_n_s_h1, __pyx_n_s_n_samples, __pyx_n_s_h1_2, __pyx_n_s_i, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__71)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_4, __pyx_n_s_sample_h1, 14, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":23
 * 
 * 
 * def sample_f2(f2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef unsigned int i
 */
  __pyx_tuple__73 = PyTuple_Pack(7, __pyx_n_s_f2, __pyx_n_s_n_samples, __pyx_n_s_f2_2, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__73)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_4, __pyx_n_s_sample_f2, 23, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":36
 * 
 * 
 * def sample_h2(h2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef unsigned int i
 */
  __pyx_tuple__75 = PyTuple_Pack(7, __pyx_n_s_h2, __pyx_n_s_n_samples, __pyx_n_s_h2_2, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__75)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_4, __pyx_n_s_sample_h2, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":49
 * 
 * 
 * def sample_f3(f3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef unsigned int i
 */
  __pyx_tuple__77 = PyTuple_Pack(8, __pyx_n_s_f3, __pyx_n_s_n_samples, __pyx_n_s_f3_2, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__77)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_4, __pyx_n_s_sample_f3, 49, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":64
 * 
 * 
 * def sample_h3(h3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef unsigned int i
 */
  __pyx_tuple__79 = PyTuple_Pack(8, __pyx_n_s_h3, __pyx_n_s_n_samples, __pyx_n_s_h3_2, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__79)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_4, __pyx_n_s_sample_h3, 64, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":1
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */
  __pyx_tuple__81 = PyTuple_Pack(9, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__81)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_5, __pyx_n_s_fill_h1, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":26
 *         return idx
 * 
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */
  __pyx_tuple__83 = PyTuple_Pack(9, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__83)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_5, __pyx_n_s_fill_h2, 26, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":51
 *         return idx
 * 
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */
  __pyx_tuple__85 = PyTuple_Pack(9, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__85)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_5, __pyx_n_s_fill_h3, 51, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":1
 * def fill_g1(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */
  __pyx_tuple__87 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_array, __pyx_n_s_graph_2, __pyx_n_s_size, __pyx_n_s_i); if (unlikely(!__pyx_tuple__87)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_6, __pyx_n_s_fill_g1, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":11
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 * 
 * def fill_g2(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */
  __pyx_tuple__89 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_array, __pyx_n_s_graph_2, __pyx_n_s_size, __pyx_n_s_i); if (unlikely(!__pyx_tuple__89)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_kratsg_root_numpy_dev_roo_6, __pyx_n_s_fill_g2, 11, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_librootnumpy(void); /*proto*/
PyMODINIT_FUNC init_librootnumpy(void)
#else
PyMODINIT_FUNC PyInit__librootnumpy(void); /*proto*/
PyMODINIT_FUNC PyInit__librootnumpy(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  std::string __pyx_t_16;
  std::string __pyx_t_17;
  int __pyx_t_18;
  __pyx_t_13_librootnumpy_CONVERTERS_ITEM __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__librootnumpy(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_librootnumpy"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main__librootnumpy) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "_librootnumpy")) {
      if (unlikely(PyDict_SetItemString(modules, "_librootnumpy", __pyx_m) < 0)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[14]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[15]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_5array_array = __Pyx_ImportType("array", "array", sizeof(arrayobject), 0); if (unlikely(!__pyx_ptype_7cpython_5array_array)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":2
 * # cython: experimental_cpp_class_def=True
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * np.import_array()
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":4
 * import numpy as np
 * cimport numpy as np
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * from cpython cimport array
 */
  import_array();

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":21
 * from libc.stdlib cimport malloc, free, realloc
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from collections import OrderedDict
 * except ImportError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":22
 * 
 * try:
 *     from collections import OrderedDict             # <<<<<<<<<<<<<<
 * except ImportError:
 *     # Fall back on drop-in
 */
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_OrderedDict);
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderedDict);
      __Pyx_GIVEREF(__pyx_n_s_OrderedDict);
      __pyx_t_5 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L9_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":23
 * try:
 *     from collections import OrderedDict
 * except ImportError:             # <<<<<<<<<<<<<<
 *     # Fall back on drop-in
 *     from .extern.ordereddict import OrderedDict
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("_librootnumpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_1, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);

      /* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":25
 * except ImportError:
 *     # Fall back on drop-in
 *     from .extern.ordereddict import OrderedDict             # <<<<<<<<<<<<<<
 * 
 * import atexit
 */
      __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_OrderedDict);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_OrderedDict);
      __Pyx_GIVEREF(__pyx_n_s_OrderedDict);
      __pyx_t_9 = __Pyx_Import(__pyx_n_s_extern_ordereddict, __pyx_t_8, 1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_ImportFrom(__pyx_t_9, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    __pyx_L9_try_end:;
  }

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":27
 *     from .extern.ordereddict import OrderedDict
 * 
 * import atexit             # <<<<<<<<<<<<<<
 * import warnings
 * from _warnings import RootNumpyUnconvertibleWarning
 */
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_atexit, 0, -1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_atexit, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":28
 * 
 * import atexit
 * import warnings             # <<<<<<<<<<<<<<
 * from _warnings import RootNumpyUnconvertibleWarning
 * 
 */
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_warnings, 0, -1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/setup.pxi":29
 * import atexit
 * import warnings
 * from _warnings import RootNumpyUnconvertibleWarning             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned char unsigned_char
 */
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_RootNumpyUnconvertibleWarning);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_RootNumpyUnconvertibleWarning);
  __Pyx_GIVEREF(__pyx_n_s_RootNumpyUnconvertibleWarning);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_warnings_2, __pyx_t_7, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_RootNumpyUnconvertibleWarning); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RootNumpyUnconvertibleWarning, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":3
 * # cython: experimental_cpp_class_def=True
 * 
 * TYPES = {             # <<<<<<<<<<<<<<
 *     TypeName[bool]().name:               ('bool',               np.dtype(np.bool),      np.NPY_BOOL),
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":4
 * 
 * TYPES = {
 *     TypeName[bool]().name:               ('bool',               np.dtype(np.bool),      np.NPY_BOOL),             # <<<<<<<<<<<<<<
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),
 */
  __pyx_t_7 = __Pyx_PyBytes_FromString(TypeName<bool>().name); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_bool); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyInt_FromLong(NPY_BOOL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_n_s_bool);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_bool);
  __Pyx_GIVEREF(__pyx_n_s_bool);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_9 = 0;
  __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":5
 * TYPES = {
 *     TypeName[bool]().name:               ('bool',               np.dtype(np.bool),      np.NPY_BOOL),
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),
 */
  __pyx_t_8 = __Pyx_PyBytes_FromString(TypeName<char>().name); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromLong(NPY_INT8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_n_s_char);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_char);
  __Pyx_GIVEREF(__pyx_n_s_char);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":6
 *     TypeName[bool]().name:               ('bool',               np.dtype(np.bool),      np.NPY_BOOL),
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),             # <<<<<<<<<<<<<<
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT8),
 */
  __pyx_t_9 = __Pyx_PyBytes_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_char>().name); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyInt_FromLong(NPY_UINT8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_kp_s_unsigned_char);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_s_unsigned_char);
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_char);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":7
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT8),
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),
 */
  __pyx_t_5 = __Pyx_PyBytes_FromString(TypeName<short>().name); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int16); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyInt_FromLong(NPY_INT16); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_short);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_short);
  __Pyx_GIVEREF(__pyx_n_s_short);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_5, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":8
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT8),             # <<<<<<<<<<<<<<
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),
 */
  __pyx_t_7 = __Pyx_PyBytes_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_short>().name); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uint16); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyInt_FromLong(NPY_UINT8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_kp_s_unsigned_short);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_s_unsigned_short);
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_short);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_9 = 0;
  __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":9
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT8),
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),
 */
  __pyx_t_8 = __Pyx_PyBytes_FromString(TypeName<int>().name); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromLong(NPY_INT32); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_n_s_int);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_int);
  __Pyx_GIVEREF(__pyx_n_s_int);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":10
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT8),
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),             # <<<<<<<<<<<<<<
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),
 */
  __pyx_t_9 = __Pyx_PyBytes_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_int>().name); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint32); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyInt_FromLong(NPY_UINT32); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_kp_s_unsigned_int);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_s_unsigned_int);
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_int);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":11
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),
 */
  __pyx_t_5 = __Pyx_PyBytes_FromString(TypeName<long>().name); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int64); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyInt_FromLong(NPY_INT64); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_long);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_long);
  __Pyx_GIVEREF(__pyx_n_s_long);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_5, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":12
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),             # <<<<<<<<<<<<<<
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),
 */
  __pyx_t_7 = __Pyx_PyBytes_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_long>().name); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uint64); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyInt_FromLong(NPY_UINT64); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_kp_s_unsigned_long);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_s_unsigned_long);
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_long);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_9 = 0;
  __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":13
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),
 */
  __pyx_t_8 = __Pyx_PyBytes_FromString(TypeName<__pyx_t_13_librootnumpy_long_long>().name); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_longlong); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_kp_s_long_long);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_s_long_long);
  __Pyx_GIVEREF(__pyx_kp_s_long_long);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":14
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),             # <<<<<<<<<<<<<<
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),
 *     TypeName[double]().name:             ('double',             np.dtype(np.float64),   np.NPY_FLOAT64),
 */
  __pyx_t_9 = __Pyx_PyBytes_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_long_long>().name); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_ulonglong); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_kp_s_unsigned_long_long);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_s_unsigned_long_long);
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_long_long);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":15
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),             # <<<<<<<<<<<<<<
 *     TypeName[double]().name:             ('double',             np.dtype(np.float64),   np.NPY_FLOAT64),
 *     TypeName[string]().name:             ('string',             np.dtype(np.string_),   np.NPY_STRING),
 */
  __pyx_t_5 = __Pyx_PyBytes_FromString(TypeName<float>().name); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_float32); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyInt_FromLong(NPY_FLOAT32); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_float);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_float);
  __Pyx_GIVEREF(__pyx_n_s_float);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_5, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":16
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),
 *     TypeName[double]().name:             ('double',             np.dtype(np.float64),   np.NPY_FLOAT64),             # <<<<<<<<<<<<<<
 *     TypeName[string]().name:             ('string',             np.dtype(np.string_),   np.NPY_STRING),
 * }
 */
  __pyx_t_7 = __Pyx_PyBytes_FromString(TypeName<double>().name); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyInt_FromLong(NPY_FLOAT64); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_n_s_double);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_double);
  __Pyx_GIVEREF(__pyx_n_s_double);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_9 = 0;
  __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":17
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),
 *     TypeName[double]().name:             ('double',             np.dtype(np.float64),   np.NPY_FLOAT64),
 *     TypeName[string]().name:             ('string',             np.dtype(np.string_),   np.NPY_STRING),             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_8 = __Pyx_PyBytes_FromString(TypeName<std::string>().name); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_string_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromLong(NPY_STRING); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_n_s_string);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_string);
  __Pyx_GIVEREF(__pyx_n_s_string);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TYPES, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":20
 * }
 * 
 * TYPES_NUMPY2ROOT = {             # <<<<<<<<<<<<<<
 *     np.dtype(np.bool):      (1, 'O'),
 *     #np.int8 from cython means something else
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":21
 * 
 * TYPES_NUMPY2ROOT = {
 *     np.dtype(np.bool):      (1, 'O'),             # <<<<<<<<<<<<<<
 *     #np.int8 from cython means something else
 *     np.dtype(np.int8):      (1, 'B'),
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_bool); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__25) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":23
 *     np.dtype(np.bool):      (1, 'O'),
 *     #np.int8 from cython means something else
 *     np.dtype(np.int8):      (1, 'B'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int16):     (2, 'S'),
 *     np.dtype(np.int32):     (4, 'I'),
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_tuple__26) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":24
 *     #np.int8 from cython means something else
 *     np.dtype(np.int8):      (1, 'B'),
 *     np.dtype(np.int16):     (2, 'S'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int32):     (4, 'I'),
 *     np.dtype(np.int64):     (8, 'L'),
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int16); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__27) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":25
 *     np.dtype(np.int8):      (1, 'B'),
 *     np.dtype(np.int16):     (2, 'S'),
 *     np.dtype(np.int32):     (4, 'I'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int64):     (8, 'L'),
 *     np.dtype(np.uint8):     (1, 'b'),
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int32); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_tuple__28) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":26
 *     np.dtype(np.int16):     (2, 'S'),
 *     np.dtype(np.int32):     (4, 'I'),
 *     np.dtype(np.int64):     (8, 'L'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint8):     (1, 'b'),
 *     np.dtype(np.uint16):    (2, 's'),
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int64); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__29) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":27
 *     np.dtype(np.int32):     (4, 'I'),
 *     np.dtype(np.int64):     (8, 'L'),
 *     np.dtype(np.uint8):     (1, 'b'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint16):    (2, 's'),
 *     np.dtype(np.uint32):    (4, 'i'),
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_tuple__30) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":28
 *     np.dtype(np.int64):     (8, 'L'),
 *     np.dtype(np.uint8):     (1, 'b'),
 *     np.dtype(np.uint16):    (2, 's'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint32):    (4, 'i'),
 *     np.dtype(np.uint64):    (8, 'l'),
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_uint16); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__31) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":29
 *     np.dtype(np.uint8):     (1, 'b'),
 *     np.dtype(np.uint16):    (2, 's'),
 *     np.dtype(np.uint32):    (4, 'i'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint64):    (8, 'l'),
 *     np.dtype(np.float):     (8, 'D'),
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint32); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_tuple__32) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":30
 *     np.dtype(np.uint16):    (2, 's'),
 *     np.dtype(np.uint32):    (4, 'i'),
 *     np.dtype(np.uint64):    (8, 'l'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float):     (8, 'D'),
 *     np.dtype(np.float32):   (4, 'F'),
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_uint64); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__33) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":31
 *     np.dtype(np.uint32):    (4, 'i'),
 *     np.dtype(np.uint64):    (8, 'l'),
 *     np.dtype(np.float):     (8, 'D'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float32):   (4, 'F'),
 *     np.dtype(np.float64):   (8, 'D'),
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_float); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_tuple__34) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":32
 *     np.dtype(np.uint64):    (8, 'l'),
 *     np.dtype(np.float):     (8, 'D'),
 *     np.dtype(np.float32):   (4, 'F'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float64):   (8, 'D'),
 * #    np.dtype(np.string_):   (18, 'S'),
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_float32); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__35) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":33
 *     np.dtype(np.float):     (8, 'D'),
 *     np.dtype(np.float32):   (4, 'F'),
 *     np.dtype(np.float64):   (8, 'D'),             # <<<<<<<<<<<<<<
 * #    np.dtype(np.string_):   (18, 'S'),
 * }
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_float64); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_tuple__36) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TYPES_NUMPY2ROOT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":38
 * 
 * 
 * def list_trees(fname):             # <<<<<<<<<<<<<<
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_1list_trees, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_trees, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":60
 * 
 * 
 * def list_structures(fname, tree=None):             # <<<<<<<<<<<<<<
 *     if tree is None:
 *         # automatically select single tree
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_3list_structures, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_structures, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":80
 * 
 * 
 * def list_branches(fname, tree=None):             # <<<<<<<<<<<<<<
 *     return list_structures(fname, tree).keys()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_5list_branches, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_branches, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":305
 * ctypedef pair[string, Converter*] CONVERTERS_ITEM
 * 
 * for ctypename, (ctype, dtype, dtypecode) in TYPES.items():             # <<<<<<<<<<<<<<
 *     CONVERTERS.insert(CONVERTERS_ITEM(
 *         ctype, new BasicConverter(
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_items); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_9 = __pyx_t_1; __Pyx_INCREF(__pyx_t_9); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = Py_TYPE(__pyx_t_9)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (!__pyx_t_11 && PyList_CheckExact(__pyx_t_9)) {
      if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_9)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_11 && PyTuple_CheckExact(__pyx_t_9)) {
      if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_11(__pyx_t_9);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_8 = __pyx_t_12(__pyx_t_5); if (unlikely(!__pyx_t_8)) goto __pyx_L14_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      index = 1; __pyx_t_7 = __pyx_t_12(__pyx_t_5); if (unlikely(!__pyx_t_7)) goto __pyx_L14_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_5), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L15_unpacking_done;
      __pyx_L14_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L15_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctypename, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_13 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_13 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_14 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_14);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_14);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_15 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_15)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_5)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_13 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_13)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_13);
      index = 2; __pyx_t_14 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_14)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_14);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_15), 3) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      goto __pyx_L17_unpacking_done;
      __pyx_L16_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L17_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_dtype, __pyx_t_13) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_dtypecode, __pyx_t_14) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":307
 * for ctypename, (ctype, dtype, dtypecode) in TYPES.items():
 *     CONVERTERS.insert(CONVERTERS_ITEM(
 *         ctype, new BasicConverter(             # <<<<<<<<<<<<<<
 *             dtype.itemsize, dtype.name, dtypecode)))
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_16 = __pyx_convert_string_from_py_(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":308
 *     CONVERTERS.insert(CONVERTERS_ITEM(
 *         ctype, new BasicConverter(
 *             dtype.itemsize, dtype.name, dtypecode)))             # <<<<<<<<<<<<<<
 * 
 * # special case for vector<bool>
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_dtypecode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":306
 * 
 * for ctypename, (ctype, dtype, dtypecode) in TYPES.items():
 *     CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *         ctype, new BasicConverter(
 *             dtype.itemsize, dtype.name, dtypecode)))
 */
    try {
      __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_16, new __pyx_t_13_librootnumpy_BasicConverter(__pyx_t_6, __pyx_t_17, __pyx_t_18));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":312
 * # special case for vector<bool>
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<bool>', new VectorBoolConverter()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<char>', new VectorConverter[char]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_bool); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":311
 * 
 * # special case for vector<bool>
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<bool>', new VectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorBoolConverter());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":314
 *     'vector<bool>', new VectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<char>', new VectorConverter[char]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_char); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":313
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<bool>', new VectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<char>', new VectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<char>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":316
 *     'vector<char>', new VectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<short>', new VectorConverter[short]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_unsigned_char); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":315
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<char>', new VectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_char>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":318
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<short>', new VectorConverter[short]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_short); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":317
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<short>', new VectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<short>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":320
 *     'vector<short>', new VectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<int>', new VectorConverter[int]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_unsigned_short); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":319
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<short>', new VectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_short>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":322
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<int>', new VectorConverter[int]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_int); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":321
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<int>', new VectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<int>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":324
 *     'vector<int>', new VectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long>', new VectorConverter[long]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_unsigned_int); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":323
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<int>', new VectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_int>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":326
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long>', new VectorConverter[long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":325
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<long>', new VectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<long>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":328
 *     'vector<long>', new VectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long long>', new VectorConverter[long_long]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_unsigned_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":327
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long>', new VectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_long>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":330
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long long>', new VectorConverter[long_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_long_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":329
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<long long>', new VectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_long_long>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":332
 *     'vector<long long>', new VectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<float>', new VectorConverter[float]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_unsigned_long_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":331
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long long>', new VectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_long_long>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":334
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<float>', new VectorConverter[float]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<double>', new VectorConverter[double]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_float); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":333
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<float>', new VectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<float>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":336
 *     'vector<float>', new VectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<double>', new VectorConverter[double]()))             # <<<<<<<<<<<<<<
 * #    vector<vector<string> > doesn't work -- just returns blanks, so it's with type-casting
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_double); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":335
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<float>', new VectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<double>', new VectorConverter[double]()))
 * #    vector<vector<string> > doesn't work -- just returns blanks, so it's with type-casting
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<double>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":339
 * #    vector<vector<string> > doesn't work -- just returns blanks, so it's with type-casting
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_vector_char); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":338
 *     'vector<double>', new VectorConverter[double]()))
 * #    vector<vector<string> > doesn't work -- just returns blanks, so it's with type-casting
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<char>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":341
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_vector_unsigned_char); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":340
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_char>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":343
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_vector_short); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":342
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<short>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":345
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_vector_unsigned_short); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":344
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_short>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":347
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_vector_int); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":346
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<int>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":349
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_vector_unsigned_int); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":348
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_int>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":351
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_vector_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":350
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<long>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":353
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_vector_unsigned_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":352
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_long>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":355
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_vector_long_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":354
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_long_long>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":357
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_vector_unsigned_long_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":356
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_long_long>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":359
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<double> >', new VectorVectorConverter[double]()))
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_vector_float); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":358
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<float>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":361
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<double> >', new VectorVectorConverter[double]()))             # <<<<<<<<<<<<<<
 * 
 * cdef Converter* find_converter(Column* col):
 */
  __pyx_t_17 = __pyx_convert_string_from_py_(__pyx_kp_b_vector_vector_double); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":360
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<double> >', new VectorVectorConverter[double]()))
 * 
 */
  try {
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<double>());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":566
 * 
 * 
 * def root2array_fromFname(fnames, treename, branches,             # <<<<<<<<<<<<<<
 *                          selection, start, stop, step,
 *                          include_weight, weight_name):
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_7root2array_fromFname, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_root2array_fromFname, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":585
 * 
 * 
 * def root2array_fromCObj(tree, branches, selection,             # <<<<<<<<<<<<<<
 *                         start, stop, step,
 *                         include_weight, weight_name):
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_9root2array_fromCObj, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_root2array_fromCObj, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":733
 * 
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):             # <<<<<<<<<<<<<<
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_11array2tree_toCObj, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array2tree_toCObj, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":747
 * 
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):             # <<<<<<<<<<<<<<
 *     cdef TFile* file = Open(filename, mode)
 *     if file is NULL:
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_13array2root, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array2root, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":760
 * 
 * 
 * @atexit.register             # <<<<<<<<<<<<<<
 * def cleanup():
 *     # delete all allocated converters
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_atexit); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_register); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":761
 * 
 * @atexit.register
 * def cleanup():             # <<<<<<<<<<<<<<
 *     # delete all allocated converters
 *     it = CONVERTERS.begin()
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_15cleanup, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/tree.pyx":760
 * 
 * 
 * @atexit.register             # <<<<<<<<<<<<<<
 * def cleanup():
 *     # delete all allocated converters
 */
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cleanup, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":10
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)
 * 
 * def array_d(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_17array_d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_d, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":14
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 * 
 * def array_f(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_19array_f, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_f, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":18
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 * 
 * def array_l(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_21array_l, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_l, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":22
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 * 
 * def array_i(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_23array_i, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_i, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":26
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 * 
 * def array_s(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_25array_s, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_s, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/array.pyx":30
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 * 
 * def array_c(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_27array_c, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_c, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":5
 * """
 * 
 * def matrix_d(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_29matrix_d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_matrix_d, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/matrix.pyx":15
 *     return np.matrix(arr)
 * 
 * def matrix_f(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_31matrix_f, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_matrix_f, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":5
 * """
 * 
 * def sample_f1(f1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef unsigned int i
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_33sample_f1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_f1, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":14
 * 
 * 
 * def sample_h1(h1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef unsigned int i
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_35sample_h1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_h1, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":23
 * 
 * 
 * def sample_f2(f2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef unsigned int i
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_37sample_f2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_f2, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":36
 * 
 * 
 * def sample_h2(h2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef unsigned int i
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_39sample_h2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_h2, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":49
 * 
 * 
 * def sample_f3(f3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef unsigned int i
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_41sample_f3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_f3, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/sample.pyx":64
 * 
 * 
 * def sample_h3(h3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef unsigned int i
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_43sample_h3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_h3, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":1
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_45fill_h1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_h1, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":26
 *         return idx
 * 
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_47fill_h2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_h2, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/hist.pyx":51
 *         return idx
 * 
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_49fill_h3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_h3, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":1
 * def fill_g1(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_51fill_g1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_g1, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/graph.pyx":11
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 * 
 * def fill_g2(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */
  __pyx_t_9 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_53fill_g2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_g2, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":1
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */
  __pyx_t_9 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/Users/kratsg/root_numpy_dev/root_numpy/src/innerjoin.pyx":200
 * 
 * 
 * cdef _scalar_fk_inner_join(np.ndarray data, right, np.ndarray fk,             # <<<<<<<<<<<<<<
 *                            fk_name, new_dtype,
 *                            repeat_columns, stretch_columns,
 */
  __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_t_9, __pyx_kp_u_blockwise_inner_join_line_11, __pyx_kp_u_perform_a_blockwise_inner_join) < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  if (__pyx_m) {
    __Pyx_AddTraceback("init _librootnumpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _librootnumpy");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
#endif
    result = (*call)(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    Py_LeaveRecursiveCall();
#endif
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        #if CYTHON_PEP393_ENABLED
        if (unlikely(PyUnicode_READY(s1) < 0) || unlikely(PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, length * kind);
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL)
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return -1;
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1) /* First char was not a digit */
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count; /* Consume from buffer string */
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break; /* breaks both loops as ctx->enc_count == 0 */
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue; /* empty struct */
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;  /* not a 'break' in the loop */
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
                return ts;
      case ' ':
      case 10:
      case 13:
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T': /* substruct */
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0; /* Erase processed last struct element */
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}': /* end of substruct; either repeat or move on */
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0; /* Erase processed last struct element */
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }        /* fall through */
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 's': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
        } else {
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_count = ctx->new_count;
          ctx->enc_packmode = ctx->new_packmode;
          ctx->enc_type = *ts;
          ctx->is_complex = got_Z;
        }
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
  #if PY_VERSION_HEX >= 0x02060000
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
  #endif
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) return __pyx_pw_7cpython_5array_5array_1__getbuffer__(obj, view, flags);
  #if PY_VERSION_HEX < 0x02060000
    if (obj->ob_type->tp_dict) {
        PyObject *getbuffer_cobj = PyObject_GetItem(
            obj->ob_type->tp_dict, __pyx_n_s_pyx_getbuffer);
        if (getbuffer_cobj) {
            getbufferproc func = (getbufferproc) PyCObject_AsVoidPtr(getbuffer_cobj);
            Py_DECREF(getbuffer_cobj);
            if (!func)
                goto fail;
            return func(obj, view, flags);
        } else {
            PyErr_Clear();
        }
    }
  #endif
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
#if PY_VERSION_HEX < 0x02060000
fail:
#endif
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
  #if PY_VERSION_HEX >= 0x02060000
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
  #endif
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) { __pyx_pw_7cpython_5array_5array_3__releasebuffer__(obj, view); return; }
  #if PY_VERSION_HEX < 0x02060000
    if (obj->ob_type->tp_dict) {
        PyObject *releasebuffer_cobj = PyObject_GetItem(
            obj->ob_type->tp_dict, __pyx_n_s_pyx_releasebuffer);
        if (releasebuffer_cobj) {
            releasebufferproc func = (releasebufferproc) PyCObject_AsVoidPtr(releasebuffer_cobj);
            Py_DECREF(releasebuffer_cobj);
            if (!func)
                goto fail;
            func(obj, view);
            return;
        } else {
            PyErr_Clear();
        }
    }
  #endif
    goto nofail;
#if PY_VERSION_HEX < 0x02060000
fail:
#endif
    PyErr_WriteUnraisable(obj);
nofail:
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif /*  PY_MAJOR_VERSION < 3 */


          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned int");
                return (unsigned int) -1;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned int");
                return (unsigned int) -1;
            }
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long, PyLong_AsLong)
            } else if (sizeof(unsigned int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(size_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong)
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long) -1;
            }
            return (unsigned long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long) -1;
            }
            if (sizeof(unsigned long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(unsigned long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(unsigned long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(unsigned long, long, PyLong_AsLong)
            } else if (sizeof(unsigned long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned long) -1;
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long) -1;
        val = __Pyx_PyInt_As_unsigned_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
